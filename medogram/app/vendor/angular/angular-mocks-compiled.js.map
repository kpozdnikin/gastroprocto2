{"version":3,"sources":["angular-mocks.js"],"names":[],"mappings":"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","file":"angular-mocks-compiled.js","sourcesContent":["/**\n * @license AngularJS v1.5.7\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name angular.mock\n * @description\n *\n * Namespace from 'angular-mocks.js' which contains testing related code.\n *\n */\nangular.mock = {};\n\n/**\n * ! This is a private undocumented service !\n *\n * @name $browser\n *\n * @description\n * This service is a mock implementation of {@link ng.$browser}. It provides fake\n * implementation for commonly used browser apis that are hard to test, e.g. setTimeout, xhr,\n * cookies, etc.\n *\n * The api of this service is the same as that of the real {@link ng.$browser $browser}, except\n * that there are several helper methods available which can be used in tests.\n */\nangular.mock.$BrowserProvider = function() {\n  this.$get = function() {\n    return new angular.mock.$Browser();\n  };\n};\n\nangular.mock.$Browser = function() {\n  var self = this;\n\n  this.isMock = true;\n  self.$$url = \"http://server/\";\n  self.$$lastUrl = self.$$url; // used by url polling fn\n  self.pollFns = [];\n\n  // TODO(vojta): remove this temporary api\n  self.$$completeOutstandingRequest = angular.noop;\n  self.$$incOutstandingRequestCount = angular.noop;\n\n\n  // register url polling fn\n\n  self.onUrlChange = function(listener) {\n    self.pollFns.push(\n      function() {\n        if (self.$$lastUrl !== self.$$url || self.$$state !== self.$$lastState) {\n          self.$$lastUrl = self.$$url;\n          self.$$lastState = self.$$state;\n          listener(self.$$url, self.$$state);\n        }\n      }\n    );\n\n    return listener;\n  };\n\n  self.$$applicationDestroyed = angular.noop;\n  self.$$checkUrlChange = angular.noop;\n\n  self.deferredFns = [];\n  self.deferredNextId = 0;\n\n  self.defer = function(fn, delay) {\n    delay = delay || 0;\n    self.deferredFns.push({time:(self.defer.now + delay), fn:fn, id: self.deferredNextId});\n    self.deferredFns.sort(function(a, b) { return a.time - b.time;});\n    return self.deferredNextId++;\n  };\n\n\n  /**\n   * @name $browser#defer.now\n   *\n   * @description\n   * Current milliseconds mock time.\n   */\n  self.defer.now = 0;\n\n\n  self.defer.cancel = function(deferId) {\n    var fnIndex;\n\n    angular.forEach(self.deferredFns, function(fn, index) {\n      if (fn.id === deferId) fnIndex = index;\n    });\n\n    if (angular.isDefined(fnIndex)) {\n      self.deferredFns.splice(fnIndex, 1);\n      return true;\n    }\n\n    return false;\n  };\n\n\n  /**\n   * @name $browser#defer.flush\n   *\n   * @description\n   * Flushes all pending requests and executes the defer callbacks.\n   *\n   * @param {number=} number of milliseconds to flush. See {@link #defer.now}\n   */\n  self.defer.flush = function(delay) {\n    if (angular.isDefined(delay)) {\n      self.defer.now += delay;\n    } else {\n      if (self.deferredFns.length) {\n        self.defer.now = self.deferredFns[self.deferredFns.length - 1].time;\n      } else {\n        throw new Error('No deferred tasks to be flushed');\n      }\n    }\n\n    while (self.deferredFns.length && self.deferredFns[0].time <= self.defer.now) {\n      self.deferredFns.shift().fn();\n    }\n  };\n\n  self.$$baseHref = '/';\n  self.baseHref = function() {\n    return this.$$baseHref;\n  };\n};\nangular.mock.$Browser.prototype = {\n\n  /**\n   * @name $browser#poll\n   *\n   * @description\n   * run all fns in pollFns\n   */\n  poll: function poll() {\n    angular.forEach(this.pollFns, function(pollFn) {\n      pollFn();\n    });\n  },\n\n  url: function(url, replace, state) {\n    if (angular.isUndefined(state)) {\n      state = null;\n    }\n    if (url) {\n      this.$$url = url;\n      // Native pushState serializes & copies the object; simulate it.\n      this.$$state = angular.copy(state);\n      return this;\n    }\n\n    return this.$$url;\n  },\n\n  state: function() {\n    return this.$$state;\n  },\n\n  notifyWhenNoOutstandingRequests: function(fn) {\n    fn();\n  }\n};\n\n\n/**\n * @ngdoc provider\n * @name $exceptionHandlerProvider\n *\n * @description\n * Configures the mock implementation of {@link ng.$exceptionHandler} to rethrow or to log errors\n * passed to the `$exceptionHandler`.\n */\n\n/**\n * @ngdoc service\n * @name $exceptionHandler\n *\n * @description\n * Mock implementation of {@link ng.$exceptionHandler} that rethrows or logs errors passed\n * to it. See {@link ngMock.$exceptionHandlerProvider $exceptionHandlerProvider} for configuration\n * information.\n *\n *\n * ```js\n *   describe('$exceptionHandlerProvider', function() {\n *\n *     it('should capture log messages and exceptions', function() {\n *\n *       module(function($exceptionHandlerProvider) {\n *         $exceptionHandlerProvider.mode('log');\n *       });\n *\n *       inject(function($log, $exceptionHandler, $timeout) {\n *         $timeout(function() { $log.log(1); });\n *         $timeout(function() { $log.log(2); throw 'banana peel'; });\n *         $timeout(function() { $log.log(3); });\n *         expect($exceptionHandler.errors).toEqual([]);\n *         expect($log.assertEmpty());\n *         $timeout.flush();\n *         expect($exceptionHandler.errors).toEqual(['banana peel']);\n *         expect($log.log.logs).toEqual([[1], [2], [3]]);\n *       });\n *     });\n *   });\n * ```\n */\n\nangular.mock.$ExceptionHandlerProvider = function() {\n  var handler;\n\n  /**\n   * @ngdoc method\n   * @name $exceptionHandlerProvider#mode\n   *\n   * @description\n   * Sets the logging mode.\n   *\n   * @param {string} mode Mode of operation, defaults to `rethrow`.\n   *\n   *   - `log`: Sometimes it is desirable to test that an error is thrown, for this case the `log`\n   *     mode stores an array of errors in `$exceptionHandler.errors`, to allow later assertion of\n   *     them. See {@link ngMock.$log#assertEmpty assertEmpty()} and\n   *     {@link ngMock.$log#reset reset()}.\n   *   - `rethrow`: If any errors are passed to the handler in tests, it typically means that there\n   *     is a bug in the application or test, so this mock will make these tests fail. For any\n   *     implementations that expect exceptions to be thrown, the `rethrow` mode will also maintain\n   *     a log of thrown errors in `$exceptionHandler.errors`.\n   */\n  this.mode = function(mode) {\n\n    switch (mode) {\n      case 'log':\n      case 'rethrow':\n        var errors = [];\n        handler = function(e) {\n          if (arguments.length == 1) {\n            errors.push(e);\n          } else {\n            errors.push([].slice.call(arguments, 0));\n          }\n          if (mode === \"rethrow\") {\n            throw e;\n          }\n        };\n        handler.errors = errors;\n        break;\n      default:\n        throw new Error(\"Unknown mode '\" + mode + \"', only 'log'/'rethrow' modes are allowed!\");\n    }\n  };\n\n  this.$get = function() {\n    return handler;\n  };\n\n  this.mode('rethrow');\n};\n\n\n/**\n * @ngdoc service\n * @name $log\n *\n * @description\n * Mock implementation of {@link ng.$log} that gathers all logged messages in arrays\n * (one array per logging level). These arrays are exposed as `logs` property of each of the\n * level-specific log function, e.g. for level `error` the array is exposed as `$log.error.logs`.\n *\n */\nangular.mock.$LogProvider = function() {\n  var debug = true;\n\n  function concat(array1, array2, index) {\n    return array1.concat(Array.prototype.slice.call(array2, index));\n  }\n\n  this.debugEnabled = function(flag) {\n    if (angular.isDefined(flag)) {\n      debug = flag;\n      return this;\n    } else {\n      return debug;\n    }\n  };\n\n  this.$get = function() {\n    var $log = {\n      log: function() { $log.log.logs.push(concat([], arguments, 0)); },\n      warn: function() { $log.warn.logs.push(concat([], arguments, 0)); },\n      info: function() { $log.info.logs.push(concat([], arguments, 0)); },\n      error: function() { $log.error.logs.push(concat([], arguments, 0)); },\n      debug: function() {\n        if (debug) {\n          $log.debug.logs.push(concat([], arguments, 0));\n        }\n      }\n    };\n\n    /**\n     * @ngdoc method\n     * @name $log#reset\n     *\n     * @description\n     * Reset all of the logging arrays to empty.\n     */\n    $log.reset = function() {\n      /**\n       * @ngdoc property\n       * @name $log#log.logs\n       *\n       * @description\n       * Array of messages logged using {@link ng.$log#log `log()`}.\n       *\n       * @example\n       * ```js\n       * $log.log('Some Log');\n       * var first = $log.log.logs.unshift();\n       * ```\n       */\n      $log.log.logs = [];\n      /**\n       * @ngdoc property\n       * @name $log#info.logs\n       *\n       * @description\n       * Array of messages logged using {@link ng.$log#info `info()`}.\n       *\n       * @example\n       * ```js\n       * $log.info('Some Info');\n       * var first = $log.info.logs.unshift();\n       * ```\n       */\n      $log.info.logs = [];\n      /**\n       * @ngdoc property\n       * @name $log#warn.logs\n       *\n       * @description\n       * Array of messages logged using {@link ng.$log#warn `warn()`}.\n       *\n       * @example\n       * ```js\n       * $log.warn('Some Warning');\n       * var first = $log.warn.logs.unshift();\n       * ```\n       */\n      $log.warn.logs = [];\n      /**\n       * @ngdoc property\n       * @name $log#error.logs\n       *\n       * @description\n       * Array of messages logged using {@link ng.$log#error `error()`}.\n       *\n       * @example\n       * ```js\n       * $log.error('Some Error');\n       * var first = $log.error.logs.unshift();\n       * ```\n       */\n      $log.error.logs = [];\n        /**\n       * @ngdoc property\n       * @name $log#debug.logs\n       *\n       * @description\n       * Array of messages logged using {@link ng.$log#debug `debug()`}.\n       *\n       * @example\n       * ```js\n       * $log.debug('Some Error');\n       * var first = $log.debug.logs.unshift();\n       * ```\n       */\n      $log.debug.logs = [];\n    };\n\n    /**\n     * @ngdoc method\n     * @name $log#assertEmpty\n     *\n     * @description\n     * Assert that all of the logging methods have no logged messages. If any messages are present,\n     * an exception is thrown.\n     */\n    $log.assertEmpty = function() {\n      var errors = [];\n      angular.forEach(['error', 'warn', 'info', 'log', 'debug'], function(logLevel) {\n        angular.forEach($log[logLevel].logs, function(log) {\n          angular.forEach(log, function(logItem) {\n            errors.push('MOCK $log (' + logLevel + '): ' + String(logItem) + '\\n' +\n                        (logItem.stack || ''));\n          });\n        });\n      });\n      if (errors.length) {\n        errors.unshift(\"Expected $log to be empty! Either a message was logged unexpectedly, or \" +\n          \"an expected log message was not checked and removed:\");\n        errors.push('');\n        throw new Error(errors.join('\\n---------\\n'));\n      }\n    };\n\n    $log.reset();\n    return $log;\n  };\n};\n\n\n/**\n * @ngdoc service\n * @name $interval\n *\n * @description\n * Mock implementation of the $interval service.\n *\n * Use {@link ngMock.$interval#flush `$interval.flush(millis)`} to\n * move forward by `millis` milliseconds and trigger any functions scheduled to run in that\n * time.\n *\n * @param {function()} fn A function that should be called repeatedly.\n * @param {number} delay Number of milliseconds between each function call.\n * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat\n *   indefinitely.\n * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise\n *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.\n * @param {...*=} Pass additional parameters to the executed function.\n * @returns {promise} A promise which will be notified on each iteration.\n */\nangular.mock.$IntervalProvider = function() {\n  this.$get = ['$browser', '$rootScope', '$q', '$$q',\n       function($browser,   $rootScope,   $q,   $$q) {\n    var repeatFns = [],\n        nextRepeatId = 0,\n        now = 0;\n\n    var $interval = function(fn, delay, count, invokeApply) {\n      var hasParams = arguments.length > 4,\n          args = hasParams ? Array.prototype.slice.call(arguments, 4) : [],\n          iteration = 0,\n          skipApply = (angular.isDefined(invokeApply) && !invokeApply),\n          deferred = (skipApply ? $$q : $q).defer(),\n          promise = deferred.promise;\n\n      count = (angular.isDefined(count)) ? count : 0;\n      promise.then(null, null, (!hasParams) ? fn : function() {\n        fn.apply(null, args);\n      });\n\n      promise.$$intervalId = nextRepeatId;\n\n      function tick() {\n        deferred.notify(iteration++);\n\n        if (count > 0 && iteration >= count) {\n          var fnIndex;\n          deferred.resolve(iteration);\n\n          angular.forEach(repeatFns, function(fn, index) {\n            if (fn.id === promise.$$intervalId) fnIndex = index;\n          });\n\n          if (angular.isDefined(fnIndex)) {\n            repeatFns.splice(fnIndex, 1);\n          }\n        }\n\n        if (skipApply) {\n          $browser.defer.flush();\n        } else {\n          $rootScope.$apply();\n        }\n      }\n\n      repeatFns.push({\n        nextTime:(now + delay),\n        delay: delay,\n        fn: tick,\n        id: nextRepeatId,\n        deferred: deferred\n      });\n      repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});\n\n      nextRepeatId++;\n      return promise;\n    };\n    /**\n     * @ngdoc method\n     * @name $interval#cancel\n     *\n     * @description\n     * Cancels a task associated with the `promise`.\n     *\n     * @param {promise} promise A promise from calling the `$interval` function.\n     * @returns {boolean} Returns `true` if the task was successfully cancelled.\n     */\n    $interval.cancel = function(promise) {\n      if (!promise) return false;\n      var fnIndex;\n\n      angular.forEach(repeatFns, function(fn, index) {\n        if (fn.id === promise.$$intervalId) fnIndex = index;\n      });\n\n      if (angular.isDefined(fnIndex)) {\n        repeatFns[fnIndex].deferred.reject('canceled');\n        repeatFns.splice(fnIndex, 1);\n        return true;\n      }\n\n      return false;\n    };\n\n    /**\n     * @ngdoc method\n     * @name $interval#flush\n     * @description\n     *\n     * Runs interval tasks scheduled to be run in the next `millis` milliseconds.\n     *\n     * @param {number=} millis maximum timeout amount to flush up until.\n     *\n     * @return {number} The amount of time moved forward.\n     */\n    $interval.flush = function(millis) {\n      now += millis;\n      while (repeatFns.length && repeatFns[0].nextTime <= now) {\n        var task = repeatFns[0];\n        task.fn();\n        task.nextTime += task.delay;\n        repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});\n      }\n      return millis;\n    };\n\n    return $interval;\n  }];\n};\n\n\n/* jshint -W101 */\n/* The R_ISO8061_STR regex is never going to fit into the 100 char limit!\n * This directive should go inside the anonymous function but a bug in JSHint means that it would\n * not be enacted early enough to prevent the warning.\n */\nvar R_ISO8061_STR = /^(-?\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?:\\:?(\\d\\d)(?:\\:?(\\d\\d)(?:\\.(\\d{3}))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d)))?$/;\n\nfunction jsonStringToDate(string) {\n  var match;\n  if (match = string.match(R_ISO8061_STR)) {\n    var date = new Date(0),\n        tzHour = 0,\n        tzMin  = 0;\n    if (match[9]) {\n      tzHour = toInt(match[9] + match[10]);\n      tzMin = toInt(match[9] + match[11]);\n    }\n    date.setUTCFullYear(toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\n    date.setUTCHours(toInt(match[4] || 0) - tzHour,\n                     toInt(match[5] || 0) - tzMin,\n                     toInt(match[6] || 0),\n                     toInt(match[7] || 0));\n    return date;\n  }\n  return string;\n}\n\nfunction toInt(str) {\n  return parseInt(str, 10);\n}\n\nfunction padNumberInMock(num, digits, trim) {\n  var neg = '';\n  if (num < 0) {\n    neg =  '-';\n    num = -num;\n  }\n  num = '' + num;\n  while (num.length < digits) num = '0' + num;\n  if (trim) {\n    num = num.substr(num.length - digits);\n  }\n  return neg + num;\n}\n\n\n/**\n * @ngdoc type\n * @name angular.mock.TzDate\n * @description\n *\n * *NOTE*: this is not an injectable instance, just a globally available mock class of `Date`.\n *\n * Mock of the Date type which has its timezone specified via constructor arg.\n *\n * The main purpose is to create Date-like instances with timezone fixed to the specified timezone\n * offset, so that we can test code that depends on local timezone settings without dependency on\n * the time zone settings of the machine where the code is running.\n *\n * @param {number} offset Offset of the *desired* timezone in hours (fractions will be honored)\n * @param {(number|string)} timestamp Timestamp representing the desired time in *UTC*\n *\n * @example\n * !!!! WARNING !!!!!\n * This is not a complete Date object so only methods that were implemented can be called safely.\n * To make matters worse, TzDate instances inherit stuff from Date via a prototype.\n *\n * We do our best to intercept calls to \"unimplemented\" methods, but since the list of methods is\n * incomplete we might be missing some non-standard methods. This can result in errors like:\n * \"Date.prototype.foo called on incompatible Object\".\n *\n * ```js\n * var newYearInBratislava = new TzDate(-1, '2009-12-31T23:00:00Z');\n * newYearInBratislava.getTimezoneOffset() => -60;\n * newYearInBratislava.getFullYear() => 2010;\n * newYearInBratislava.getMonth() => 0;\n * newYearInBratislava.getDate() => 1;\n * newYearInBratislava.getHours() => 0;\n * newYearInBratislava.getMinutes() => 0;\n * newYearInBratislava.getSeconds() => 0;\n * ```\n *\n */\nangular.mock.TzDate = function(offset, timestamp) {\n  var self = new Date(0);\n  if (angular.isString(timestamp)) {\n    var tsStr = timestamp;\n\n    self.origDate = jsonStringToDate(timestamp);\n\n    timestamp = self.origDate.getTime();\n    if (isNaN(timestamp)) {\n      throw {\n        name: \"Illegal Argument\",\n        message: \"Arg '\" + tsStr + \"' passed into TzDate constructor is not a valid date string\"\n      };\n    }\n  } else {\n    self.origDate = new Date(timestamp);\n  }\n\n  var localOffset = new Date(timestamp).getTimezoneOffset();\n  self.offsetDiff = localOffset * 60 * 1000 - offset * 1000 * 60 * 60;\n  self.date = new Date(timestamp + self.offsetDiff);\n\n  self.getTime = function() {\n    return self.date.getTime() - self.offsetDiff;\n  };\n\n  self.toLocaleDateString = function() {\n    return self.date.toLocaleDateString();\n  };\n\n  self.getFullYear = function() {\n    return self.date.getFullYear();\n  };\n\n  self.getMonth = function() {\n    return self.date.getMonth();\n  };\n\n  self.getDate = function() {\n    return self.date.getDate();\n  };\n\n  self.getHours = function() {\n    return self.date.getHours();\n  };\n\n  self.getMinutes = function() {\n    return self.date.getMinutes();\n  };\n\n  self.getSeconds = function() {\n    return self.date.getSeconds();\n  };\n\n  self.getMilliseconds = function() {\n    return self.date.getMilliseconds();\n  };\n\n  self.getTimezoneOffset = function() {\n    return offset * 60;\n  };\n\n  self.getUTCFullYear = function() {\n    return self.origDate.getUTCFullYear();\n  };\n\n  self.getUTCMonth = function() {\n    return self.origDate.getUTCMonth();\n  };\n\n  self.getUTCDate = function() {\n    return self.origDate.getUTCDate();\n  };\n\n  self.getUTCHours = function() {\n    return self.origDate.getUTCHours();\n  };\n\n  self.getUTCMinutes = function() {\n    return self.origDate.getUTCMinutes();\n  };\n\n  self.getUTCSeconds = function() {\n    return self.origDate.getUTCSeconds();\n  };\n\n  self.getUTCMilliseconds = function() {\n    return self.origDate.getUTCMilliseconds();\n  };\n\n  self.getDay = function() {\n    return self.date.getDay();\n  };\n\n  // provide this method only on browsers that already have it\n  if (self.toISOString) {\n    self.toISOString = function() {\n      return padNumberInMock(self.origDate.getUTCFullYear(), 4) + '-' +\n            padNumberInMock(self.origDate.getUTCMonth() + 1, 2) + '-' +\n            padNumberInMock(self.origDate.getUTCDate(), 2) + 'T' +\n            padNumberInMock(self.origDate.getUTCHours(), 2) + ':' +\n            padNumberInMock(self.origDate.getUTCMinutes(), 2) + ':' +\n            padNumberInMock(self.origDate.getUTCSeconds(), 2) + '.' +\n            padNumberInMock(self.origDate.getUTCMilliseconds(), 3) + 'Z';\n    };\n  }\n\n  //hide all methods not implemented in this mock that the Date prototype exposes\n  var unimplementedMethods = ['getUTCDay',\n      'getYear', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds',\n      'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear',\n      'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds',\n      'setYear', 'toDateString', 'toGMTString', 'toJSON', 'toLocaleFormat', 'toLocaleString',\n      'toLocaleTimeString', 'toSource', 'toString', 'toTimeString', 'toUTCString', 'valueOf'];\n\n  angular.forEach(unimplementedMethods, function(methodName) {\n    self[methodName] = function() {\n      throw new Error(\"Method '\" + methodName + \"' is not implemented in the TzDate mock\");\n    };\n  });\n\n  return self;\n};\n\n//make \"tzDateInstance instanceof Date\" return true\nangular.mock.TzDate.prototype = Date.prototype;\n/* jshint +W101 */\n\n\n/**\n * @ngdoc service\n * @name $animate\n *\n * @description\n * Mock implementation of the {@link ng.$animate `$animate`} service. Exposes two additional methods\n * for testing animations.\n *\n * You need to require the `ngAnimateMock` module in your test suite for instance `beforeEach(module('ngAnimateMock'))`\n */\nangular.mock.animate = angular.module('ngAnimateMock', ['ng'])\n\n  .config(['$provide', function($provide) {\n\n    $provide.factory('$$forceReflow', function() {\n      function reflowFn() {\n        reflowFn.totalReflows++;\n      }\n      reflowFn.totalReflows = 0;\n      return reflowFn;\n    });\n\n    $provide.factory('$$animateAsyncRun', function() {\n      var queue = [];\n      var queueFn = function() {\n        return function(fn) {\n          queue.push(fn);\n        };\n      };\n      queueFn.flush = function() {\n        if (queue.length === 0) return false;\n\n        for (var i = 0; i < queue.length; i++) {\n          queue[i]();\n        }\n        queue = [];\n\n        return true;\n      };\n      return queueFn;\n    });\n\n    $provide.decorator('$$animateJs', ['$delegate', function($delegate) {\n      var runners = [];\n\n      var animateJsConstructor = function() {\n        var animator = $delegate.apply($delegate, arguments);\n        // If no javascript animation is found, animator is undefined\n        if (animator) {\n          runners.push(animator);\n        }\n        return animator;\n      };\n\n      animateJsConstructor.$closeAndFlush = function() {\n        runners.forEach(function(runner) {\n          runner.end();\n        });\n        runners = [];\n      };\n\n      return animateJsConstructor;\n    }]);\n\n    $provide.decorator('$animateCss', ['$delegate', function($delegate) {\n      var runners = [];\n\n      var animateCssConstructor = function(element, options) {\n        var animator = $delegate(element, options);\n        runners.push(animator);\n        return animator;\n      };\n\n      animateCssConstructor.$closeAndFlush = function() {\n        runners.forEach(function(runner) {\n          runner.end();\n        });\n        runners = [];\n      };\n\n      return animateCssConstructor;\n    }]);\n\n    $provide.decorator('$animate', ['$delegate', '$timeout', '$browser', '$$rAF', '$animateCss', '$$animateJs',\n                                    '$$forceReflow', '$$animateAsyncRun', '$rootScope',\n                            function($delegate,   $timeout,   $browser,   $$rAF,   $animateCss,   $$animateJs,\n                                     $$forceReflow,   $$animateAsyncRun,  $rootScope) {\n      var animate = {\n        queue: [],\n        cancel: $delegate.cancel,\n        on: $delegate.on,\n        off: $delegate.off,\n        pin: $delegate.pin,\n        get reflows() {\n          return $$forceReflow.totalReflows;\n        },\n        enabled: $delegate.enabled,\n        /**\n         * @ngdoc method\n         * @name $animate#closeAndFlush\n         * @description\n         *\n         * This method will close all pending animations (both {@link ngAnimate#javascript-based-animations Javascript}\n         * and {@link ngAnimate.$animateCss CSS}) and it will also flush any remaining animation frames and/or callbacks.\n         */\n        closeAndFlush: function() {\n          // we allow the flush command to swallow the errors\n          // because depending on whether CSS or JS animations are\n          // used, there may not be a RAF flush. The primary flush\n          // at the end of this function must throw an exception\n          // because it will track if there were pending animations\n          this.flush(true);\n          $animateCss.$closeAndFlush();\n          $$animateJs.$closeAndFlush();\n          this.flush();\n        },\n        /**\n         * @ngdoc method\n         * @name $animate#flush\n         * @description\n         *\n         * This method is used to flush the pending callbacks and animation frames to either start\n         * an animation or conclude an animation. Note that this will not actually close an\n         * actively running animation (see {@link ngMock.$animate#closeAndFlush `closeAndFlush()`} for that).\n         */\n        flush: function(hideErrors) {\n          $rootScope.$digest();\n\n          var doNextRun, somethingFlushed = false;\n          do {\n            doNextRun = false;\n\n            if ($$rAF.queue.length) {\n              $$rAF.flush();\n              doNextRun = somethingFlushed = true;\n            }\n\n            if ($$animateAsyncRun.flush()) {\n              doNextRun = somethingFlushed = true;\n            }\n          } while (doNextRun);\n\n          if (!somethingFlushed && !hideErrors) {\n            throw new Error('No pending animations ready to be closed or flushed');\n          }\n\n          $rootScope.$digest();\n        }\n      };\n\n      angular.forEach(\n        ['animate','enter','leave','move','addClass','removeClass','setClass'], function(method) {\n        animate[method] = function() {\n          animate.queue.push({\n            event: method,\n            element: arguments[0],\n            options: arguments[arguments.length - 1],\n            args: arguments\n          });\n          return $delegate[method].apply($delegate, arguments);\n        };\n      });\n\n      return animate;\n    }]);\n\n  }]);\n\n\n/**\n * @ngdoc function\n * @name angular.mock.dump\n * @description\n *\n * *NOTE*: this is not an injectable instance, just a globally available function.\n *\n * Method for serializing common angular objects (scope, elements, etc..) into strings, useful for\n * debugging.\n *\n * This method is also available on window, where it can be used to display objects on debug\n * console.\n *\n * @param {*} object - any object to turn into string.\n * @return {string} a serialized string of the argument\n */\nangular.mock.dump = function(object) {\n  return serialize(object);\n\n  function serialize(object) {\n    var out;\n\n    if (angular.isElement(object)) {\n      object = angular.element(object);\n      out = angular.element('<div></div>');\n      angular.forEach(object, function(element) {\n        out.append(angular.element(element).clone());\n      });\n      out = out.html();\n    } else if (angular.isArray(object)) {\n      out = [];\n      angular.forEach(object, function(o) {\n        out.push(serialize(o));\n      });\n      out = '[ ' + out.join(', ') + ' ]';\n    } else if (angular.isObject(object)) {\n      if (angular.isFunction(object.$eval) && angular.isFunction(object.$apply)) {\n        out = serializeScope(object);\n      } else if (object instanceof Error) {\n        out = object.stack || ('' + object.name + ': ' + object.message);\n      } else {\n        // TODO(i): this prevents methods being logged,\n        // we should have a better way to serialize objects\n        out = angular.toJson(object, true);\n      }\n    } else {\n      out = String(object);\n    }\n\n    return out;\n  }\n\n  function serializeScope(scope, offset) {\n    offset = offset ||  '  ';\n    var log = [offset + 'Scope(' + scope.$id + '): {'];\n    for (var key in scope) {\n      if (Object.prototype.hasOwnProperty.call(scope, key) && !key.match(/^(\\$|this)/)) {\n        log.push('  ' + key + ': ' + angular.toJson(scope[key]));\n      }\n    }\n    var child = scope.$$childHead;\n    while (child) {\n      log.push(serializeScope(child, offset + '  '));\n      child = child.$$nextSibling;\n    }\n    log.push('}');\n    return log.join('\\n' + offset);\n  }\n};\n\n/**\n * @ngdoc service\n * @name $httpBackend\n * @description\n * Fake HTTP backend implementation suitable for unit testing applications that use the\n * {@link ng.$http $http service}.\n *\n * <div class=\"alert alert-info\">\n * **Note**: For fake HTTP backend implementation suitable for end-to-end testing or backend-less\n * development please see {@link ngMockE2E.$httpBackend e2e $httpBackend mock}.\n * </div>\n *\n * During unit testing, we want our unit tests to run quickly and have no external dependencies so\n * we don’t want to send [XHR](https://developer.mozilla.org/en/xmlhttprequest) or\n * [JSONP](http://en.wikipedia.org/wiki/JSONP) requests to a real server. All we really need is\n * to verify whether a certain request has been sent or not, or alternatively just let the\n * application make requests, respond with pre-trained responses and assert that the end result is\n * what we expect it to be.\n *\n * This mock implementation can be used to respond with static or dynamic responses via the\n * `expect` and `when` apis and their shortcuts (`expectGET`, `whenPOST`, etc).\n *\n * When an Angular application needs some data from a server, it calls the $http service, which\n * sends the request to a real server using $httpBackend service. With dependency injection, it is\n * easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify\n * the requests and respond with some testing data without sending a request to a real server.\n *\n * There are two ways to specify what test data should be returned as http responses by the mock\n * backend when the code under test makes http requests:\n *\n * - `$httpBackend.expect` - specifies a request expectation\n * - `$httpBackend.when` - specifies a backend definition\n *\n *\n * ## Request Expectations vs Backend Definitions\n *\n * Request expectations provide a way to make assertions about requests made by the application and\n * to define responses for those requests. The test will fail if the expected requests are not made\n * or they are made in the wrong order.\n *\n * Backend definitions allow you to define a fake backend for your application which doesn't assert\n * if a particular request was made or not, it just returns a trained response if a request is made.\n * The test will pass whether or not the request gets made during testing.\n *\n *\n * <table class=\"table\">\n *   <tr><th width=\"220px\"></th><th>Request expectations</th><th>Backend definitions</th></tr>\n *   <tr>\n *     <th>Syntax</th>\n *     <td>.expect(...).respond(...)</td>\n *     <td>.when(...).respond(...)</td>\n *   </tr>\n *   <tr>\n *     <th>Typical usage</th>\n *     <td>strict unit tests</td>\n *     <td>loose (black-box) unit testing</td>\n *   </tr>\n *   <tr>\n *     <th>Fulfills multiple requests</th>\n *     <td>NO</td>\n *     <td>YES</td>\n *   </tr>\n *   <tr>\n *     <th>Order of requests matters</th>\n *     <td>YES</td>\n *     <td>NO</td>\n *   </tr>\n *   <tr>\n *     <th>Request required</th>\n *     <td>YES</td>\n *     <td>NO</td>\n *   </tr>\n *   <tr>\n *     <th>Response required</th>\n *     <td>optional (see below)</td>\n *     <td>YES</td>\n *   </tr>\n * </table>\n *\n * In cases where both backend definitions and request expectations are specified during unit\n * testing, the request expectations are evaluated first.\n *\n * If a request expectation has no response specified, the algorithm will search your backend\n * definitions for an appropriate response.\n *\n * If a request didn't match any expectation or if the expectation doesn't have the response\n * defined, the backend definitions are evaluated in sequential order to see if any of them match\n * the request. The response from the first matched definition is returned.\n *\n *\n * ## Flushing HTTP requests\n *\n * The $httpBackend used in production always responds to requests asynchronously. If we preserved\n * this behavior in unit testing, we'd have to create async unit tests, which are hard to write,\n * to follow and to maintain. But neither can the testing mock respond synchronously; that would\n * change the execution of the code under test. For this reason, the mock $httpBackend has a\n * `flush()` method, which allows the test to explicitly flush pending requests. This preserves\n * the async api of the backend, while allowing the test to execute synchronously.\n *\n *\n * ## Unit testing with mock $httpBackend\n * The following code shows how to setup and use the mock backend when unit testing a controller.\n * First we create the controller under test:\n *\n  ```js\n  // The module code\n  angular\n    .module('MyApp', [])\n    .controller('MyController', MyController);\n\n  // The controller code\n  function MyController($scope, $http) {\n    var authToken;\n\n    $http.get('/auth.py').then(function(response) {\n      authToken = response.headers('A-Token');\n      $scope.user = response.data;\n    });\n\n    $scope.saveMessage = function(message) {\n      var headers = { 'Authorization': authToken };\n      $scope.status = 'Saving...';\n\n      $http.post('/add-msg.py', message, { headers: headers } ).then(function(response) {\n        $scope.status = '';\n      }).catch(function() {\n        $scope.status = 'Failed...';\n      });\n    };\n  }\n  ```\n *\n * Now we setup the mock backend and create the test specs:\n *\n  ```js\n    // testing controller\n    describe('MyController', function() {\n       var $httpBackend, $rootScope, createController, authRequestHandler;\n\n       // Set up the module\n       beforeEach(module('MyApp'));\n\n       beforeEach(inject(function($injector) {\n         // Set up the mock http service responses\n         $httpBackend = $injector.get('$httpBackend');\n         // backend definition common for all tests\n         authRequestHandler = $httpBackend.when('GET', '/auth.py')\n                                .respond({userId: 'userX'}, {'A-Token': 'xxx'});\n\n         // Get hold of a scope (i.e. the root scope)\n         $rootScope = $injector.get('$rootScope');\n         // The $controller service is used to create instances of controllers\n         var $controller = $injector.get('$controller');\n\n         createController = function() {\n           return $controller('MyController', {'$scope' : $rootScope });\n         };\n       }));\n\n\n       afterEach(function() {\n         $httpBackend.verifyNoOutstandingExpectation();\n         $httpBackend.verifyNoOutstandingRequest();\n       });\n\n\n       it('should fetch authentication token', function() {\n         $httpBackend.expectGET('/auth.py');\n         var controller = createController();\n         $httpBackend.flush();\n       });\n\n\n       it('should fail authentication', function() {\n\n         // Notice how you can change the response even after it was set\n         authRequestHandler.respond(401, '');\n\n         $httpBackend.expectGET('/auth.py');\n         var controller = createController();\n         $httpBackend.flush();\n         expect($rootScope.status).toBe('Failed...');\n       });\n\n\n       it('should send msg to server', function() {\n         var controller = createController();\n         $httpBackend.flush();\n\n         // now you don’t care about the authentication, but\n         // the controller will still send the request and\n         // $httpBackend will respond without you having to\n         // specify the expectation and response for this request\n\n         $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');\n         $rootScope.saveMessage('message content');\n         expect($rootScope.status).toBe('Saving...');\n         $httpBackend.flush();\n         expect($rootScope.status).toBe('');\n       });\n\n\n       it('should send auth header', function() {\n         var controller = createController();\n         $httpBackend.flush();\n\n         $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {\n           // check if the header was sent, if it wasn't the expectation won't\n           // match the request and the test will fail\n           return headers['Authorization'] == 'xxx';\n         }).respond(201, '');\n\n         $rootScope.saveMessage('whatever');\n         $httpBackend.flush();\n       });\n    });\n  ```\n *\n * ## Dynamic responses\n *\n * You define a response to a request by chaining a call to `respond()` onto a definition or expectation.\n * If you provide a **callback** as the first parameter to `respond(callback)` then you can dynamically generate\n * a response based on the properties of the request.\n *\n * The `callback` function should be of the form `function(method, url, data, headers, params)`.\n *\n * ### Query parameters\n *\n * By default, query parameters on request URLs are parsed into the `params` object. So a request URL\n * of `/list?q=searchstr&orderby=-name` would set `params` to be `{q: 'searchstr', orderby: '-name'}`.\n *\n * ### Regex parameter matching\n *\n * If an expectation or definition uses a **regex** to match the URL, you can provide an array of **keys** via a\n * `params` argument. The index of each **key** in the array will match the index of a **group** in the\n * **regex**.\n *\n * The `params` object in the **callback** will now have properties with these keys, which hold the value of the\n * corresponding **group** in the **regex**.\n *\n * This also applies to the `when` and `expect` shortcut methods.\n *\n *\n * ```js\n *   $httpBackend.expect('GET', /\\/user\\/(.+)/, undefined, undefined, ['id'])\n *     .respond(function(method, url, data, headers, params) {\n *       // for requested url of '/user/1234' params is {id: '1234'}\n *     });\n *\n *   $httpBackend.whenPATCH(/\\/user\\/(.+)\\/article\\/(.+)/, undefined, undefined, ['user', 'article'])\n *     .respond(function(method, url, data, headers, params) {\n *       // for url of '/user/1234/article/567' params is {user: '1234', article: '567'}\n *     });\n * ```\n *\n * ## Matching route requests\n *\n * For extra convenience, `whenRoute` and `expectRoute` shortcuts are available. These methods offer colon\n * delimited matching of the url path, ignoring the query string. This allows declarations\n * similar to how application routes are configured with `$routeProvider`. Because these methods convert\n * the definition url to regex, declaration order is important. Combined with query parameter parsing,\n * the following is possible:\n *\n  ```js\n    $httpBackend.whenRoute('GET', '/users/:id')\n      .respond(function(method, url, data, headers, params) {\n        return [200, MockUserList[Number(params.id)]];\n      });\n\n    $httpBackend.whenRoute('GET', '/users')\n      .respond(function(method, url, data, headers, params) {\n        var userList = angular.copy(MockUserList),\n          defaultSort = 'lastName',\n          count, pages, isPrevious, isNext;\n\n        // paged api response '/v1/users?page=2'\n        params.page = Number(params.page) || 1;\n\n        // query for last names '/v1/users?q=Archer'\n        if (params.q) {\n          userList = $filter('filter')({lastName: params.q});\n        }\n\n        pages = Math.ceil(userList.length / pagingLength);\n        isPrevious = params.page > 1;\n        isNext = params.page < pages;\n\n        return [200, {\n          count:    userList.length,\n          previous: isPrevious,\n          next:     isNext,\n          // sort field -> '/v1/users?sortBy=firstName'\n          results:  $filter('orderBy')(userList, params.sortBy || defaultSort)\n                      .splice((params.page - 1) * pagingLength, pagingLength)\n        }];\n      });\n  ```\n */\nangular.mock.$HttpBackendProvider = function() {\n  this.$get = ['$rootScope', '$timeout', createHttpBackendMock];\n};\n\n/**\n * General factory function for $httpBackend mock.\n * Returns instance for unit testing (when no arguments specified):\n *   - passing through is disabled\n *   - auto flushing is disabled\n *\n * Returns instance for e2e testing (when `$delegate` and `$browser` specified):\n *   - passing through (delegating request to real backend) is enabled\n *   - auto flushing is enabled\n *\n * @param {Object=} $delegate Real $httpBackend instance (allow passing through if specified)\n * @param {Object=} $browser Auto-flushing enabled if specified\n * @return {Object} Instance of $httpBackend mock\n */\nfunction createHttpBackendMock($rootScope, $timeout, $delegate, $browser) {\n  var definitions = [],\n      expectations = [],\n      responses = [],\n      responsesPush = angular.bind(responses, responses.push),\n      copy = angular.copy;\n\n  function createResponse(status, data, headers, statusText) {\n    if (angular.isFunction(status)) return status;\n\n    return function() {\n      return angular.isNumber(status)\n          ? [status, data, headers, statusText]\n          : [200, status, data, headers];\n    };\n  }\n\n  // TODO(vojta): change params to: method, url, data, headers, callback\n  function $httpBackend(method, url, data, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {\n\n    var xhr = new MockXhr(),\n        expectation = expectations[0],\n        wasExpected = false;\n\n    xhr.$$events = eventHandlers;\n    xhr.upload.$$events = uploadEventHandlers;\n\n    function prettyPrint(data) {\n      return (angular.isString(data) || angular.isFunction(data) || data instanceof RegExp)\n          ? data\n          : angular.toJson(data);\n    }\n\n    function wrapResponse(wrapped) {\n      if (!$browser && timeout) {\n        timeout.then ? timeout.then(handleTimeout) : $timeout(handleTimeout, timeout);\n      }\n\n      return handleResponse;\n\n      function handleResponse() {\n        var response = wrapped.response(method, url, data, headers, wrapped.params(url));\n        xhr.$$respHeaders = response[2];\n        callback(copy(response[0]), copy(response[1]), xhr.getAllResponseHeaders(),\n                 copy(response[3] || ''));\n      }\n\n      function handleTimeout() {\n        for (var i = 0, ii = responses.length; i < ii; i++) {\n          if (responses[i] === handleResponse) {\n            responses.splice(i, 1);\n            callback(-1, undefined, '');\n            break;\n          }\n        }\n      }\n    }\n\n    if (expectation && expectation.match(method, url)) {\n      if (!expectation.matchData(data)) {\n        throw new Error('Expected ' + expectation + ' with different data\\n' +\n            'EXPECTED: ' + prettyPrint(expectation.data) + '\\nGOT:      ' + data);\n      }\n\n      if (!expectation.matchHeaders(headers)) {\n        throw new Error('Expected ' + expectation + ' with different headers\\n' +\n                        'EXPECTED: ' + prettyPrint(expectation.headers) + '\\nGOT:      ' +\n                        prettyPrint(headers));\n      }\n\n      expectations.shift();\n\n      if (expectation.response) {\n        responses.push(wrapResponse(expectation));\n        return;\n      }\n      wasExpected = true;\n    }\n\n    var i = -1, definition;\n    while ((definition = definitions[++i])) {\n      if (definition.match(method, url, data, headers || {})) {\n        if (definition.response) {\n          // if $browser specified, we do auto flush all requests\n          ($browser ? $browser.defer : responsesPush)(wrapResponse(definition));\n        } else if (definition.passThrough) {\n          $delegate(method, url, data, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers);\n        } else throw new Error('No response defined !');\n        return;\n      }\n    }\n    throw wasExpected ?\n        new Error('No response defined !') :\n        new Error('Unexpected request: ' + method + ' ' + url + '\\n' +\n                  (expectation ? 'Expected ' + expectation : 'No more request expected'));\n  }\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#when\n   * @description\n   * Creates a new backend definition.\n   *\n   * @param {string} method HTTP method.\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\n   *   data string and returns true if the data is as expected.\n   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\n   *   object and returns true if the headers match the current definition.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   *\n   *  - respond –\n   *      ```js\n   *      {function([status,] data[, headers, statusText])\n   *      | function(function(method, url, data, headers, params)}\n   *      ```\n   *    – The respond method takes a set of static data to be returned or a function that can\n   *    return an array containing response status (number), response data (Array|Object|string),\n   *    response headers (Object), and the text for the status (string). The respond method returns\n   *    the `requestHandler` object for possible overrides.\n   */\n  $httpBackend.when = function(method, url, data, headers, keys) {\n    var definition = new MockHttpExpectation(method, url, data, headers, keys),\n        chain = {\n          respond: function(status, data, headers, statusText) {\n            definition.passThrough = undefined;\n            definition.response = createResponse(status, data, headers, statusText);\n            return chain;\n          }\n        };\n\n    if ($browser) {\n      chain.passThrough = function() {\n        definition.response = undefined;\n        definition.passThrough = true;\n        return chain;\n      };\n    }\n\n    definitions.push(definition);\n    return chain;\n  };\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenGET\n   * @description\n   * Creates a new backend definition for GET requests. For more info see `when()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenHEAD\n   * @description\n   * Creates a new backend definition for HEAD requests. For more info see `when()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenDELETE\n   * @description\n   * Creates a new backend definition for DELETE requests. For more info see `when()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenPOST\n   * @description\n   * Creates a new backend definition for POST requests. For more info see `when()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\n   *   data string and returns true if the data is as expected.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenPUT\n   * @description\n   * Creates a new backend definition for PUT requests.  For more info see `when()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\n   *   data string and returns true if the data is as expected.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenJSONP\n   * @description\n   * Creates a new backend definition for JSONP requests. For more info see `when()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled.\n   */\n  createShortMethods('when');\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenRoute\n   * @description\n   * Creates a new backend definition that compares only with the requested route.\n   *\n   * @param {string} method HTTP method.\n   * @param {string} url HTTP url string that supports colon param matching.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled. See #when for more info.\n   */\n  $httpBackend.whenRoute = function(method, url) {\n    var pathObj = parseRoute(url);\n    return $httpBackend.when(method, pathObj.regexp, undefined, undefined, pathObj.keys);\n  };\n\n  function parseRoute(url) {\n    var ret = {\n      regexp: url\n    },\n    keys = ret.keys = [];\n\n    if (!url || !angular.isString(url)) return ret;\n\n    url = url\n      .replace(/([().])/g, '\\\\$1')\n      .replace(/(\\/)?:(\\w+)([\\?\\*])?/g, function(_, slash, key, option) {\n        var optional = option === '?' ? option : null;\n        var star = option === '*' ? option : null;\n        keys.push({ name: key, optional: !!optional });\n        slash = slash || '';\n        return ''\n          + (optional ? '' : slash)\n          + '(?:'\n          + (optional ? slash : '')\n          + (star && '(.+?)' || '([^/]+)')\n          + (optional || '')\n          + ')'\n          + (optional || '');\n      })\n      .replace(/([\\/$\\*])/g, '\\\\$1');\n\n    ret.regexp = new RegExp('^' + url, 'i');\n    return ret;\n  }\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expect\n   * @description\n   * Creates a new request expectation.\n   *\n   * @param {string} method HTTP method.\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\n   *  receives data string and returns true if the data is as expected, or Object if request body\n   *  is in JSON format.\n   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\n   *   object and returns true if the headers match the current expectation.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *  request is handled. You can save this object for later use and invoke `respond` again in\n   *  order to change how a matched request is handled.\n   *\n   *  - respond –\n   *    ```\n   *    { function([status,] data[, headers, statusText])\n   *    | function(function(method, url, data, headers, params)}\n   *    ```\n   *    – The respond method takes a set of static data to be returned or a function that can\n   *    return an array containing response status (number), response data (Array|Object|string),\n   *    response headers (Object), and the text for the status (string). The respond method returns\n   *    the `requestHandler` object for possible overrides.\n   */\n  $httpBackend.expect = function(method, url, data, headers, keys) {\n    var expectation = new MockHttpExpectation(method, url, data, headers, keys),\n        chain = {\n          respond: function(status, data, headers, statusText) {\n            expectation.response = createResponse(status, data, headers, statusText);\n            return chain;\n          }\n        };\n\n    expectations.push(expectation);\n    return chain;\n  };\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectGET\n   * @description\n   * Creates a new request expectation for GET requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {Object=} headers HTTP headers.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled. See #expect for more info.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectHEAD\n   * @description\n   * Creates a new request expectation for HEAD requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {Object=} headers HTTP headers.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectDELETE\n   * @description\n   * Creates a new request expectation for DELETE requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {Object=} headers HTTP headers.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectPOST\n   * @description\n   * Creates a new request expectation for POST requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\n   *  receives data string and returns true if the data is as expected, or Object if request body\n   *  is in JSON format.\n   * @param {Object=} headers HTTP headers.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectPUT\n   * @description\n   * Creates a new request expectation for PUT requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\n   *  receives data string and returns true if the data is as expected, or Object if request body\n   *  is in JSON format.\n   * @param {Object=} headers HTTP headers.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectPATCH\n   * @description\n   * Creates a new request expectation for PATCH requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\n   *  receives data string and returns true if the data is as expected, or Object if request body\n   *  is in JSON format.\n   * @param {Object=} headers HTTP headers.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectJSONP\n   * @description\n   * Creates a new request expectation for JSONP requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives an url\n   *   and returns true if the url matches the current definition.\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   */\n  createShortMethods('expect');\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectRoute\n   * @description\n   * Creates a new request expectation that compares only with the requested route.\n   *\n   * @param {string} method HTTP method.\n   * @param {string} url HTTP url string that supports colon param matching.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled. See #expect for more info.\n   */\n  $httpBackend.expectRoute = function(method, url) {\n    var pathObj = parseRoute(url);\n    return $httpBackend.expect(method, pathObj.regexp, undefined, undefined, pathObj.keys);\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#flush\n   * @description\n   * Flushes all pending requests using the trained responses.\n   *\n   * @param {number=} count Number of responses to flush (in the order they arrived). If undefined,\n   *   all pending requests will be flushed. If there are no pending requests when the flush method\n   *   is called an exception is thrown (as this typically a sign of programming error).\n   */\n  $httpBackend.flush = function(count, digest) {\n    if (digest !== false) $rootScope.$digest();\n    if (!responses.length) throw new Error('No pending request to flush !');\n\n    if (angular.isDefined(count) && count !== null) {\n      while (count--) {\n        if (!responses.length) throw new Error('No more pending request to flush !');\n        responses.shift()();\n      }\n    } else {\n      while (responses.length) {\n        responses.shift()();\n      }\n    }\n    $httpBackend.verifyNoOutstandingExpectation(digest);\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#verifyNoOutstandingExpectation\n   * @description\n   * Verifies that all of the requests defined via the `expect` api were made. If any of the\n   * requests were not made, verifyNoOutstandingExpectation throws an exception.\n   *\n   * Typically, you would call this method following each test case that asserts requests using an\n   * \"afterEach\" clause.\n   *\n   * ```js\n   *   afterEach($httpBackend.verifyNoOutstandingExpectation);\n   * ```\n   */\n  $httpBackend.verifyNoOutstandingExpectation = function(digest) {\n    if (digest !== false) $rootScope.$digest();\n    if (expectations.length) {\n      throw new Error('Unsatisfied requests: ' + expectations.join(', '));\n    }\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#verifyNoOutstandingRequest\n   * @description\n   * Verifies that there are no outstanding requests that need to be flushed.\n   *\n   * Typically, you would call this method following each test case that asserts requests using an\n   * \"afterEach\" clause.\n   *\n   * ```js\n   *   afterEach($httpBackend.verifyNoOutstandingRequest);\n   * ```\n   */\n  $httpBackend.verifyNoOutstandingRequest = function() {\n    if (responses.length) {\n      throw new Error('Unflushed requests: ' + responses.length);\n    }\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#resetExpectations\n   * @description\n   * Resets all request expectations, but preserves all backend definitions. Typically, you would\n   * call resetExpectations during a multiple-phase test when you want to reuse the same instance of\n   * $httpBackend mock.\n   */\n  $httpBackend.resetExpectations = function() {\n    expectations.length = 0;\n    responses.length = 0;\n  };\n\n  return $httpBackend;\n\n\n  function createShortMethods(prefix) {\n    angular.forEach(['GET', 'DELETE', 'JSONP', 'HEAD'], function(method) {\n     $httpBackend[prefix + method] = function(url, headers, keys) {\n       return $httpBackend[prefix](method, url, undefined, headers, keys);\n     };\n    });\n\n    angular.forEach(['PUT', 'POST', 'PATCH'], function(method) {\n      $httpBackend[prefix + method] = function(url, data, headers, keys) {\n        return $httpBackend[prefix](method, url, data, headers, keys);\n      };\n    });\n  }\n}\n\nfunction MockHttpExpectation(method, url, data, headers, keys) {\n\n  function getUrlParams(u) {\n    var params = u.slice(u.indexOf('?') + 1).split('&');\n    return params.sort();\n  }\n\n  function compareUrl(u) {\n    return (url.slice(0, url.indexOf('?')) == u.slice(0, u.indexOf('?')) && getUrlParams(url).join() == getUrlParams(u).join());\n  }\n\n  this.data = data;\n  this.headers = headers;\n\n  this.match = function(m, u, d, h) {\n    if (method != m) return false;\n    if (!this.matchUrl(u)) return false;\n    if (angular.isDefined(d) && !this.matchData(d)) return false;\n    if (angular.isDefined(h) && !this.matchHeaders(h)) return false;\n    return true;\n  };\n\n  this.matchUrl = function(u) {\n    if (!url) return true;\n    if (angular.isFunction(url.test)) return url.test(u);\n    if (angular.isFunction(url)) return url(u);\n    return (url == u || compareUrl(u));\n  };\n\n  this.matchHeaders = function(h) {\n    if (angular.isUndefined(headers)) return true;\n    if (angular.isFunction(headers)) return headers(h);\n    return angular.equals(headers, h);\n  };\n\n  this.matchData = function(d) {\n    if (angular.isUndefined(data)) return true;\n    if (data && angular.isFunction(data.test)) return data.test(d);\n    if (data && angular.isFunction(data)) return data(d);\n    if (data && !angular.isString(data)) {\n      return angular.equals(angular.fromJson(angular.toJson(data)), angular.fromJson(d));\n    }\n    return data == d;\n  };\n\n  this.toString = function() {\n    return method + ' ' + url;\n  };\n\n  this.params = function(u) {\n    return angular.extend(parseQuery(), pathParams());\n\n    function pathParams() {\n      var keyObj = {};\n      if (!url || !angular.isFunction(url.test) || !keys || keys.length === 0) return keyObj;\n\n      var m = url.exec(u);\n      if (!m) return keyObj;\n      for (var i = 1, len = m.length; i < len; ++i) {\n        var key = keys[i - 1];\n        var val = m[i];\n        if (key && val) {\n          keyObj[key.name || key] = val;\n        }\n      }\n\n      return keyObj;\n    }\n\n    function parseQuery() {\n      var obj = {}, key_value, key,\n          queryStr = u.indexOf('?') > -1\n          ? u.substring(u.indexOf('?') + 1)\n          : \"\";\n\n      angular.forEach(queryStr.split('&'), function(keyValue) {\n        if (keyValue) {\n          key_value = keyValue.replace(/\\+/g,'%20').split('=');\n          key = tryDecodeURIComponent(key_value[0]);\n          if (angular.isDefined(key)) {\n            var val = angular.isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;\n            if (!hasOwnProperty.call(obj, key)) {\n              obj[key] = val;\n            } else if (angular.isArray(obj[key])) {\n              obj[key].push(val);\n            } else {\n              obj[key] = [obj[key],val];\n            }\n          }\n        }\n      });\n      return obj;\n    }\n    function tryDecodeURIComponent(value) {\n      try {\n        return decodeURIComponent(value);\n      } catch (e) {\n        // Ignore any invalid uri component\n      }\n    }\n  };\n}\n\nfunction createMockXhr() {\n  return new MockXhr();\n}\n\nfunction MockXhr() {\n\n  // hack for testing $http, $httpBackend\n  MockXhr.$$lastInstance = this;\n\n  this.open = function(method, url, async) {\n    this.$$method = method;\n    this.$$url = url;\n    this.$$async = async;\n    this.$$reqHeaders = {};\n    this.$$respHeaders = {};\n  };\n\n  this.send = function(data) {\n    this.$$data = data;\n  };\n\n  this.setRequestHeader = function(key, value) {\n    this.$$reqHeaders[key] = value;\n  };\n\n  this.getResponseHeader = function(name) {\n    // the lookup must be case insensitive,\n    // that's why we try two quick lookups first and full scan last\n    var header = this.$$respHeaders[name];\n    if (header) return header;\n\n    name = angular.lowercase(name);\n    header = this.$$respHeaders[name];\n    if (header) return header;\n\n    header = undefined;\n    angular.forEach(this.$$respHeaders, function(headerVal, headerName) {\n      if (!header && angular.lowercase(headerName) == name) header = headerVal;\n    });\n    return header;\n  };\n\n  this.getAllResponseHeaders = function() {\n    var lines = [];\n\n    angular.forEach(this.$$respHeaders, function(value, key) {\n      lines.push(key + ': ' + value);\n    });\n    return lines.join('\\n');\n  };\n\n  this.abort = angular.noop;\n\n  // This section simulates the events on a real XHR object (and the upload object)\n  // When we are testing $httpBackend (inside the angular project) we make partial use of this\n  // but store the events directly ourselves on `$$events`, instead of going through the `addEventListener`\n  this.$$events = {};\n  this.addEventListener = function(name, listener) {\n    if (angular.isUndefined(this.$$events[name])) this.$$events[name] = [];\n    this.$$events[name].push(listener);\n  };\n\n  this.upload = {\n    $$events: {},\n    addEventListener: this.addEventListener\n  };\n}\n\n\n/**\n * @ngdoc service\n * @name $timeout\n * @description\n *\n * This service is just a simple decorator for {@link ng.$timeout $timeout} service\n * that adds a \"flush\" and \"verifyNoPendingTasks\" methods.\n */\n\nangular.mock.$TimeoutDecorator = ['$delegate', '$browser', function($delegate, $browser) {\n\n  /**\n   * @ngdoc method\n   * @name $timeout#flush\n   * @description\n   *\n   * Flushes the queue of pending tasks.\n   *\n   * @param {number=} delay maximum timeout amount to flush up until\n   */\n  $delegate.flush = function(delay) {\n    $browser.defer.flush(delay);\n  };\n\n  /**\n   * @ngdoc method\n   * @name $timeout#verifyNoPendingTasks\n   * @description\n   *\n   * Verifies that there are no pending tasks that need to be flushed.\n   */\n  $delegate.verifyNoPendingTasks = function() {\n    if ($browser.deferredFns.length) {\n      throw new Error('Deferred tasks to flush (' + $browser.deferredFns.length + '): ' +\n          formatPendingTasksAsString($browser.deferredFns));\n    }\n  };\n\n  function formatPendingTasksAsString(tasks) {\n    var result = [];\n    angular.forEach(tasks, function(task) {\n      result.push('{id: ' + task.id + ', ' + 'time: ' + task.time + '}');\n    });\n\n    return result.join(', ');\n  }\n\n  return $delegate;\n}];\n\nangular.mock.$RAFDecorator = ['$delegate', function($delegate) {\n  var rafFn = function(fn) {\n    var index = rafFn.queue.length;\n    rafFn.queue.push(fn);\n    return function() {\n      rafFn.queue.splice(index, 1);\n    };\n  };\n\n  rafFn.queue = [];\n  rafFn.supported = $delegate.supported;\n\n  rafFn.flush = function() {\n    if (rafFn.queue.length === 0) {\n      throw new Error('No rAF callbacks present');\n    }\n\n    var length = rafFn.queue.length;\n    for (var i = 0; i < length; i++) {\n      rafFn.queue[i]();\n    }\n\n    rafFn.queue = rafFn.queue.slice(i);\n  };\n\n  return rafFn;\n}];\n\n/**\n *\n */\nvar originalRootElement;\nangular.mock.$RootElementProvider = function() {\n  this.$get = ['$injector', function($injector) {\n    originalRootElement = angular.element('<div ng-app></div>').data('$injector', $injector);\n    return originalRootElement;\n  }];\n};\n\n/**\n * @ngdoc service\n * @name $controller\n * @description\n * A decorator for {@link ng.$controller} with additional `bindings` parameter, useful when testing\n * controllers of directives that use {@link $compile#-bindtocontroller- `bindToController`}.\n *\n *\n * ## Example\n *\n * ```js\n *\n * // Directive definition ...\n *\n * myMod.directive('myDirective', {\n *   controller: 'MyDirectiveController',\n *   bindToController: {\n *     name: '@'\n *   }\n * });\n *\n *\n * // Controller definition ...\n *\n * myMod.controller('MyDirectiveController', ['$log', function($log) {\n *   $log.info(this.name);\n * }]);\n *\n *\n * // In a test ...\n *\n * describe('myDirectiveController', function() {\n *   it('should write the bound name to the log', inject(function($controller, $log) {\n *     var ctrl = $controller('MyDirectiveController', { /* no locals &#42;/ }, { name: 'Clark Kent' });\n *     expect(ctrl.name).toEqual('Clark Kent');\n *     expect($log.info.logs).toEqual(['Clark Kent']);\n *   }));\n * });\n *\n * ```\n *\n * @param {Function|string} constructor If called with a function then it's considered to be the\n *    controller constructor function. Otherwise it's considered to be a string which is used\n *    to retrieve the controller constructor using the following steps:\n *\n *    * check if a controller with given name is registered via `$controllerProvider`\n *    * check if evaluating the string on the current scope returns a constructor\n *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global\n *      `window` object (not recommended)\n *\n *    The string can use the `controller as property` syntax, where the controller instance is published\n *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this\n *    to work correctly.\n *\n * @param {Object} locals Injection locals for Controller.\n * @param {Object=} bindings Properties to add to the controller before invoking the constructor. This is used\n *                           to simulate the `bindToController` feature and simplify certain kinds of tests.\n * @return {Object} Instance of given controller.\n */\nangular.mock.$ControllerDecorator = ['$delegate', function($delegate) {\n  return function(expression, locals, later, ident) {\n    if (later && typeof later === 'object') {\n      var instantiate = $delegate(expression, locals, true, ident);\n      angular.extend(instantiate.instance, later);\n\n      var instance = instantiate();\n      if (instance !== instantiate.instance) {\n        angular.extend(instance, later);\n      }\n\n      return instance;\n    }\n    return $delegate(expression, locals, later, ident);\n  };\n}];\n\n/**\n * @ngdoc service\n * @name $componentController\n * @description\n * A service that can be used to create instances of component controllers.\n * <div class=\"alert alert-info\">\n * Be aware that the controller will be instantiated and attached to the scope as specified in\n * the component definition object. If you do not provide a `$scope` object in the `locals` param\n * then the helper will create a new isolated scope as a child of `$rootScope`.\n * </div>\n * @param {string} componentName the name of the component whose controller we want to instantiate\n * @param {Object} locals Injection locals for Controller.\n * @param {Object=} bindings Properties to add to the controller before invoking the constructor. This is used\n *                           to simulate the `bindToController` feature and simplify certain kinds of tests.\n * @param {string=} ident Override the property name to use when attaching the controller to the scope.\n * @return {Object} Instance of requested controller.\n */\nangular.mock.$ComponentControllerProvider = ['$compileProvider', function($compileProvider) {\n  this.$get = ['$controller','$injector', '$rootScope', function($controller, $injector, $rootScope) {\n    return function $componentController(componentName, locals, bindings, ident) {\n      // get all directives associated to the component name\n      var directives = $injector.get(componentName + 'Directive');\n      // look for those directives that are components\n      var candidateDirectives = directives.filter(function(directiveInfo) {\n        // components have controller, controllerAs and restrict:'E'\n        return directiveInfo.controller && directiveInfo.controllerAs && directiveInfo.restrict === 'E';\n      });\n      // check if valid directives found\n      if (candidateDirectives.length === 0) {\n        throw new Error('No component found');\n      }\n      if (candidateDirectives.length > 1) {\n        throw new Error('Too many components found');\n      }\n      // get the info of the component\n      var directiveInfo = candidateDirectives[0];\n      // create a scope if needed\n      locals = locals || {};\n      locals.$scope = locals.$scope || $rootScope.$new(true);\n      return $controller(directiveInfo.controller, locals, bindings, ident || directiveInfo.controllerAs);\n    };\n  }];\n}];\n\n\n/**\n * @ngdoc module\n * @name ngMock\n * @packageName angular-mocks\n * @description\n *\n * # ngMock\n *\n * The `ngMock` module provides support to inject and mock Angular services into unit tests.\n * In addition, ngMock also extends various core ng services such that they can be\n * inspected and controlled in a synchronous manner within test code.\n *\n *\n * <div doc-module-components=\"ngMock\"></div>\n *\n * @installation\n *\n *  First, download the file:\n *  * [Google CDN](https://developers.google.com/speed/libraries/devguide#angularjs) e.g.\n *    `\"//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-mocks.js\"`\n *  * [NPM](https://www.npmjs.com/) e.g. `npm install angular-mocks@X.Y.Z`\n *  * [Bower](http://bower.io) e.g. `bower install angular-mocks@X.Y.Z`\n *  * [code.angularjs.org](https://code.angularjs.org/) (discouraged for production use)  e.g.\n *    `\"//code.angularjs.org/X.Y.Z/angular-mocks.js\"`\n *\n * where X.Y.Z is the AngularJS version you are running.\n *\n * Then, configure your test runner to load `angular-mocks.js` after `angular.js`.\n * This example uses <a href=\"http://karma-runner.github.io/\">Karma</a>:\n *\n * ```\n * config.set({\n *   files: [\n *     'build/angular.js', // and other module files you need\n *     'build/angular-mocks.js',\n *     '<path/to/application/files>',\n *     '<path/to/spec/files>'\n *   ]\n * });\n * ```\n *\n * Including the `angular-mocks.js` file automatically adds the `ngMock` module, so your tests\n *  are ready to go!\n */\nangular.module('ngMock', ['ng']).provider({\n  $browser: angular.mock.$BrowserProvider,\n  $exceptionHandler: angular.mock.$ExceptionHandlerProvider,\n  $log: angular.mock.$LogProvider,\n  $interval: angular.mock.$IntervalProvider,\n  $httpBackend: angular.mock.$HttpBackendProvider,\n  $rootElement: angular.mock.$RootElementProvider,\n  $componentController: angular.mock.$ComponentControllerProvider\n}).config(['$provide', function($provide) {\n  $provide.decorator('$timeout', angular.mock.$TimeoutDecorator);\n  $provide.decorator('$$rAF', angular.mock.$RAFDecorator);\n  $provide.decorator('$rootScope', angular.mock.$RootScopeDecorator);\n  $provide.decorator('$controller', angular.mock.$ControllerDecorator);\n}]);\n\n/**\n * @ngdoc module\n * @name ngMockE2E\n * @module ngMockE2E\n * @packageName angular-mocks\n * @description\n *\n * The `ngMockE2E` is an angular module which contains mocks suitable for end-to-end testing.\n * Currently there is only one mock present in this module -\n * the {@link ngMockE2E.$httpBackend e2e $httpBackend} mock.\n */\nangular.module('ngMockE2E', ['ng']).config(['$provide', function($provide) {\n  $provide.value('$httpBackend', angular.injector(['ng']).get('$httpBackend'));\n  $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);\n}]);\n\n/**\n * @ngdoc service\n * @name $httpBackend\n * @module ngMockE2E\n * @description\n * Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of\n * applications that use the {@link ng.$http $http service}.\n *\n * <div class=\"alert alert-info\">\n * **Note**: For fake http backend implementation suitable for unit testing please see\n * {@link ngMock.$httpBackend unit-testing $httpBackend mock}.\n * </div>\n *\n * This implementation can be used to respond with static or dynamic responses via the `when` api\n * and its shortcuts (`whenGET`, `whenPOST`, etc) and optionally pass through requests to the\n * real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch\n * templates from a webserver).\n *\n * As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application\n * is being developed with the real backend api replaced with a mock, it is often desirable for\n * certain category of requests to bypass the mock and issue a real http request (e.g. to fetch\n * templates or static files from the webserver). To configure the backend with this behavior\n * use the `passThrough` request handler of `when` instead of `respond`.\n *\n * Additionally, we don't want to manually have to flush mocked out requests like we do during unit\n * testing. For this reason the e2e $httpBackend flushes mocked out requests\n * automatically, closely simulating the behavior of the XMLHttpRequest object.\n *\n * To setup the application to run with this http backend, you have to create a module that depends\n * on the `ngMockE2E` and your application modules and defines the fake backend:\n *\n * ```js\n *   var myAppDev = angular.module('myAppDev', ['myApp', 'ngMockE2E']);\n *   myAppDev.run(function($httpBackend) {\n *     var phones = [{name: 'phone1'}, {name: 'phone2'}];\n *\n *     // returns the current list of phones\n *     $httpBackend.whenGET('/phones').respond(phones);\n *\n *     // adds a new phone to the phones array\n *     $httpBackend.whenPOST('/phones').respond(function(method, url, data) {\n *       var phone = angular.fromJson(data);\n *       phones.push(phone);\n *       return [200, phone, {}];\n *     });\n *     $httpBackend.whenGET(/^\\/templates\\//).passThrough(); // Requests for templare are handled by the real server\n *     //...\n *   });\n * ```\n *\n * Afterwards, bootstrap your app with this new module.\n *\n * ## Example\n * <example name=\"httpbackend-e2e-testing\" module=\"myAppE2E\" deps=\"angular-mocks.js\">\n * <file name=\"app.js\">\n *   var myApp = angular.module('myApp', []);\n *\n *   myApp.controller('main', function($http) {\n *     var ctrl = this;\n *\n *     ctrl.phones = [];\n *     ctrl.newPhone = {\n *       name: ''\n *     };\n *\n *     ctrl.getPhones = function() {\n *       $http.get('/phones').then(function(response) {\n *         ctrl.phones = response.data;\n *       });\n *     };\n *\n *     ctrl.addPhone = function(phone) {\n *       $http.post('/phones', phone).then(function() {\n *         ctrl.newPhone = {name: ''};\n *         return ctrl.getPhones();\n *       });\n *     };\n *\n *     ctrl.getPhones();\n *   });\n * </file>\n * <file name=\"e2e.js\">\n *   var myAppDev = angular.module('myAppE2E', ['myApp', 'ngMockE2E']);\n *\n *   myAppDev.run(function($httpBackend) {\n *     var phones = [{name: 'phone1'}, {name: 'phone2'}];\n *\n *     // returns the current list of phones\n *     $httpBackend.whenGET('/phones').respond(phones);\n *\n *     // adds a new phone to the phones array\n *     $httpBackend.whenPOST('/phones').respond(function(method, url, data) {\n *       var phone = angular.fromJson(data);\n *       phones.push(phone);\n *       return [200, phone, {}];\n *     });\n *   });\n * </file>\n * <file name=\"index.html\">\n *   <div ng-controller=\"main as $ctrl\">\n *   <form name=\"newPhoneForm\" ng-submit=\"$ctrl.addPhone($ctrl.newPhone)\">\n *     <input type=\"text\" ng-model=\"$ctrl.newPhone.name\">\n *     <input type=\"submit\" value=\"Add Phone\">\n *   </form>\n *   <h1>Phones</h1>\n *   <ul>\n *     <li ng-repeat=\"phone in $ctrl.phones\">{{phone.name}}</li>\n *   </ul>\n *   </div>\n * </file>\n * </example>\n *\n *\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#when\n * @module ngMockE2E\n * @description\n * Creates a new backend definition.\n *\n * @param {string} method HTTP method.\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(string|RegExp)=} data HTTP request body.\n * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\n *   object and returns true if the headers match the current definition.\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\n *   {@link ngMock.$httpBackend $httpBackend mock}.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n *\n *  - respond –\n *    ```\n *    { function([status,] data[, headers, statusText])\n *    | function(function(method, url, data, headers, params)}\n *    ```\n *    – The respond method takes a set of static data to be returned or a function that can return\n *    an array containing response status (number), response data (Array|Object|string), response\n *    headers (Object), and the text for the status (string).\n *  - passThrough – `{function()}` – Any request matching a backend definition with\n *    `passThrough` handler will be passed through to the real backend (an XHR request will be made\n *    to the server.)\n *  - Both methods return the `requestHandler` object for possible overrides.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenGET\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for GET requests. For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\n *   {@link ngMock.$httpBackend $httpBackend mock}.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenHEAD\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for HEAD requests. For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\n *   {@link ngMock.$httpBackend $httpBackend mock}.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenDELETE\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for DELETE requests. For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\n *   {@link ngMock.$httpBackend $httpBackend mock}.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenPOST\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for POST requests. For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(string|RegExp)=} data HTTP request body.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\n *   {@link ngMock.$httpBackend $httpBackend mock}.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenPUT\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for PUT requests.  For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(string|RegExp)=} data HTTP request body.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\n *   {@link ngMock.$httpBackend $httpBackend mock}.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenPATCH\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for PATCH requests.  For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(string|RegExp)=} data HTTP request body.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\n *   {@link ngMock.$httpBackend $httpBackend mock}.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenJSONP\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for JSONP requests. For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\n *   {@link ngMock.$httpBackend $httpBackend mock}.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n/**\n * @ngdoc method\n * @name $httpBackend#whenRoute\n * @module ngMockE2E\n * @description\n * Creates a new backend definition that compares only with the requested route.\n *\n * @param {string} method HTTP method.\n * @param {string} url HTTP url string that supports colon param matching.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\nangular.mock.e2e = {};\nangular.mock.e2e.$httpBackendDecorator =\n  ['$rootScope', '$timeout', '$delegate', '$browser', createHttpBackendMock];\n\n\n/**\n * @ngdoc type\n * @name $rootScope.Scope\n * @module ngMock\n * @description\n * {@link ng.$rootScope.Scope Scope} type decorated with helper methods useful for testing. These\n * methods are automatically available on any {@link ng.$rootScope.Scope Scope} instance when\n * `ngMock` module is loaded.\n *\n * In addition to all the regular `Scope` methods, the following helper methods are available:\n */\nangular.mock.$RootScopeDecorator = ['$delegate', function($delegate) {\n\n  var $rootScopePrototype = Object.getPrototypeOf($delegate);\n\n  $rootScopePrototype.$countChildScopes = countChildScopes;\n  $rootScopePrototype.$countWatchers = countWatchers;\n\n  return $delegate;\n\n  // ------------------------------------------------------------------------------------------ //\n\n  /**\n   * @ngdoc method\n   * @name $rootScope.Scope#$countChildScopes\n   * @module ngMock\n   * @description\n   * Counts all the direct and indirect child scopes of the current scope.\n   *\n   * The current scope is excluded from the count. The count includes all isolate child scopes.\n   *\n   * @returns {number} Total number of child scopes.\n   */\n  function countChildScopes() {\n    // jshint validthis: true\n    var count = 0; // exclude the current scope\n    var pendingChildHeads = [this.$$childHead];\n    var currentScope;\n\n    while (pendingChildHeads.length) {\n      currentScope = pendingChildHeads.shift();\n\n      while (currentScope) {\n        count += 1;\n        pendingChildHeads.push(currentScope.$$childHead);\n        currentScope = currentScope.$$nextSibling;\n      }\n    }\n\n    return count;\n  }\n\n\n  /**\n   * @ngdoc method\n   * @name $rootScope.Scope#$countWatchers\n   * @module ngMock\n   * @description\n   * Counts all the watchers of direct and indirect child scopes of the current scope.\n   *\n   * The watchers of the current scope are included in the count and so are all the watchers of\n   * isolate child scopes.\n   *\n   * @returns {number} Total number of watchers.\n   */\n  function countWatchers() {\n    // jshint validthis: true\n    var count = this.$$watchers ? this.$$watchers.length : 0; // include the current scope\n    var pendingChildHeads = [this.$$childHead];\n    var currentScope;\n\n    while (pendingChildHeads.length) {\n      currentScope = pendingChildHeads.shift();\n\n      while (currentScope) {\n        count += currentScope.$$watchers ? currentScope.$$watchers.length : 0;\n        pendingChildHeads.push(currentScope.$$childHead);\n        currentScope = currentScope.$$nextSibling;\n      }\n    }\n\n    return count;\n  }\n}];\n\n\n!(function(jasmineOrMocha) {\n\n  if (!jasmineOrMocha) {\n    return;\n  }\n\n  var currentSpec = null,\n      injectorState = new InjectorState(),\n      annotatedFunctions = [],\n      wasInjectorCreated = function() {\n        return !!currentSpec;\n      };\n\n  angular.mock.$$annotate = angular.injector.$$annotate;\n  angular.injector.$$annotate = function(fn) {\n    if (typeof fn === 'function' && !fn.$inject) {\n      annotatedFunctions.push(fn);\n    }\n    return angular.mock.$$annotate.apply(this, arguments);\n  };\n\n  /**\n   * @ngdoc function\n   * @name angular.mock.module\n   * @description\n   *\n   * *NOTE*: This function is also published on window for easy access.<br>\n   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\n   *\n   * This function registers a module configuration code. It collects the configuration information\n   * which will be used when the injector is created by {@link angular.mock.inject inject}.\n   *\n   * See {@link angular.mock.inject inject} for usage example\n   *\n   * @param {...(string|Function|Object)} fns any number of modules which are represented as string\n   *        aliases or as anonymous module initialization functions. The modules are used to\n   *        configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an\n   *        object literal is passed each key-value pair will be registered on the module via\n   *        {@link auto.$provide $provide}.value, the key being the string name (or token) to associate\n   *        with the value on the injector.\n   */\n  var module = window.module = angular.mock.module = function() {\n    var moduleFns = Array.prototype.slice.call(arguments, 0);\n    return wasInjectorCreated() ? workFn() : workFn;\n    /////////////////////\n    function workFn() {\n      if (currentSpec.$injector) {\n        throw new Error('Injector already created, can not register a module!');\n      } else {\n        var fn, modules = currentSpec.$modules || (currentSpec.$modules = []);\n        angular.forEach(moduleFns, function(module) {\n          if (angular.isObject(module) && !angular.isArray(module)) {\n            fn = ['$provide', function($provide) {\n              angular.forEach(module, function(value, key) {\n                $provide.value(key, value);\n              });\n            }];\n          } else {\n            fn = module;\n          }\n          if (currentSpec.$providerInjector) {\n            currentSpec.$providerInjector.invoke(fn);\n          } else {\n            modules.push(fn);\n          }\n        });\n      }\n    }\n  };\n\n  module.$$beforeAllHook = (window.before || window.beforeAll);\n  module.$$afterAllHook = (window.after || window.afterAll);\n\n  // purely for testing ngMock itself\n  module.$$currentSpec = function(to) {\n    if (arguments.length === 0) return to;\n    currentSpec = to;\n  };\n\n  /**\n   * @ngdoc function\n   * @name angular.mock.module.sharedInjector\n   * @description\n   *\n   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\n   *\n   * This function ensures a single injector will be used for all tests in a given describe context.\n   * This contrasts with the default behaviour where a new injector is created per test case.\n   *\n   * Use sharedInjector when you want to take advantage of Jasmine's `beforeAll()`, or mocha's\n   * `before()` methods. Call `module.sharedInjector()` before you setup any other hooks that\n   * will create (i.e call `module()`) or use (i.e call `inject()`) the injector.\n   *\n   * You cannot call `sharedInjector()` from within a context already using `sharedInjector()`.\n   *\n   * ## Example\n   *\n   * Typically beforeAll is used to make many assertions about a single operation. This can\n   * cut down test run-time as the test setup doesn't need to be re-run, and enabling focussed\n   * tests each with a single assertion.\n   *\n   * ```js\n   * describe(\"Deep Thought\", function() {\n   *\n   *   module.sharedInjector();\n   *\n   *   beforeAll(module(\"UltimateQuestion\"));\n   *\n   *   beforeAll(inject(function(DeepThought) {\n   *     expect(DeepThought.answer).toBeUndefined();\n   *     DeepThought.generateAnswer();\n   *   }));\n   *\n   *   it(\"has calculated the answer correctly\", inject(function(DeepThought) {\n   *     // Because of sharedInjector, we have access to the instance of the DeepThought service\n   *     // that was provided to the beforeAll() hook. Therefore we can test the generated answer\n   *     expect(DeepThought.answer).toBe(42);\n   *   }));\n   *\n   *   it(\"has calculated the answer within the expected time\", inject(function(DeepThought) {\n   *     expect(DeepThought.runTimeMillennia).toBeLessThan(8000);\n   *   }));\n   *\n   *   it(\"has double checked the answer\", inject(function(DeepThought) {\n   *     expect(DeepThought.absolutelySureItIsTheRightAnswer).toBe(true);\n   *   }));\n   *\n   * });\n   *\n   * ```\n   */\n  module.sharedInjector = function() {\n    if (!(module.$$beforeAllHook && module.$$afterAllHook)) {\n      throw Error(\"sharedInjector() cannot be used unless your test runner defines beforeAll/afterAll\");\n    }\n\n    var initialized = false;\n\n    module.$$beforeAllHook(function() {\n      if (injectorState.shared) {\n        injectorState.sharedError = Error(\"sharedInjector() cannot be called inside a context that has already called sharedInjector()\");\n        throw injectorState.sharedError;\n      }\n      initialized = true;\n      currentSpec = this;\n      injectorState.shared = true;\n    });\n\n    module.$$afterAllHook(function() {\n      if (initialized) {\n        injectorState = new InjectorState();\n        module.$$cleanup();\n      } else {\n        injectorState.sharedError = null;\n      }\n    });\n  };\n\n  module.$$beforeEach = function() {\n    if (injectorState.shared && currentSpec && currentSpec != this) {\n      var state = currentSpec;\n      currentSpec = this;\n      angular.forEach([\"$injector\",\"$modules\",\"$providerInjector\", \"$injectorStrict\"], function(k) {\n        currentSpec[k] = state[k];\n        state[k] = null;\n      });\n    } else {\n      currentSpec = this;\n      originalRootElement = null;\n      annotatedFunctions = [];\n    }\n  };\n\n  module.$$afterEach = function() {\n    if (injectorState.cleanupAfterEach()) {\n      module.$$cleanup();\n    }\n  };\n\n  module.$$cleanup = function() {\n    var injector = currentSpec.$injector;\n\n    annotatedFunctions.forEach(function(fn) {\n      delete fn.$inject;\n    });\n\n    angular.forEach(currentSpec.$modules, function(module) {\n      if (module && module.$$hashKey) {\n        module.$$hashKey = undefined;\n      }\n    });\n\n    currentSpec.$injector = null;\n    currentSpec.$modules = null;\n    currentSpec.$providerInjector = null;\n    currentSpec = null;\n\n    if (injector) {\n      // Ensure `$rootElement` is instantiated, before checking `originalRootElement`\n      var $rootElement = injector.get('$rootElement');\n      var rootNode = $rootElement && $rootElement[0];\n      var cleanUpNodes = !originalRootElement ? [] : [originalRootElement[0]];\n      if (rootNode && (!originalRootElement || rootNode !== originalRootElement[0])) {\n        cleanUpNodes.push(rootNode);\n      }\n      angular.element.cleanData(cleanUpNodes);\n\n      // Ensure `$destroy()` is available, before calling it\n      // (a mocked `$rootScope` might not implement it (or not even be an object at all))\n      var $rootScope = injector.get('$rootScope');\n      if ($rootScope && $rootScope.$destroy) $rootScope.$destroy();\n    }\n\n    // clean up jquery's fragment cache\n    angular.forEach(angular.element.fragments, function(val, key) {\n      delete angular.element.fragments[key];\n    });\n\n    MockXhr.$$lastInstance = null;\n\n    angular.forEach(angular.callbacks, function(val, key) {\n      delete angular.callbacks[key];\n    });\n    angular.callbacks.counter = 0;\n  };\n\n  (window.beforeEach || window.setup)(module.$$beforeEach);\n  (window.afterEach || window.teardown)(module.$$afterEach);\n\n  /**\n   * @ngdoc function\n   * @name angular.mock.inject\n   * @description\n   *\n   * *NOTE*: This function is also published on window for easy access.<br>\n   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\n   *\n   * The inject function wraps a function into an injectable function. The inject() creates new\n   * instance of {@link auto.$injector $injector} per test, which is then used for\n   * resolving references.\n   *\n   *\n   * ## Resolving References (Underscore Wrapping)\n   * Often, we would like to inject a reference once, in a `beforeEach()` block and reuse this\n   * in multiple `it()` clauses. To be able to do this we must assign the reference to a variable\n   * that is declared in the scope of the `describe()` block. Since we would, most likely, want\n   * the variable to have the same name of the reference we have a problem, since the parameter\n   * to the `inject()` function would hide the outer variable.\n   *\n   * To help with this, the injected parameters can, optionally, be enclosed with underscores.\n   * These are ignored by the injector when the reference name is resolved.\n   *\n   * For example, the parameter `_myService_` would be resolved as the reference `myService`.\n   * Since it is available in the function body as _myService_, we can then assign it to a variable\n   * defined in an outer scope.\n   *\n   * ```\n   * // Defined out reference variable outside\n   * var myService;\n   *\n   * // Wrap the parameter in underscores\n   * beforeEach( inject( function(_myService_){\n   *   myService = _myService_;\n   * }));\n   *\n   * // Use myService in a series of tests.\n   * it('makes use of myService', function() {\n   *   myService.doStuff();\n   * });\n   *\n   * ```\n   *\n   * See also {@link angular.mock.module angular.mock.module}\n   *\n   * ## Example\n   * Example of what a typical jasmine tests looks like with the inject method.\n   * ```js\n   *\n   *   angular.module('myApplicationModule', [])\n   *       .value('mode', 'app')\n   *       .value('version', 'v1.0.1');\n   *\n   *\n   *   describe('MyApp', function() {\n   *\n   *     // You need to load modules that you want to test,\n   *     // it loads only the \"ng\" module by default.\n   *     beforeEach(module('myApplicationModule'));\n   *\n   *\n   *     // inject() is used to inject arguments of all given functions\n   *     it('should provide a version', inject(function(mode, version) {\n   *       expect(version).toEqual('v1.0.1');\n   *       expect(mode).toEqual('app');\n   *     }));\n   *\n   *\n   *     // The inject and module method can also be used inside of the it or beforeEach\n   *     it('should override a version and test the new version is injected', function() {\n   *       // module() takes functions or strings (module aliases)\n   *       module(function($provide) {\n   *         $provide.value('version', 'overridden'); // override version here\n   *       });\n   *\n   *       inject(function(version) {\n   *         expect(version).toEqual('overridden');\n   *       });\n   *     });\n   *   });\n   *\n   * ```\n   *\n   * @param {...Function} fns any number of functions which will be injected using the injector.\n   */\n\n\n\n  var ErrorAddingDeclarationLocationStack = function(e, errorForStack) {\n    this.message = e.message;\n    this.name = e.name;\n    if (e.line) this.line = e.line;\n    if (e.sourceId) this.sourceId = e.sourceId;\n    if (e.stack && errorForStack)\n      this.stack = e.stack + '\\n' + errorForStack.stack;\n    if (e.stackArray) this.stackArray = e.stackArray;\n  };\n  ErrorAddingDeclarationLocationStack.prototype.toString = Error.prototype.toString;\n\n  window.inject = angular.mock.inject = function() {\n    var blockFns = Array.prototype.slice.call(arguments, 0);\n    var errorForStack = new Error('Declaration Location');\n    // IE10+ and PhanthomJS do not set stack trace information, until the error is thrown\n    if (!errorForStack.stack) {\n      try {\n        throw errorForStack;\n      } catch (e) {}\n    }\n    return wasInjectorCreated() ? workFn.call(currentSpec) : workFn;\n    /////////////////////\n    function workFn() {\n      var modules = currentSpec.$modules || [];\n      var strictDi = !!currentSpec.$injectorStrict;\n      modules.unshift(['$injector', function($injector) {\n        currentSpec.$providerInjector = $injector;\n      }]);\n      modules.unshift('ngMock');\n      modules.unshift('ng');\n      var injector = currentSpec.$injector;\n      if (!injector) {\n        if (strictDi) {\n          // If strictDi is enabled, annotate the providerInjector blocks\n          angular.forEach(modules, function(moduleFn) {\n            if (typeof moduleFn === \"function\") {\n              angular.injector.$$annotate(moduleFn);\n            }\n          });\n        }\n        injector = currentSpec.$injector = angular.injector(modules, strictDi);\n        currentSpec.$injectorStrict = strictDi;\n      }\n      for (var i = 0, ii = blockFns.length; i < ii; i++) {\n        if (currentSpec.$injectorStrict) {\n          // If the injector is strict / strictDi, and the spec wants to inject using automatic\n          // annotation, then annotate the function here.\n          injector.annotate(blockFns[i]);\n        }\n        try {\n          /* jshint -W040 *//* Jasmine explicitly provides a `this` object when calling functions */\n          injector.invoke(blockFns[i] || angular.noop, this);\n          /* jshint +W040 */\n        } catch (e) {\n          if (e.stack && errorForStack) {\n            throw new ErrorAddingDeclarationLocationStack(e, errorForStack);\n          }\n          throw e;\n        } finally {\n          errorForStack = null;\n        }\n      }\n    }\n  };\n\n\n  angular.mock.inject.strictDi = function(value) {\n    value = arguments.length ? !!value : true;\n    return wasInjectorCreated() ? workFn() : workFn;\n\n    function workFn() {\n      if (value !== currentSpec.$injectorStrict) {\n        if (currentSpec.$injector) {\n          throw new Error('Injector already created, can not modify strict annotations');\n        } else {\n          currentSpec.$injectorStrict = value;\n        }\n      }\n    }\n  };\n\n  function InjectorState() {\n    this.shared = false;\n    this.sharedError = null;\n\n    this.cleanupAfterEach = function() {\n      return !this.shared || this.sharedError;\n    };\n  }\n})(window.jasmine || window.mocha);\n\n\n})(window, window.angular);\n"]}