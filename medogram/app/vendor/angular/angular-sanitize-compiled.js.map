{"version":3,"sources":["angular-sanitize.js"],"names":[],"mappings":"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","file":"angular-sanitize-compiled.js","sourcesContent":["/**\n * @license AngularJS v1.5.7\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nvar $sanitizeMinErr = angular.$$minErr('$sanitize');\n\n/**\n * @ngdoc module\n * @name ngSanitize\n * @description\n *\n * # ngSanitize\n *\n * The `ngSanitize` module provides functionality to sanitize HTML.\n *\n *\n * <div doc-module-components=\"ngSanitize\"></div>\n *\n * See {@link ngSanitize.$sanitize `$sanitize`} for usage.\n */\n\n/**\n * @ngdoc service\n * @name $sanitize\n * @kind function\n *\n * @description\n *   Sanitizes an html string by stripping all potentially dangerous tokens.\n *\n *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\n *   then serialized back to properly escaped html string. This means that no unsafe input can make\n *   it into the returned string.\n *\n *   The whitelist for URL sanitization of attribute values is configured using the functions\n *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider\n *   `$compileProvider`}.\n *\n *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.\n *\n * @param {string} html HTML input.\n * @returns {string} Sanitized HTML.\n *\n * @example\n   <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\">\n   <file name=\"index.html\">\n     <script>\n         angular.module('sanitizeExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\n             $scope.snippet =\n               '<p style=\"color:blue\">an html\\n' +\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n               'snippet</p>';\n             $scope.deliberatelyTrustDangerousSnippet = function() {\n               return $sce.trustAsHtml($scope.snippet);\n             };\n           }]);\n     </script>\n     <div ng-controller=\"ExampleController\">\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Directive</td>\n           <td>How</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"bind-html-with-sanitize\">\n           <td>ng-bind-html</td>\n           <td>Automatically uses $sanitize</td>\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind-html=\"snippet\"></div></td>\n         </tr>\n         <tr id=\"bind-html-with-trust\">\n           <td>ng-bind-html</td>\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n           <td>\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n           </td>\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n         </tr>\n         <tr id=\"bind-default\">\n           <td>ng-bind</td>\n           <td>Automatically escapes</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n       </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should sanitize the html snippet by default', function() {\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n     });\n\n     it('should inline raw snippet if bound to a trusted value', function() {\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n              \"snippet</p>\");\n     });\n\n     it('should escape snippet without any filter', function() {\n       expect(element(by.css('#bind-default div')).getInnerHtml()).\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n              \"snippet&lt;/p&gt;\");\n     });\n\n     it('should update', function() {\n       element(by.model('snippet')).clear();\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('new <b>text</b>');\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(\n         'new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n     });\n   </file>\n   </example>\n */\n\n\n/**\n * @ngdoc provider\n * @name $sanitizeProvider\n *\n * @description\n * Creates and configures {@link $sanitize} instance.\n */\nfunction $SanitizeProvider() {\n  var svgEnabled = false;\n\n  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {\n    if (svgEnabled) {\n      angular.extend(validElements, svgElements);\n    }\n    return function(html) {\n      var buf = [];\n      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {\n        return !/^unsafe:/.test($$sanitizeUri(uri, isImage));\n      }));\n      return buf.join('');\n    };\n  }];\n\n\n  /**\n   * @ngdoc method\n   * @name $sanitizeProvider#enableSvg\n   * @kind function\n   *\n   * @description\n   * Enables a subset of svg to be supported by the sanitizer.\n   *\n   * <div class=\"alert alert-warning\">\n   *   <p>By enabling this setting without taking other precautions, you might expose your\n   *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned\n   *   outside of the containing element and be rendered over other elements on the page (e.g. a login\n   *   link). Such behavior can then result in phishing incidents.</p>\n   *\n   *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg\n   *   tags within the sanitized content:</p>\n   *\n   *   <br>\n   *\n   *   <pre><code>\n   *   .rootOfTheIncludedContent svg {\n   *     overflow: hidden !important;\n   *   }\n   *   </code></pre>\n   * </div>\n   *\n   * @param {boolean=} flag Enable or disable SVG support in the sanitizer.\n   * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called\n   *    without an argument or self for chaining otherwise.\n   */\n  this.enableSvg = function(enableSvg) {\n    if (angular.isDefined(enableSvg)) {\n      svgEnabled = enableSvg;\n      return this;\n    } else {\n      return svgEnabled;\n    }\n  };\n}\n\nfunction sanitizeText(chars) {\n  var buf = [];\n  var writer = htmlSanitizeWriter(buf, angular.noop);\n  writer.chars(chars);\n  return buf.join('');\n}\n\n\n// Regular Expressions for parsing tags and attributes\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n  // Match everything outside of normal chars and \" (quote character)\n  NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nvar voidElements = toMap(\"area,br,col,hr,img,wbr\");\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nvar optionalEndTagBlockElements = toMap(\"colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr\"),\n    optionalEndTagInlineElements = toMap(\"rp,rt\"),\n    optionalEndTagElements = angular.extend({},\n                                            optionalEndTagInlineElements,\n                                            optionalEndTagBlockElements);\n\n// Safe Block Elements - HTML5\nvar blockElements = angular.extend({}, optionalEndTagBlockElements, toMap(\"address,article,\" +\n        \"aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,\" +\n        \"h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul\"));\n\n// Inline Elements - HTML5\nvar inlineElements = angular.extend({}, optionalEndTagInlineElements, toMap(\"a,abbr,acronym,b,\" +\n        \"bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,\" +\n        \"samp,small,span,strike,strong,sub,sup,time,tt,u,var\"));\n\n// SVG Elements\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements\n// Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.\n// They can potentially allow for arbitrary javascript to be executed. See #11290\nvar svgElements = toMap(\"circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,\" +\n        \"hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,\" +\n        \"radialGradient,rect,stop,svg,switch,text,title,tspan\");\n\n// Blocked Elements (will be stripped)\nvar blockedElements = toMap(\"script,style\");\n\nvar validElements = angular.extend({},\n                                   voidElements,\n                                   blockElements,\n                                   inlineElements,\n                                   optionalEndTagElements);\n\n//Attributes that have href and hence need to be sanitized\nvar uriAttrs = toMap(\"background,cite,href,longdesc,src,xlink:href\");\n\nvar htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +\n    'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +\n    'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +\n    'valign,value,vspace,width');\n\n// SVG attributes (without \"id\" and \"name\" attributes)\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes\nvar svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +\n    'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +\n    'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +\n    'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +\n    'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +\n    'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +\n    'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +\n    'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +\n    'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +\n    'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +\n    'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +\n    'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +\n    'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +\n    'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +\n    'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);\n\nvar validAttrs = angular.extend({},\n                                uriAttrs,\n                                svgAttrs,\n                                htmlAttrs);\n\nfunction toMap(str, lowercaseKeys) {\n  var obj = {}, items = str.split(','), i;\n  for (i = 0; i < items.length; i++) {\n    obj[lowercaseKeys ? angular.lowercase(items[i]) : items[i]] = true;\n  }\n  return obj;\n}\n\nvar inertBodyElement;\n(function(window) {\n  var doc;\n  if (window.document && window.document.implementation) {\n    doc = window.document.implementation.createHTMLDocument(\"inert\");\n  } else {\n    throw $sanitizeMinErr('noinert', \"Can't create an inert html document\");\n  }\n  var docElement = doc.documentElement || doc.getDocumentElement();\n  var bodyElements = docElement.getElementsByTagName('body');\n\n  // usually there should be only one body element in the document, but IE doesn't have any, so we need to create one\n  if (bodyElements.length === 1) {\n    inertBodyElement = bodyElements[0];\n  } else {\n    var html = doc.createElement('html');\n    inertBodyElement = doc.createElement('body');\n    html.appendChild(inertBodyElement);\n    doc.appendChild(html);\n  }\n})(window);\n\n/**\n * @example\n * htmlParser(htmlString, {\n *     start: function(tag, attrs) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n * @param {string} html string\n * @param {object} handler\n */\nfunction htmlParser(html, handler) {\n  if (html === null || html === undefined) {\n    html = '';\n  } else if (typeof html !== 'string') {\n    html = '' + html;\n  }\n  inertBodyElement.innerHTML = html;\n\n  //mXSS protection\n  var mXSSAttempts = 5;\n  do {\n    if (mXSSAttempts === 0) {\n      throw $sanitizeMinErr('uinput', \"Failed to sanitize html because the input is unstable\");\n    }\n    mXSSAttempts--;\n\n    // strip custom-namespaced attributes on IE<=11\n    if (window.document.documentMode) {\n      stripCustomNsAttrs(inertBodyElement);\n    }\n    html = inertBodyElement.innerHTML; //trigger mXSS\n    inertBodyElement.innerHTML = html;\n  } while (html !== inertBodyElement.innerHTML);\n\n  var node = inertBodyElement.firstChild;\n  while (node) {\n    switch (node.nodeType) {\n      case 1: // ELEMENT_NODE\n        handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));\n        break;\n      case 3: // TEXT NODE\n        handler.chars(node.textContent);\n        break;\n    }\n\n    var nextNode;\n    if (!(nextNode = node.firstChild)) {\n      if (node.nodeType == 1) {\n        handler.end(node.nodeName.toLowerCase());\n      }\n      nextNode = node.nextSibling;\n      if (!nextNode) {\n        while (nextNode == null) {\n          node = node.parentNode;\n          if (node === inertBodyElement) break;\n          nextNode = node.nextSibling;\n          if (node.nodeType == 1) {\n            handler.end(node.nodeName.toLowerCase());\n          }\n        }\n      }\n    }\n    node = nextNode;\n  }\n\n  while (node = inertBodyElement.firstChild) {\n    inertBodyElement.removeChild(node);\n  }\n}\n\nfunction attrToMap(attrs) {\n  var map = {};\n  for (var i = 0, ii = attrs.length; i < ii; i++) {\n    var attr = attrs[i];\n    map[attr.name] = attr.value;\n  }\n  return map;\n}\n\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n * @returns {string} escaped text\n */\nfunction encodeEntities(value) {\n  return value.\n    replace(/&/g, '&amp;').\n    replace(SURROGATE_PAIR_REGEXP, function(value) {\n      var hi = value.charCodeAt(0);\n      var low = value.charCodeAt(1);\n      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    }).\n    replace(NON_ALPHANUMERIC_REGEXP, function(value) {\n      return '&#' + value.charCodeAt(0) + ';';\n    }).\n    replace(/</g, '&lt;').\n    replace(/>/g, '&gt;');\n}\n\n/**\n * create an HTML/XML writer which writes to buffer\n * @param {Array} buf use buf.join('') to get out sanitized html string\n * @returns {object} in the form of {\n *     start: function(tag, attrs) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * }\n */\nfunction htmlSanitizeWriter(buf, uriValidator) {\n  var ignoreCurrentElement = false;\n  var out = angular.bind(buf, buf.push);\n  return {\n    start: function(tag, attrs) {\n      tag = angular.lowercase(tag);\n      if (!ignoreCurrentElement && blockedElements[tag]) {\n        ignoreCurrentElement = tag;\n      }\n      if (!ignoreCurrentElement && validElements[tag] === true) {\n        out('<');\n        out(tag);\n        angular.forEach(attrs, function(value, key) {\n          var lkey=angular.lowercase(key);\n          var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\n          if (validAttrs[lkey] === true &&\n            (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n            out(' ');\n            out(key);\n            out('=\"');\n            out(encodeEntities(value));\n            out('\"');\n          }\n        });\n        out('>');\n      }\n    },\n    end: function(tag) {\n      tag = angular.lowercase(tag);\n      if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {\n        out('</');\n        out(tag);\n        out('>');\n      }\n      if (tag == ignoreCurrentElement) {\n        ignoreCurrentElement = false;\n      }\n    },\n    chars: function(chars) {\n      if (!ignoreCurrentElement) {\n        out(encodeEntities(chars));\n      }\n    }\n  };\n}\n\n\n/**\n * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare\n * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want\n * to allow any of these custom attributes. This method strips them all.\n *\n * @param node Root element to process\n */\nfunction stripCustomNsAttrs(node) {\n  if (node.nodeType === window.Node.ELEMENT_NODE) {\n    var attrs = node.attributes;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      var attrNode = attrs[i];\n      var attrName = attrNode.name.toLowerCase();\n      if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {\n        node.removeAttributeNode(attrNode);\n        i--;\n        l--;\n      }\n    }\n  }\n\n  var nextNode = node.firstChild;\n  if (nextNode) {\n    stripCustomNsAttrs(nextNode);\n  }\n\n  nextNode = node.nextSibling;\n  if (nextNode) {\n    stripCustomNsAttrs(nextNode);\n  }\n}\n\n\n\n// define ngSanitize module and register $sanitize service\nangular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);\n\n/* global sanitizeText: false */\n\n/**\n * @ngdoc filter\n * @name linky\n * @kind function\n *\n * @description\n * Finds links in text input and turns them into html links. Supports `http/https/ftp/mailto` and\n * plain email address links.\n *\n * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\n *\n * @param {string} text Input text.\n * @param {string} target Window (`_blank|_self|_parent|_top`) or named frame to open links in.\n * @param {object|function(url)} [attributes] Add custom attributes to the link element.\n *\n *    Can be one of:\n *\n *    - `object`: A map of attributes\n *    - `function`: Takes the url as a parameter and returns a map of attributes\n *\n *    If the map of attributes contains a value for `target`, it overrides the value of\n *    the target parameter.\n *\n *\n * @returns {string} Html-linkified and {@link $sanitize sanitized} text.\n *\n * @usage\n   <span ng-bind-html=\"linky_expression | linky\"></span>\n *\n * @example\n   <example module=\"linkyExample\" deps=\"angular-sanitize.js\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <th>Filter</th>\n           <th>Source</th>\n           <th>Rendered</th>\n         </tr>\n         <tr id=\"linky-filter\">\n           <td>linky filter</td>\n           <td>\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n           </td>\n           <td>\n             <div ng-bind-html=\"snippet | linky\"></div>\n           </td>\n         </tr>\n         <tr id=\"linky-target\">\n          <td>linky target</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"></div>\n          </td>\n         </tr>\n         <tr id=\"linky-custom-attributes\">\n          <td>linky custom attributes</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"></div>\n          </td>\n         </tr>\n         <tr id=\"escaped-html\">\n           <td>no filter</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"script.js\">\n       angular.module('linkyExample', ['ngSanitize'])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.snippet =\n             'Pretty text with some links:\\n'+\n             'http://angularjs.org/,\\n'+\n             'mailto:us@somewhere.org,\\n'+\n             'another@somewhere.org,\\n'+\n             'and one more: ftp://127.0.0.1/.';\n           $scope.snippetWithSingleURL = 'http://angularjs.org/';\n         }]);\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should linkify the snippet with urls', function() {\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\n       });\n\n       it('should not linkify snippet without the linky filter', function() {\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\n       });\n\n       it('should update', function() {\n         element(by.model('snippet')).clear();\n         element(by.model('snippet')).sendKeys('new http://link.');\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('new http://link.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\n             .toBe('new http://link.');\n       });\n\n       it('should work with the target property', function() {\n        expect(element(by.id('linky-target')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_blank'\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\n       });\n\n       it('should optionally add custom attributes', function() {\n        expect(element(by.id('linky-custom-attributes')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');\n       });\n     </file>\n   </example>\n */\nangular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {\n  var LINKY_URL_REGEXP =\n        /((ftp|https?):\\/\\/|(www\\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"\\u201d\\u2019]/i,\n      MAILTO_REGEXP = /^mailto:/i;\n\n  var linkyMinErr = angular.$$minErr('linky');\n  var isString = angular.isString;\n\n  return function(text, target, attributes) {\n    if (text == null || text === '') return text;\n    if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);\n\n    var attributesFn =\n      angular.isFunction(attributes) ? attributes :\n      angular.isObject(attributes) ? function getAttributesObject() {return attributes;} :\n      function getEmptyAttributesObject() {return {};};\n\n    var match;\n    var raw = text;\n    var html = [];\n    var url;\n    var i;\n    while ((match = raw.match(LINKY_URL_REGEXP))) {\n      // We can not end in these as they are sometimes found at the end of the sentence\n      url = match[0];\n      // if we did not match ftp/http/www/mailto then assume mailto\n      if (!match[2] && !match[4]) {\n        url = (match[3] ? 'http://' : 'mailto:') + url;\n      }\n      i = match.index;\n      addText(raw.substr(0, i));\n      addLink(url, match[0].replace(MAILTO_REGEXP, ''));\n      raw = raw.substring(i + match[0].length);\n    }\n    addText(raw);\n    return $sanitize(html.join(''));\n\n    function addText(text) {\n      if (!text) {\n        return;\n      }\n      html.push(sanitizeText(text));\n    }\n\n    function addLink(url, text) {\n      var key, linkAttributes = attributesFn(url);\n      html.push('<a ');\n\n      for (key in linkAttributes) {\n        html.push(key + '=\"' + linkAttributes[key] + '\" ');\n      }\n\n      if (angular.isDefined(target) && !('target' in linkAttributes)) {\n        html.push('target=\"',\n                  target,\n                  '\" ');\n      }\n      html.push('href=\"',\n                url.replace(/\"/g, '&quot;'),\n                '\">');\n      addText(text);\n      html.push('</a>');\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n"]}