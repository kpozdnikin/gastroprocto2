{"version":3,"sources":["angular-animate.js"],"names":[],"mappings":"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","file":"angular-animate-compiled.js","sourcesContent":["/**\n * @license AngularJS v1.5.7\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\n/* jshint ignore:start */\nvar noop        = angular.noop;\nvar copy        = angular.copy;\nvar extend      = angular.extend;\nvar jqLite      = angular.element;\nvar forEach     = angular.forEach;\nvar isArray     = angular.isArray;\nvar isString    = angular.isString;\nvar isObject    = angular.isObject;\nvar isUndefined = angular.isUndefined;\nvar isDefined   = angular.isDefined;\nvar isFunction  = angular.isFunction;\nvar isElement   = angular.isElement;\n\nvar ELEMENT_NODE = 1;\nvar COMMENT_NODE = 8;\n\nvar ADD_CLASS_SUFFIX = '-add';\nvar REMOVE_CLASS_SUFFIX = '-remove';\nvar EVENT_CLASS_PREFIX = 'ng-';\nvar ACTIVE_CLASS_SUFFIX = '-active';\nvar PREPARE_CLASS_SUFFIX = '-prepare';\n\nvar NG_ANIMATE_CLASSNAME = 'ng-animate';\nvar NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';\n\n// Detect proper transitionend/animationend event names.\nvar CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;\n\n// If unprefixed events are not supported but webkit-prefixed are, use the latter.\n// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.\n// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`\n// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.\n// Register both events in case `window.onanimationend` is not supported because of that,\n// do the same for `transitionend` as Safari is likely to exhibit similar behavior.\n// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit\n// therefore there is no reason to test anymore for other vendor prefixes:\n// http://caniuse.com/#search=transition\nif (isUndefined(window.ontransitionend) && isDefined(window.onwebkittransitionend)) {\n  CSS_PREFIX = '-webkit-';\n  TRANSITION_PROP = 'WebkitTransition';\n  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';\n} else {\n  TRANSITION_PROP = 'transition';\n  TRANSITIONEND_EVENT = 'transitionend';\n}\n\nif (isUndefined(window.onanimationend) && isDefined(window.onwebkitanimationend)) {\n  CSS_PREFIX = '-webkit-';\n  ANIMATION_PROP = 'WebkitAnimation';\n  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';\n} else {\n  ANIMATION_PROP = 'animation';\n  ANIMATIONEND_EVENT = 'animationend';\n}\n\nvar DURATION_KEY = 'Duration';\nvar PROPERTY_KEY = 'Property';\nvar DELAY_KEY = 'Delay';\nvar TIMING_KEY = 'TimingFunction';\nvar ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';\nvar ANIMATION_PLAYSTATE_KEY = 'PlayState';\nvar SAFE_FAST_FORWARD_DURATION_VALUE = 9999;\n\nvar ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;\nvar ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;\nvar TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;\nvar TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;\n\nvar isPromiseLike = function(p) {\n  return p && p.then ? true : false;\n};\n\nvar ngMinErr = angular.$$minErr('ng');\nfunction assertArg(arg, name, reason) {\n  if (!arg) {\n    throw ngMinErr('areq', \"Argument '{0}' is {1}\", (name || '?'), (reason || \"required\"));\n  }\n  return arg;\n}\n\nfunction mergeClasses(a,b) {\n  if (!a && !b) return '';\n  if (!a) return b;\n  if (!b) return a;\n  if (isArray(a)) a = a.join(' ');\n  if (isArray(b)) b = b.join(' ');\n  return a + ' ' + b;\n}\n\nfunction packageStyles(options) {\n  var styles = {};\n  if (options && (options.to || options.from)) {\n    styles.to = options.to;\n    styles.from = options.from;\n  }\n  return styles;\n}\n\nfunction pendClasses(classes, fix, isPrefix) {\n  var className = '';\n  classes = isArray(classes)\n      ? classes\n      : classes && isString(classes) && classes.length\n          ? classes.split(/\\s+/)\n          : [];\n  forEach(classes, function(klass, i) {\n    if (klass && klass.length > 0) {\n      className += (i > 0) ? ' ' : '';\n      className += isPrefix ? fix + klass\n                            : klass + fix;\n    }\n  });\n  return className;\n}\n\nfunction removeFromArray(arr, val) {\n  var index = arr.indexOf(val);\n  if (val >= 0) {\n    arr.splice(index, 1);\n  }\n}\n\nfunction stripCommentsFromElement(element) {\n  if (element instanceof jqLite) {\n    switch (element.length) {\n      case 0:\n        return element;\n        break;\n\n      case 1:\n        // there is no point of stripping anything if the element\n        // is the only element within the jqLite wrapper.\n        // (it's important that we retain the element instance.)\n        if (element[0].nodeType === ELEMENT_NODE) {\n          return element;\n        }\n        break;\n\n      default:\n        return jqLite(extractElementNode(element));\n        break;\n    }\n  }\n\n  if (element.nodeType === ELEMENT_NODE) {\n    return jqLite(element);\n  }\n}\n\nfunction extractElementNode(element) {\n  if (!element[0]) return element;\n  for (var i = 0; i < element.length; i++) {\n    var elm = element[i];\n    if (elm.nodeType == ELEMENT_NODE) {\n      return elm;\n    }\n  }\n}\n\nfunction $$addClass($$jqLite, element, className) {\n  forEach(element, function(elm) {\n    $$jqLite.addClass(elm, className);\n  });\n}\n\nfunction $$removeClass($$jqLite, element, className) {\n  forEach(element, function(elm) {\n    $$jqLite.removeClass(elm, className);\n  });\n}\n\nfunction applyAnimationClassesFactory($$jqLite) {\n  return function(element, options) {\n    if (options.addClass) {\n      $$addClass($$jqLite, element, options.addClass);\n      options.addClass = null;\n    }\n    if (options.removeClass) {\n      $$removeClass($$jqLite, element, options.removeClass);\n      options.removeClass = null;\n    }\n  }\n}\n\nfunction prepareAnimationOptions(options) {\n  options = options || {};\n  if (!options.$$prepared) {\n    var domOperation = options.domOperation || noop;\n    options.domOperation = function() {\n      options.$$domOperationFired = true;\n      domOperation();\n      domOperation = noop;\n    };\n    options.$$prepared = true;\n  }\n  return options;\n}\n\nfunction applyAnimationStyles(element, options) {\n  applyAnimationFromStyles(element, options);\n  applyAnimationToStyles(element, options);\n}\n\nfunction applyAnimationFromStyles(element, options) {\n  if (options.from) {\n    element.css(options.from);\n    options.from = null;\n  }\n}\n\nfunction applyAnimationToStyles(element, options) {\n  if (options.to) {\n    element.css(options.to);\n    options.to = null;\n  }\n}\n\nfunction mergeAnimationDetails(element, oldAnimation, newAnimation) {\n  var target = oldAnimation.options || {};\n  var newOptions = newAnimation.options || {};\n\n  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');\n  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');\n  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);\n\n  if (newOptions.preparationClasses) {\n    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);\n    delete newOptions.preparationClasses;\n  }\n\n  // noop is basically when there is no callback; otherwise something has been set\n  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;\n\n  extend(target, newOptions);\n\n  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.\n  if (realDomOperation) {\n    target.domOperation = realDomOperation;\n  }\n\n  if (classes.addClass) {\n    target.addClass = classes.addClass;\n  } else {\n    target.addClass = null;\n  }\n\n  if (classes.removeClass) {\n    target.removeClass = classes.removeClass;\n  } else {\n    target.removeClass = null;\n  }\n\n  oldAnimation.addClass = target.addClass;\n  oldAnimation.removeClass = target.removeClass;\n\n  return target;\n}\n\nfunction resolveElementClasses(existing, toAdd, toRemove) {\n  var ADD_CLASS = 1;\n  var REMOVE_CLASS = -1;\n\n  var flags = {};\n  existing = splitClassesToLookup(existing);\n\n  toAdd = splitClassesToLookup(toAdd);\n  forEach(toAdd, function(value, key) {\n    flags[key] = ADD_CLASS;\n  });\n\n  toRemove = splitClassesToLookup(toRemove);\n  forEach(toRemove, function(value, key) {\n    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;\n  });\n\n  var classes = {\n    addClass: '',\n    removeClass: ''\n  };\n\n  forEach(flags, function(val, klass) {\n    var prop, allow;\n    if (val === ADD_CLASS) {\n      prop = 'addClass';\n      allow = !existing[klass];\n    } else if (val === REMOVE_CLASS) {\n      prop = 'removeClass';\n      allow = existing[klass];\n    }\n    if (allow) {\n      if (classes[prop].length) {\n        classes[prop] += ' ';\n      }\n      classes[prop] += klass;\n    }\n  });\n\n  function splitClassesToLookup(classes) {\n    if (isString(classes)) {\n      classes = classes.split(' ');\n    }\n\n    var obj = {};\n    forEach(classes, function(klass) {\n      // sometimes the split leaves empty string values\n      // incase extra spaces were applied to the options\n      if (klass.length) {\n        obj[klass] = true;\n      }\n    });\n    return obj;\n  }\n\n  return classes;\n}\n\nfunction getDomNode(element) {\n  return (element instanceof angular.element) ? element[0] : element;\n}\n\nfunction applyGeneratedPreparationClasses(element, event, options) {\n  var classes = '';\n  if (event) {\n    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);\n  }\n  if (options.addClass) {\n    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));\n  }\n  if (options.removeClass) {\n    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));\n  }\n  if (classes.length) {\n    options.preparationClasses = classes;\n    element.addClass(classes);\n  }\n}\n\nfunction clearGeneratedClasses(element, options) {\n  if (options.preparationClasses) {\n    element.removeClass(options.preparationClasses);\n    options.preparationClasses = null;\n  }\n  if (options.activeClasses) {\n    element.removeClass(options.activeClasses);\n    options.activeClasses = null;\n  }\n}\n\nfunction blockTransitions(node, duration) {\n  // we use a negative delay value since it performs blocking\n  // yet it doesn't kill any existing transitions running on the\n  // same element which makes this safe for class-based animations\n  var value = duration ? '-' + duration + 's' : '';\n  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);\n  return [TRANSITION_DELAY_PROP, value];\n}\n\nfunction blockKeyframeAnimations(node, applyBlock) {\n  var value = applyBlock ? 'paused' : '';\n  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;\n  applyInlineStyle(node, [key, value]);\n  return [key, value];\n}\n\nfunction applyInlineStyle(node, styleTuple) {\n  var prop = styleTuple[0];\n  var value = styleTuple[1];\n  node.style[prop] = value;\n}\n\nfunction concatWithSpace(a,b) {\n  if (!a) return b;\n  if (!b) return a;\n  return a + ' ' + b;\n}\n\nvar $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {\n  var queue, cancelFn;\n\n  function scheduler(tasks) {\n    // we make a copy since RAFScheduler mutates the state\n    // of the passed in array variable and this would be difficult\n    // to track down on the outside code\n    queue = queue.concat(tasks);\n    nextTick();\n  }\n\n  queue = scheduler.queue = [];\n\n  /* waitUntilQuiet does two things:\n   * 1. It will run the FINAL `fn` value only when an uncanceled RAF has passed through\n   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.\n   *\n   * The motivation here is that animation code can request more time from the scheduler\n   * before the next wave runs. This allows for certain DOM properties such as classes to\n   * be resolved in time for the next animation to run.\n   */\n  scheduler.waitUntilQuiet = function(fn) {\n    if (cancelFn) cancelFn();\n\n    cancelFn = $$rAF(function() {\n      cancelFn = null;\n      fn();\n      nextTick();\n    });\n  };\n\n  return scheduler;\n\n  function nextTick() {\n    if (!queue.length) return;\n\n    var items = queue.shift();\n    for (var i = 0; i < items.length; i++) {\n      items[i]();\n    }\n\n    if (!cancelFn) {\n      $$rAF(function() {\n        if (!cancelFn) nextTick();\n      });\n    }\n  }\n}];\n\n/**\n * @ngdoc directive\n * @name ngAnimateChildren\n * @restrict AE\n * @element ANY\n *\n * @description\n *\n * ngAnimateChildren allows you to specify that children of this element should animate even if any\n * of the children's parents are currently animating. By default, when an element has an active `enter`, `leave`, or `move`\n * (structural) animation, child elements that also have an active structural animation are not animated.\n *\n * Note that even if `ngAnimteChildren` is set, no child animations will run when the parent element is removed from the DOM (`leave` animation).\n *\n *\n * @param {string} ngAnimateChildren If the value is empty, `true` or `on`,\n *     then child animations are allowed. If the value is `false`, child animations are not allowed.\n *\n * @example\n * <example module=\"ngAnimateChildren\" name=\"ngAnimateChildren\" deps=\"angular-animate.js\" animations=\"true\">\n     <file name=\"index.html\">\n       <div ng-controller=\"mainController as main\">\n         <label>Show container? <input type=\"checkbox\" ng-model=\"main.enterElement\" /></label>\n         <label>Animate children? <input type=\"checkbox\" ng-model=\"main.animateChildren\" /></label>\n         <hr>\n         <div ng-animate-children=\"{{main.animateChildren}}\">\n           <div ng-if=\"main.enterElement\" class=\"container\">\n             List of items:\n             <div ng-repeat=\"item in [0, 1, 2, 3]\" class=\"item\">Item {{item}}</div>\n           </div>\n         </div>\n       </div>\n     </file>\n     <file name=\"animations.css\">\n\n      .container.ng-enter,\n      .container.ng-leave {\n        transition: all ease 1.5s;\n      }\n\n      .container.ng-enter,\n      .container.ng-leave-active {\n        opacity: 0;\n      }\n\n      .container.ng-leave,\n      .container.ng-enter-active {\n        opacity: 1;\n      }\n\n      .item {\n        background: firebrick;\n        color: #FFF;\n        margin-bottom: 10px;\n      }\n\n      .item.ng-enter,\n      .item.ng-leave {\n        transition: transform 1.5s ease;\n      }\n\n      .item.ng-enter {\n        transform: translateX(50px);\n      }\n\n      .item.ng-enter-active {\n        transform: translateX(0);\n      }\n    </file>\n    <file name=\"script.js\">\n      angular.module('ngAnimateChildren', ['ngAnimate'])\n        .controller('mainController', function() {\n          this.animateChildren = false;\n          this.enterElement = false;\n        });\n    </file>\n  </example>\n */\nvar $$AnimateChildrenDirective = ['$interpolate', function($interpolate) {\n  return {\n    link: function(scope, element, attrs) {\n      var val = attrs.ngAnimateChildren;\n      if (angular.isString(val) && val.length === 0) { //empty attribute\n        element.data(NG_ANIMATE_CHILDREN_DATA, true);\n      } else {\n        // Interpolate and set the value, so that it is available to\n        // animations that run right after compilation\n        setData($interpolate(val)(scope));\n        attrs.$observe('ngAnimateChildren', setData);\n      }\n\n      function setData(value) {\n        value = value === 'on' || value === 'true';\n        element.data(NG_ANIMATE_CHILDREN_DATA, value);\n      }\n    }\n  };\n}];\n\nvar ANIMATE_TIMER_KEY = '$$animateCss';\n\n/**\n * @ngdoc service\n * @name $animateCss\n * @kind object\n *\n * @description\n * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes\n * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT\n * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or\n * directives to create more complex animations that can be purely driven using CSS code.\n *\n * Note that only browsers that support CSS transitions and/or keyframe animations are capable of\n * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).\n *\n * ## Usage\n * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that\n * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,\n * any automatic control over cancelling animations and/or preventing animations from being run on\n * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to\n * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger\n * the CSS animation.\n *\n * The example below shows how we can create a folding animation on an element using `ng-if`:\n *\n * ```html\n * <!-- notice the `fold-animation` CSS class -->\n * <div ng-if=\"onOff\" class=\"fold-animation\">\n *   This element will go BOOM\n * </div>\n * <button ng-click=\"onOff=true\">Fold In</button>\n * ```\n *\n * Now we create the **JavaScript animation** that will trigger the CSS transition:\n *\n * ```js\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var height = element[0].offsetHeight;\n *       return $animateCss(element, {\n *         from: { height:'0px' },\n *         to: { height:height + 'px' },\n *         duration: 1 // one second\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * ## More Advanced Uses\n *\n * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks\n * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.\n *\n * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,\n * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with\n * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order\n * to provide a working animation that will run in CSS.\n *\n * The example below showcases a more advanced version of the `.fold-animation` from the example above:\n *\n * ```js\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var height = element[0].offsetHeight;\n *       return $animateCss(element, {\n *         addClass: 'red large-text pulse-twice',\n *         easing: 'ease-out',\n *         from: { height:'0px' },\n *         to: { height:height + 'px' },\n *         duration: 1 // one second\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * Since we're adding/removing CSS classes then the CSS transition will also pick those up:\n *\n * ```css\n * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,\n * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/\n * .red { background:red; }\n * .large-text { font-size:20px; }\n *\n * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/\n * .pulse-twice {\n *   animation: 0.5s pulse linear 2;\n *   -webkit-animation: 0.5s pulse linear 2;\n * }\n *\n * @keyframes pulse {\n *   from { transform: scale(0.5); }\n *   to { transform: scale(1.5); }\n * }\n *\n * @-webkit-keyframes pulse {\n *   from { -webkit-transform: scale(0.5); }\n *   to { -webkit-transform: scale(1.5); }\n * }\n * ```\n *\n * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.\n *\n * ## How the Options are handled\n *\n * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation\n * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline\n * styles using the `from` and `to` properties.\n *\n * ```js\n * var animator = $animateCss(element, {\n *   from: { background:'red' },\n *   to: { background:'blue' }\n * });\n * animator.start();\n * ```\n *\n * ```css\n * .rotating-animation {\n *   animation:0.5s rotate linear;\n *   -webkit-animation:0.5s rotate linear;\n * }\n *\n * @keyframes rotate {\n *   from { transform: rotate(0deg); }\n *   to { transform: rotate(360deg); }\n * }\n *\n * @-webkit-keyframes rotate {\n *   from { -webkit-transform: rotate(0deg); }\n *   to { -webkit-transform: rotate(360deg); }\n * }\n * ```\n *\n * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is\n * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition\n * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition\n * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied\n * and spread across the transition and keyframe animation.\n *\n * ## What is returned\n *\n * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually\n * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are\n * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:\n *\n * ```js\n * var animator = $animateCss(element, { ... });\n * ```\n *\n * Now what do the contents of our `animator` variable look like:\n *\n * ```js\n * {\n *   // starts the animation\n *   start: Function,\n *\n *   // ends (aborts) the animation\n *   end: Function\n * }\n * ```\n *\n * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.\n * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and styles may have been\n * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties\n * and that changing them will not reconfigure the parameters of the animation.\n *\n * ### runner.done() vs runner.then()\n * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the\n * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.\n * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`\n * unless you really need a digest to kick off afterwards.\n *\n * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss\n * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).\n * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.\n *\n * @param {DOMElement} element the element that will be animated\n * @param {object} options the animation-related options that will be applied during the animation\n *\n * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied\n * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)\n * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and\n * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.\n * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).\n * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).\n * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).\n * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.\n * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.\n * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.\n * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.\n * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`\n * is provided then the animation will be skipped entirely.\n * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is\n * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value\n * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same\n * CSS delay value.\n * * `stagger` - A numeric time value representing the delay between successively animated elements\n * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})\n * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a\n *   `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)\n * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)\n * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once\n *    the animation is closed. This is useful for when the styles are used purely for the sake of\n *    the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation).\n *    By default this value is set to `false`.\n *\n * @return {object} an object with start and end methods and details about the animation.\n *\n * * `start` - The method to start the animation. This will return a `Promise` when called.\n * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.\n */\nvar ONE_SECOND = 1000;\nvar BASE_TEN = 10;\n\nvar ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\nvar CLOSING_TIME_BUFFER = 1.5;\n\nvar DETECT_CSS_PROPERTIES = {\n  transitionDuration:      TRANSITION_DURATION_PROP,\n  transitionDelay:         TRANSITION_DELAY_PROP,\n  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,\n  animationDuration:       ANIMATION_DURATION_PROP,\n  animationDelay:          ANIMATION_DELAY_PROP,\n  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY\n};\n\nvar DETECT_STAGGER_CSS_PROPERTIES = {\n  transitionDuration:      TRANSITION_DURATION_PROP,\n  transitionDelay:         TRANSITION_DELAY_PROP,\n  animationDuration:       ANIMATION_DURATION_PROP,\n  animationDelay:          ANIMATION_DELAY_PROP\n};\n\nfunction getCssKeyframeDurationStyle(duration) {\n  return [ANIMATION_DURATION_PROP, duration + 's'];\n}\n\nfunction getCssDelayStyle(delay, isKeyframeAnimation) {\n  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;\n  return [prop, delay + 's'];\n}\n\nfunction computeCssStyles($window, element, properties) {\n  var styles = Object.create(null);\n  var detectedStyles = $window.getComputedStyle(element) || {};\n  forEach(properties, function(formalStyleName, actualStyleName) {\n    var val = detectedStyles[formalStyleName];\n    if (val) {\n      var c = val.charAt(0);\n\n      // only numerical-based values have a negative sign or digit as the first value\n      if (c === '-' || c === '+' || c >= 0) {\n        val = parseMaxTime(val);\n      }\n\n      // by setting this to null in the event that the delay is not set or is set directly as 0\n      // then we can still allow for negative values to be used later on and not mistake this\n      // value for being greater than any other negative value.\n      if (val === 0) {\n        val = null;\n      }\n      styles[actualStyleName] = val;\n    }\n  });\n\n  return styles;\n}\n\nfunction parseMaxTime(str) {\n  var maxValue = 0;\n  var values = str.split(/\\s*,\\s*/);\n  forEach(values, function(value) {\n    // it's always safe to consider only second values and omit `ms` values since\n    // getComputedStyle will always handle the conversion for us\n    if (value.charAt(value.length - 1) == 's') {\n      value = value.substring(0, value.length - 1);\n    }\n    value = parseFloat(value) || 0;\n    maxValue = maxValue ? Math.max(value, maxValue) : value;\n  });\n  return maxValue;\n}\n\nfunction truthyTimingValue(val) {\n  return val === 0 || val != null;\n}\n\nfunction getCssTransitionDurationStyle(duration, applyOnlyDuration) {\n  var style = TRANSITION_PROP;\n  var value = duration + 's';\n  if (applyOnlyDuration) {\n    style += DURATION_KEY;\n  } else {\n    value += ' linear all';\n  }\n  return [style, value];\n}\n\nfunction createLocalCacheLookup() {\n  var cache = Object.create(null);\n  return {\n    flush: function() {\n      cache = Object.create(null);\n    },\n\n    count: function(key) {\n      var entry = cache[key];\n      return entry ? entry.total : 0;\n    },\n\n    get: function(key) {\n      var entry = cache[key];\n      return entry && entry.value;\n    },\n\n    put: function(key, value) {\n      if (!cache[key]) {\n        cache[key] = { total: 1, value: value };\n      } else {\n        cache[key].total++;\n      }\n    }\n  };\n}\n\n// we do not reassign an already present style value since\n// if we detect the style property value again we may be\n// detecting styles that were added via the `from` styles.\n// We make use of `isDefined` here since an empty string\n// or null value (which is what getPropertyValue will return\n// for a non-existing style) will still be marked as a valid\n// value for the style (a falsy value implies that the style\n// is to be removed at the end of the animation). If we had a simple\n// \"OR\" statement then it would not be enough to catch that.\nfunction registerRestorableStyles(backup, node, properties) {\n  forEach(properties, function(prop) {\n    backup[prop] = isDefined(backup[prop])\n        ? backup[prop]\n        : node.style.getPropertyValue(prop);\n  });\n}\n\nvar $AnimateCssProvider = ['$animateProvider', function($animateProvider) {\n  var gcsLookup = createLocalCacheLookup();\n  var gcsStaggerLookup = createLocalCacheLookup();\n\n  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',\n               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue',\n       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,\n                $$forceReflow,   $sniffer,   $$rAFScheduler, $$animateQueue) {\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    var parentCounter = 0;\n    function gcsHashFn(node, extraClasses) {\n      var KEY = \"$$ngAnimateParentKey\";\n      var parentNode = node.parentNode;\n      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);\n      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;\n    }\n\n    function computeCachedCssStyles(node, className, cacheKey, properties) {\n      var timings = gcsLookup.get(cacheKey);\n\n      if (!timings) {\n        timings = computeCssStyles($window, node, properties);\n        if (timings.animationIterationCount === 'infinite') {\n          timings.animationIterationCount = 1;\n        }\n      }\n\n      // we keep putting this in multiple times even though the value and the cacheKey are the same\n      // because we're keeping an internal tally of how many duplicate animations are detected.\n      gcsLookup.put(cacheKey, timings);\n      return timings;\n    }\n\n    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {\n      var stagger;\n\n      // if we have one or more existing matches of matching elements\n      // containing the same parent + CSS styles (which is how cacheKey works)\n      // then staggering is possible\n      if (gcsLookup.count(cacheKey) > 0) {\n        stagger = gcsStaggerLookup.get(cacheKey);\n\n        if (!stagger) {\n          var staggerClassName = pendClasses(className, '-stagger');\n\n          $$jqLite.addClass(node, staggerClassName);\n\n          stagger = computeCssStyles($window, node, properties);\n\n          // force the conversion of a null value to zero incase not set\n          stagger.animationDuration = Math.max(stagger.animationDuration, 0);\n          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);\n\n          $$jqLite.removeClass(node, staggerClassName);\n\n          gcsStaggerLookup.put(cacheKey, stagger);\n        }\n      }\n\n      return stagger || {};\n    }\n\n    var cancelLastRAFRequest;\n    var rafWaitQueue = [];\n    function waitUntilQuiet(callback) {\n      rafWaitQueue.push(callback);\n      $$rAFScheduler.waitUntilQuiet(function() {\n        gcsLookup.flush();\n        gcsStaggerLookup.flush();\n\n        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.\n        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.\n        var pageWidth = $$forceReflow();\n\n        // we use a for loop to ensure that if the queue is changed\n        // during this looping then it will consider new requests\n        for (var i = 0; i < rafWaitQueue.length; i++) {\n          rafWaitQueue[i](pageWidth);\n        }\n        rafWaitQueue.length = 0;\n      });\n    }\n\n    function computeTimings(node, className, cacheKey) {\n      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);\n      var aD = timings.animationDelay;\n      var tD = timings.transitionDelay;\n      timings.maxDelay = aD && tD\n          ? Math.max(aD, tD)\n          : (aD || tD);\n      timings.maxDuration = Math.max(\n          timings.animationDuration * timings.animationIterationCount,\n          timings.transitionDuration);\n\n      return timings;\n    }\n\n    return function init(element, initialOptions) {\n      // all of the animation functions should create\n      // a copy of the options data, however, if a\n      // parent service has already created a copy then\n      // we should stick to using that\n      var options = initialOptions || {};\n      if (!options.$$prepared) {\n        options = prepareAnimationOptions(copy(options));\n      }\n\n      var restoreStyles = {};\n      var node = getDomNode(element);\n      if (!node\n          || !node.parentNode\n          || !$$animateQueue.enabled()) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var temporaryStyles = [];\n      var classes = element.attr('class');\n      var styles = packageStyles(options);\n      var animationClosed;\n      var animationPaused;\n      var animationCompleted;\n      var runner;\n      var runnerHost;\n      var maxDelay;\n      var maxDelayTime;\n      var maxDuration;\n      var maxDurationTime;\n      var startTime;\n      var events = [];\n\n      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var method = options.event && isArray(options.event)\n            ? options.event.join(' ')\n            : options.event;\n\n      var isStructural = method && options.structural;\n      var structuralClassName = '';\n      var addRemoveClassName = '';\n\n      if (isStructural) {\n        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);\n      } else if (method) {\n        structuralClassName = method;\n      }\n\n      if (options.addClass) {\n        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);\n      }\n\n      if (options.removeClass) {\n        if (addRemoveClassName.length) {\n          addRemoveClassName += ' ';\n        }\n        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);\n      }\n\n      // there may be a situation where a structural animation is combined together\n      // with CSS classes that need to resolve before the animation is computed.\n      // However this means that there is no explicit CSS code to block the animation\n      // from happening (by setting 0s none in the class name). If this is the case\n      // we need to apply the classes before the first rAF so we know to continue if\n      // there actually is a detected transition or keyframe animation\n      if (options.applyClassesEarly && addRemoveClassName.length) {\n        applyAnimationClasses(element, options);\n      }\n\n      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();\n      var fullClassName = classes + ' ' + preparationClasses;\n      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);\n      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;\n      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;\n\n      // there is no way we can trigger an animation if no styles and\n      // no classes are being applied which would then trigger a transition,\n      // unless there a is raw keyframe value that is applied to the element.\n      if (!containsKeyframeAnimation\n           && !hasToStyles\n           && !preparationClasses) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var cacheKey, stagger;\n      if (options.stagger > 0) {\n        var staggerVal = parseFloat(options.stagger);\n        stagger = {\n          transitionDelay: staggerVal,\n          animationDelay: staggerVal,\n          transitionDuration: 0,\n          animationDuration: 0\n        };\n      } else {\n        cacheKey = gcsHashFn(node, fullClassName);\n        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);\n      }\n\n      if (!options.$$skipPreparationClasses) {\n        $$jqLite.addClass(element, preparationClasses);\n      }\n\n      var applyOnlyDuration;\n\n      if (options.transitionStyle) {\n        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];\n        applyInlineStyle(node, transitionStyle);\n        temporaryStyles.push(transitionStyle);\n      }\n\n      if (options.duration >= 0) {\n        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;\n        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);\n\n        // we set the duration so that it will be picked up by getComputedStyle later\n        applyInlineStyle(node, durationStyle);\n        temporaryStyles.push(durationStyle);\n      }\n\n      if (options.keyframeStyle) {\n        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];\n        applyInlineStyle(node, keyframeStyle);\n        temporaryStyles.push(keyframeStyle);\n      }\n\n      var itemIndex = stagger\n          ? options.staggerIndex >= 0\n              ? options.staggerIndex\n              : gcsLookup.count(cacheKey)\n          : 0;\n\n      var isFirst = itemIndex === 0;\n\n      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY\n      // without causing any combination of transitions to kick in. By adding a negative delay value\n      // it forces the setup class' transition to end immediately. We later then remove the negative\n      // transition delay to allow for the transition to naturally do it's thing. The beauty here is\n      // that if there is no transition defined then nothing will happen and this will also allow\n      // other transitions to be stacked on top of each other without any chopping them out.\n      if (isFirst && !options.skipBlocking) {\n        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);\n      }\n\n      var timings = computeTimings(node, fullClassName, cacheKey);\n      var relativeDelay = timings.maxDelay;\n      maxDelay = Math.max(relativeDelay, 0);\n      maxDuration = timings.maxDuration;\n\n      var flags = {};\n      flags.hasTransitions          = timings.transitionDuration > 0;\n      flags.hasAnimations           = timings.animationDuration > 0;\n      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty == 'all';\n      flags.applyTransitionDuration = hasToStyles && (\n                                        (flags.hasTransitions && !flags.hasTransitionAll)\n                                         || (flags.hasAnimations && !flags.hasTransitions));\n      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;\n      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);\n      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;\n      flags.recalculateTimingStyles = addRemoveClassName.length > 0;\n\n      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {\n        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;\n\n        if (flags.applyTransitionDuration) {\n          flags.hasTransitions = true;\n          timings.transitionDuration = maxDuration;\n          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;\n          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));\n        }\n\n        if (flags.applyAnimationDuration) {\n          flags.hasAnimations = true;\n          timings.animationDuration = maxDuration;\n          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));\n        }\n      }\n\n      if (maxDuration === 0 && !flags.recalculateTimingStyles) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      if (options.delay != null) {\n        var delayStyle;\n        if (typeof options.delay !== \"boolean\") {\n          delayStyle = parseFloat(options.delay);\n          // number in options.delay means we have to recalculate the delay for the closing timeout\n          maxDelay = Math.max(delayStyle, 0);\n        }\n\n        if (flags.applyTransitionDelay) {\n          temporaryStyles.push(getCssDelayStyle(delayStyle));\n        }\n\n        if (flags.applyAnimationDelay) {\n          temporaryStyles.push(getCssDelayStyle(delayStyle, true));\n        }\n      }\n\n      // we need to recalculate the delay value since we used a pre-emptive negative\n      // delay value and the delay value is required for the final event checking. This\n      // property will ensure that this will happen after the RAF phase has passed.\n      if (options.duration == null && timings.transitionDuration > 0) {\n        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;\n      }\n\n      maxDelayTime = maxDelay * ONE_SECOND;\n      maxDurationTime = maxDuration * ONE_SECOND;\n      if (!options.skipBlocking) {\n        flags.blockTransition = timings.transitionDuration > 0;\n        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&\n                                       stagger.animationDelay > 0 &&\n                                       stagger.animationDuration === 0;\n      }\n\n      if (options.from) {\n        if (options.cleanupStyles) {\n          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));\n        }\n        applyAnimationFromStyles(element, options);\n      }\n\n      if (flags.blockTransition || flags.blockKeyframeAnimation) {\n        applyBlocking(maxDuration);\n      } else if (!options.skipBlocking) {\n        blockTransitions(node, false);\n      }\n\n      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging\n      return {\n        $$willAnimate: true,\n        end: endFn,\n        start: function() {\n          if (animationClosed) return;\n\n          runnerHost = {\n            end: endFn,\n            cancel: cancelFn,\n            resume: null, //this will be set during the start() phase\n            pause: null\n          };\n\n          runner = new $$AnimateRunner(runnerHost);\n\n          waitUntilQuiet(start);\n\n          // we don't have access to pause/resume the animation\n          // since it hasn't run yet. AnimateRunner will therefore\n          // set noop functions for resume and pause and they will\n          // later be overridden once the animation is triggered\n          return runner;\n        }\n      };\n\n      function endFn() {\n        close();\n      }\n\n      function cancelFn() {\n        close(true);\n      }\n\n      function close(rejected) { // jshint ignore:line\n        // if the promise has been called already then we shouldn't close\n        // the animation again\n        if (animationClosed || (animationCompleted && animationPaused)) return;\n        animationClosed = true;\n        animationPaused = false;\n\n        if (!options.$$skipPreparationClasses) {\n          $$jqLite.removeClass(element, preparationClasses);\n        }\n        $$jqLite.removeClass(element, activeClasses);\n\n        blockKeyframeAnimations(node, false);\n        blockTransitions(node, false);\n\n        forEach(temporaryStyles, function(entry) {\n          // There is only one way to remove inline style properties entirely from elements.\n          // By using `removeProperty` this works, but we need to convert camel-cased CSS\n          // styles down to hyphenated values.\n          node.style[entry[0]] = '';\n        });\n\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n\n        if (Object.keys(restoreStyles).length) {\n          forEach(restoreStyles, function(value, prop) {\n            value ? node.style.setProperty(prop, value)\n                  : node.style.removeProperty(prop);\n          });\n        }\n\n        // the reason why we have this option is to allow a synchronous closing callback\n        // that is fired as SOON as the animation ends (when the CSS is removed) or if\n        // the animation never takes off at all. A good example is a leave animation since\n        // the element must be removed just after the animation is over or else the element\n        // will appear on screen for one animation frame causing an overbearing flicker.\n        if (options.onDone) {\n          options.onDone();\n        }\n\n        if (events && events.length) {\n          // Remove the transitionend / animationend listener(s)\n          element.off(events.join(' '), onAnimationProgress);\n        }\n\n        //Cancel the fallback closing timeout and remove the timer data\n        var animationTimerData = element.data(ANIMATE_TIMER_KEY);\n        if (animationTimerData) {\n          $timeout.cancel(animationTimerData[0].timer);\n          element.removeData(ANIMATE_TIMER_KEY);\n        }\n\n        // if the preparation function fails then the promise is not setup\n        if (runner) {\n          runner.complete(!rejected);\n        }\n      }\n\n      function applyBlocking(duration) {\n        if (flags.blockTransition) {\n          blockTransitions(node, duration);\n        }\n\n        if (flags.blockKeyframeAnimation) {\n          blockKeyframeAnimations(node, !!duration);\n        }\n      }\n\n      function closeAndReturnNoopAnimator() {\n        runner = new $$AnimateRunner({\n          end: endFn,\n          cancel: cancelFn\n        });\n\n        // should flush the cache animation\n        waitUntilQuiet(noop);\n        close();\n\n        return {\n          $$willAnimate: false,\n          start: function() {\n            return runner;\n          },\n          end: endFn\n        };\n      }\n\n      function onAnimationProgress(event) {\n        event.stopPropagation();\n        var ev = event.originalEvent || event;\n\n        // we now always use `Date.now()` due to the recent changes with\n        // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)\n        var timeStamp = ev.$manualTimeStamp || Date.now();\n\n        /* Firefox (or possibly just Gecko) likes to not round values up\n         * when a ms measurement is used for the animation */\n        var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));\n\n        /* $manualTimeStamp is a mocked timeStamp value which is set\n         * within browserTrigger(). This is only here so that tests can\n         * mock animations properly. Real events fallback to event.timeStamp,\n         * or, if they don't, then a timeStamp is automatically created for them.\n         * We're checking to see if the timeStamp surpasses the expected delay,\n         * but we're using elapsedTime instead of the timeStamp on the 2nd\n         * pre-condition since animationPauseds sometimes close off early */\n        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {\n          // we set this flag to ensure that if the transition is paused then, when resumed,\n          // the animation will automatically close itself since transitions cannot be paused.\n          animationCompleted = true;\n          close();\n        }\n      }\n\n      function start() {\n        if (animationClosed) return;\n        if (!node.parentNode) {\n          close();\n          return;\n        }\n\n        // even though we only pause keyframe animations here the pause flag\n        // will still happen when transitions are used. Only the transition will\n        // not be paused since that is not possible. If the animation ends when\n        // paused then it will not complete until unpaused or cancelled.\n        var playPause = function(playAnimation) {\n          if (!animationCompleted) {\n            animationPaused = !playAnimation;\n            if (timings.animationDuration) {\n              var value = blockKeyframeAnimations(node, animationPaused);\n              animationPaused\n                  ? temporaryStyles.push(value)\n                  : removeFromArray(temporaryStyles, value);\n            }\n          } else if (animationPaused && playAnimation) {\n            animationPaused = false;\n            close();\n          }\n        };\n\n        // checking the stagger duration prevents an accidentally cascade of the CSS delay style\n        // being inherited from the parent. If the transition duration is zero then we can safely\n        // rely that the delay value is an intentional stagger delay style.\n        var maxStagger = itemIndex > 0\n                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||\n                            (timings.animationDuration && stagger.animationDuration === 0))\n                         && Math.max(stagger.animationDelay, stagger.transitionDelay);\n        if (maxStagger) {\n          $timeout(triggerAnimationStart,\n                   Math.floor(maxStagger * itemIndex * ONE_SECOND),\n                   false);\n        } else {\n          triggerAnimationStart();\n        }\n\n        // this will decorate the existing promise runner with pause/resume methods\n        runnerHost.resume = function() {\n          playPause(true);\n        };\n\n        runnerHost.pause = function() {\n          playPause(false);\n        };\n\n        function triggerAnimationStart() {\n          // just incase a stagger animation kicks in when the animation\n          // itself was cancelled entirely\n          if (animationClosed) return;\n\n          applyBlocking(false);\n\n          forEach(temporaryStyles, function(entry) {\n            var key = entry[0];\n            var value = entry[1];\n            node.style[key] = value;\n          });\n\n          applyAnimationClasses(element, options);\n          $$jqLite.addClass(element, activeClasses);\n\n          if (flags.recalculateTimingStyles) {\n            fullClassName = node.className + ' ' + preparationClasses;\n            cacheKey = gcsHashFn(node, fullClassName);\n\n            timings = computeTimings(node, fullClassName, cacheKey);\n            relativeDelay = timings.maxDelay;\n            maxDelay = Math.max(relativeDelay, 0);\n            maxDuration = timings.maxDuration;\n\n            if (maxDuration === 0) {\n              close();\n              return;\n            }\n\n            flags.hasTransitions = timings.transitionDuration > 0;\n            flags.hasAnimations = timings.animationDuration > 0;\n          }\n\n          if (flags.applyAnimationDelay) {\n            relativeDelay = typeof options.delay !== \"boolean\" && truthyTimingValue(options.delay)\n                  ? parseFloat(options.delay)\n                  : relativeDelay;\n\n            maxDelay = Math.max(relativeDelay, 0);\n            timings.animationDelay = relativeDelay;\n            delayStyle = getCssDelayStyle(relativeDelay, true);\n            temporaryStyles.push(delayStyle);\n            node.style[delayStyle[0]] = delayStyle[1];\n          }\n\n          maxDelayTime = maxDelay * ONE_SECOND;\n          maxDurationTime = maxDuration * ONE_SECOND;\n\n          if (options.easing) {\n            var easeProp, easeVal = options.easing;\n            if (flags.hasTransitions) {\n              easeProp = TRANSITION_PROP + TIMING_KEY;\n              temporaryStyles.push([easeProp, easeVal]);\n              node.style[easeProp] = easeVal;\n            }\n            if (flags.hasAnimations) {\n              easeProp = ANIMATION_PROP + TIMING_KEY;\n              temporaryStyles.push([easeProp, easeVal]);\n              node.style[easeProp] = easeVal;\n            }\n          }\n\n          if (timings.transitionDuration) {\n            events.push(TRANSITIONEND_EVENT);\n          }\n\n          if (timings.animationDuration) {\n            events.push(ANIMATIONEND_EVENT);\n          }\n\n          startTime = Date.now();\n          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;\n          var endTime = startTime + timerTime;\n\n          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];\n          var setupFallbackTimer = true;\n          if (animationsData.length) {\n            var currentTimerData = animationsData[0];\n            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;\n            if (setupFallbackTimer) {\n              $timeout.cancel(currentTimerData.timer);\n            } else {\n              animationsData.push(close);\n            }\n          }\n\n          if (setupFallbackTimer) {\n            var timer = $timeout(onAnimationExpired, timerTime, false);\n            animationsData[0] = {\n              timer: timer,\n              expectedEndTime: endTime\n            };\n            animationsData.push(close);\n            element.data(ANIMATE_TIMER_KEY, animationsData);\n          }\n\n          if (events.length) {\n            element.on(events.join(' '), onAnimationProgress);\n          }\n\n          if (options.to) {\n            if (options.cleanupStyles) {\n              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));\n            }\n            applyAnimationToStyles(element, options);\n          }\n        }\n\n        function onAnimationExpired() {\n          var animationsData = element.data(ANIMATE_TIMER_KEY);\n\n          // this will be false in the event that the element was\n          // removed from the DOM (via a leave animation or something\n          // similar)\n          if (animationsData) {\n            for (var i = 1; i < animationsData.length; i++) {\n              animationsData[i]();\n            }\n            element.removeData(ANIMATE_TIMER_KEY);\n          }\n        }\n      }\n    };\n  }];\n}];\n\nvar $$AnimateCssDriverProvider = ['$$animationProvider', function($$animationProvider) {\n  $$animationProvider.drivers.push('$$animateCssDriver');\n\n  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';\n  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';\n\n  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';\n  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';\n\n  function isDocumentFragment(node) {\n    return node.parentNode && node.parentNode.nodeType === 11;\n  }\n\n  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',\n       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {\n\n    // only browsers that support these properties can render animations\n    if (!$sniffer.animations && !$sniffer.transitions) return noop;\n\n    var bodyNode = $document[0].body;\n    var rootNode = getDomNode($rootElement);\n\n    var rootBodyElement = jqLite(\n      // this is to avoid using something that exists outside of the body\n      // we also special case the doc fragment case because our unit test code\n      // appends the $rootElement to the body after the app has been bootstrapped\n      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode\n    );\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    return function initDriverFn(animationDetails) {\n      return animationDetails.from && animationDetails.to\n          ? prepareFromToAnchorAnimation(animationDetails.from,\n                                         animationDetails.to,\n                                         animationDetails.classes,\n                                         animationDetails.anchors)\n          : prepareRegularAnimation(animationDetails);\n    };\n\n    function filterCssClasses(classes) {\n      //remove all the `ng-` stuff\n      return classes.replace(/\\bng-\\S+\\b/g, '');\n    }\n\n    function getUniqueValues(a, b) {\n      if (isString(a)) a = a.split(' ');\n      if (isString(b)) b = b.split(' ');\n      return a.filter(function(val) {\n        return b.indexOf(val) === -1;\n      }).join(' ');\n    }\n\n    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {\n      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));\n      var startingClasses = filterCssClasses(getClassVal(clone));\n\n      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n\n      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);\n\n      rootBodyElement.append(clone);\n\n      var animatorIn, animatorOut = prepareOutAnimation();\n\n      // the user may not end up using the `out` animation and\n      // only making use of the `in` animation or vice-versa.\n      // In either case we should allow this and not assume the\n      // animation is over unless both animations are not used.\n      if (!animatorOut) {\n        animatorIn = prepareInAnimation();\n        if (!animatorIn) {\n          return end();\n        }\n      }\n\n      var startingAnimator = animatorOut || animatorIn;\n\n      return {\n        start: function() {\n          var runner;\n\n          var currentAnimation = startingAnimator.start();\n          currentAnimation.done(function() {\n            currentAnimation = null;\n            if (!animatorIn) {\n              animatorIn = prepareInAnimation();\n              if (animatorIn) {\n                currentAnimation = animatorIn.start();\n                currentAnimation.done(function() {\n                  currentAnimation = null;\n                  end();\n                  runner.complete();\n                });\n                return currentAnimation;\n              }\n            }\n            // in the event that there is no `in` animation\n            end();\n            runner.complete();\n          });\n\n          runner = new $$AnimateRunner({\n            end: endFn,\n            cancel: endFn\n          });\n\n          return runner;\n\n          function endFn() {\n            if (currentAnimation) {\n              currentAnimation.end();\n            }\n          }\n        }\n      };\n\n      function calculateAnchorStyles(anchor) {\n        var styles = {};\n\n        var coords = getDomNode(anchor).getBoundingClientRect();\n\n        // we iterate directly since safari messes up and doesn't return\n        // all the keys for the coords object when iterated\n        forEach(['width','height','top','left'], function(key) {\n          var value = coords[key];\n          switch (key) {\n            case 'top':\n              value += bodyNode.scrollTop;\n              break;\n            case 'left':\n              value += bodyNode.scrollLeft;\n              break;\n          }\n          styles[key] = Math.floor(value) + 'px';\n        });\n        return styles;\n      }\n\n      function prepareOutAnimation() {\n        var animator = $animateCss(clone, {\n          addClass: NG_OUT_ANCHOR_CLASS_NAME,\n          delay: true,\n          from: calculateAnchorStyles(outAnchor)\n        });\n\n        // read the comment within `prepareRegularAnimation` to understand\n        // why this check is necessary\n        return animator.$$willAnimate ? animator : null;\n      }\n\n      function getClassVal(element) {\n        return element.attr('class') || '';\n      }\n\n      function prepareInAnimation() {\n        var endingClasses = filterCssClasses(getClassVal(inAnchor));\n        var toAdd = getUniqueValues(endingClasses, startingClasses);\n        var toRemove = getUniqueValues(startingClasses, endingClasses);\n\n        var animator = $animateCss(clone, {\n          to: calculateAnchorStyles(inAnchor),\n          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,\n          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,\n          delay: true\n        });\n\n        // read the comment within `prepareRegularAnimation` to understand\n        // why this check is necessary\n        return animator.$$willAnimate ? animator : null;\n      }\n\n      function end() {\n        clone.remove();\n        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n      }\n    }\n\n    function prepareFromToAnchorAnimation(from, to, classes, anchors) {\n      var fromAnimation = prepareRegularAnimation(from, noop);\n      var toAnimation = prepareRegularAnimation(to, noop);\n\n      var anchorAnimations = [];\n      forEach(anchors, function(anchor) {\n        var outElement = anchor['out'];\n        var inElement = anchor['in'];\n        var animator = prepareAnchoredAnimation(classes, outElement, inElement);\n        if (animator) {\n          anchorAnimations.push(animator);\n        }\n      });\n\n      // no point in doing anything when there are no elements to animate\n      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;\n\n      return {\n        start: function() {\n          var animationRunners = [];\n\n          if (fromAnimation) {\n            animationRunners.push(fromAnimation.start());\n          }\n\n          if (toAnimation) {\n            animationRunners.push(toAnimation.start());\n          }\n\n          forEach(anchorAnimations, function(animation) {\n            animationRunners.push(animation.start());\n          });\n\n          var runner = new $$AnimateRunner({\n            end: endFn,\n            cancel: endFn // CSS-driven animations cannot be cancelled, only ended\n          });\n\n          $$AnimateRunner.all(animationRunners, function(status) {\n            runner.complete(status);\n          });\n\n          return runner;\n\n          function endFn() {\n            forEach(animationRunners, function(runner) {\n              runner.end();\n            });\n          }\n        }\n      };\n    }\n\n    function prepareRegularAnimation(animationDetails) {\n      var element = animationDetails.element;\n      var options = animationDetails.options || {};\n\n      if (animationDetails.structural) {\n        options.event = animationDetails.event;\n        options.structural = true;\n        options.applyClassesEarly = true;\n\n        // we special case the leave animation since we want to ensure that\n        // the element is removed as soon as the animation is over. Otherwise\n        // a flicker might appear or the element may not be removed at all\n        if (animationDetails.event === 'leave') {\n          options.onDone = options.domOperation;\n        }\n      }\n\n      // We assign the preparationClasses as the actual animation event since\n      // the internals of $animateCss will just suffix the event token values\n      // with `-active` to trigger the animation.\n      if (options.preparationClasses) {\n        options.event = concatWithSpace(options.event, options.preparationClasses);\n      }\n\n      var animator = $animateCss(element, options);\n\n      // the driver lookup code inside of $$animation attempts to spawn a\n      // driver one by one until a driver returns a.$$willAnimate animator object.\n      // $animateCss will always return an object, however, it will pass in\n      // a flag as a hint as to whether an animation was detected or not\n      return animator.$$willAnimate ? animator : null;\n    }\n  }];\n}];\n\n// TODO(matsko): use caching here to speed things up for detection\n// TODO(matsko): add documentation\n//  by the time...\n\nvar $$AnimateJsProvider = ['$animateProvider', function($animateProvider) {\n  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',\n       function($injector,   $$AnimateRunner,   $$jqLite) {\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n         // $animateJs(element, 'enter');\n    return function(element, event, classes, options) {\n      var animationClosed = false;\n\n      // the `classes` argument is optional and if it is not used\n      // then the classes will be resolved from the element's className\n      // property as well as options.addClass/options.removeClass.\n      if (arguments.length === 3 && isObject(classes)) {\n        options = classes;\n        classes = null;\n      }\n\n      options = prepareAnimationOptions(options);\n      if (!classes) {\n        classes = element.attr('class') || '';\n        if (options.addClass) {\n          classes += ' ' + options.addClass;\n        }\n        if (options.removeClass) {\n          classes += ' ' + options.removeClass;\n        }\n      }\n\n      var classesToAdd = options.addClass;\n      var classesToRemove = options.removeClass;\n\n      // the lookupAnimations function returns a series of animation objects that are\n      // matched up with one or more of the CSS classes. These animation objects are\n      // defined via the module.animation factory function. If nothing is detected then\n      // we don't return anything which then makes $animation query the next driver.\n      var animations = lookupAnimations(classes);\n      var before, after;\n      if (animations.length) {\n        var afterFn, beforeFn;\n        if (event == 'leave') {\n          beforeFn = 'leave';\n          afterFn = 'afterLeave'; // TODO(matsko): get rid of this\n        } else {\n          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);\n          afterFn = event;\n        }\n\n        if (event !== 'enter' && event !== 'move') {\n          before = packageAnimations(element, event, options, animations, beforeFn);\n        }\n        after  = packageAnimations(element, event, options, animations, afterFn);\n      }\n\n      // no matching animations\n      if (!before && !after) return;\n\n      function applyOptions() {\n        options.domOperation();\n        applyAnimationClasses(element, options);\n      }\n\n      function close() {\n        animationClosed = true;\n        applyOptions();\n        applyAnimationStyles(element, options);\n      }\n\n      var runner;\n\n      return {\n        $$willAnimate: true,\n        end: function() {\n          if (runner) {\n            runner.end();\n          } else {\n            close();\n            runner = new $$AnimateRunner();\n            runner.complete(true);\n          }\n          return runner;\n        },\n        start: function() {\n          if (runner) {\n            return runner;\n          }\n\n          runner = new $$AnimateRunner();\n          var closeActiveAnimations;\n          var chain = [];\n\n          if (before) {\n            chain.push(function(fn) {\n              closeActiveAnimations = before(fn);\n            });\n          }\n\n          if (chain.length) {\n            chain.push(function(fn) {\n              applyOptions();\n              fn(true);\n            });\n          } else {\n            applyOptions();\n          }\n\n          if (after) {\n            chain.push(function(fn) {\n              closeActiveAnimations = after(fn);\n            });\n          }\n\n          runner.setHost({\n            end: function() {\n              endAnimations();\n            },\n            cancel: function() {\n              endAnimations(true);\n            }\n          });\n\n          $$AnimateRunner.chain(chain, onComplete);\n          return runner;\n\n          function onComplete(success) {\n            close(success);\n            runner.complete(success);\n          }\n\n          function endAnimations(cancelled) {\n            if (!animationClosed) {\n              (closeActiveAnimations || noop)(cancelled);\n              onComplete(cancelled);\n            }\n          }\n        }\n      };\n\n      function executeAnimationFn(fn, element, event, options, onDone) {\n        var args;\n        switch (event) {\n          case 'animate':\n            args = [element, options.from, options.to, onDone];\n            break;\n\n          case 'setClass':\n            args = [element, classesToAdd, classesToRemove, onDone];\n            break;\n\n          case 'addClass':\n            args = [element, classesToAdd, onDone];\n            break;\n\n          case 'removeClass':\n            args = [element, classesToRemove, onDone];\n            break;\n\n          default:\n            args = [element, onDone];\n            break;\n        }\n\n        args.push(options);\n\n        var value = fn.apply(fn, args);\n        if (value) {\n          if (isFunction(value.start)) {\n            value = value.start();\n          }\n\n          if (value instanceof $$AnimateRunner) {\n            value.done(onDone);\n          } else if (isFunction(value)) {\n            // optional onEnd / onCancel callback\n            return value;\n          }\n        }\n\n        return noop;\n      }\n\n      function groupEventedAnimations(element, event, options, animations, fnName) {\n        var operations = [];\n        forEach(animations, function(ani) {\n          var animation = ani[fnName];\n          if (!animation) return;\n\n          // note that all of these animations will run in parallel\n          operations.push(function() {\n            var runner;\n            var endProgressCb;\n\n            var resolved = false;\n            var onAnimationComplete = function(rejected) {\n              if (!resolved) {\n                resolved = true;\n                (endProgressCb || noop)(rejected);\n                runner.complete(!rejected);\n              }\n            };\n\n            runner = new $$AnimateRunner({\n              end: function() {\n                onAnimationComplete();\n              },\n              cancel: function() {\n                onAnimationComplete(true);\n              }\n            });\n\n            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {\n              var cancelled = result === false;\n              onAnimationComplete(cancelled);\n            });\n\n            return runner;\n          });\n        });\n\n        return operations;\n      }\n\n      function packageAnimations(element, event, options, animations, fnName) {\n        var operations = groupEventedAnimations(element, event, options, animations, fnName);\n        if (operations.length === 0) {\n          var a,b;\n          if (fnName === 'beforeSetClass') {\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');\n          } else if (fnName === 'setClass') {\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');\n          }\n\n          if (a) {\n            operations = operations.concat(a);\n          }\n          if (b) {\n            operations = operations.concat(b);\n          }\n        }\n\n        if (operations.length === 0) return;\n\n        // TODO(matsko): add documentation\n        return function startAnimation(callback) {\n          var runners = [];\n          if (operations.length) {\n            forEach(operations, function(animateFn) {\n              runners.push(animateFn());\n            });\n          }\n\n          runners.length ? $$AnimateRunner.all(runners, callback) : callback();\n\n          return function endFn(reject) {\n            forEach(runners, function(runner) {\n              reject ? runner.cancel() : runner.end();\n            });\n          };\n        };\n      }\n    };\n\n    function lookupAnimations(classes) {\n      classes = isArray(classes) ? classes : classes.split(' ');\n      var matches = [], flagMap = {};\n      for (var i=0; i < classes.length; i++) {\n        var klass = classes[i],\n            animationFactory = $animateProvider.$$registeredAnimations[klass];\n        if (animationFactory && !flagMap[klass]) {\n          matches.push($injector.get(animationFactory));\n          flagMap[klass] = true;\n        }\n      }\n      return matches;\n    }\n  }];\n}];\n\nvar $$AnimateJsDriverProvider = ['$$animationProvider', function($$animationProvider) {\n  $$animationProvider.drivers.push('$$animateJsDriver');\n  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {\n    return function initDriverFn(animationDetails) {\n      if (animationDetails.from && animationDetails.to) {\n        var fromAnimation = prepareAnimation(animationDetails.from);\n        var toAnimation = prepareAnimation(animationDetails.to);\n        if (!fromAnimation && !toAnimation) return;\n\n        return {\n          start: function() {\n            var animationRunners = [];\n\n            if (fromAnimation) {\n              animationRunners.push(fromAnimation.start());\n            }\n\n            if (toAnimation) {\n              animationRunners.push(toAnimation.start());\n            }\n\n            $$AnimateRunner.all(animationRunners, done);\n\n            var runner = new $$AnimateRunner({\n              end: endFnFactory(),\n              cancel: endFnFactory()\n            });\n\n            return runner;\n\n            function endFnFactory() {\n              return function() {\n                forEach(animationRunners, function(runner) {\n                  // at this point we cannot cancel animations for groups just yet. 1.5+\n                  runner.end();\n                });\n              };\n            }\n\n            function done(status) {\n              runner.complete(status);\n            }\n          }\n        };\n      } else {\n        return prepareAnimation(animationDetails);\n      }\n    };\n\n    function prepareAnimation(animationDetails) {\n      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations\n      var element = animationDetails.element;\n      var event = animationDetails.event;\n      var options = animationDetails.options;\n      var classes = animationDetails.classes;\n      return $$animateJs(element, event, classes, options);\n    }\n  }];\n}];\n\nvar NG_ANIMATE_ATTR_NAME = 'data-ng-animate';\nvar NG_ANIMATE_PIN_DATA = '$ngAnimatePin';\nvar $$AnimateQueueProvider = ['$animateProvider', function($animateProvider) {\n  var PRE_DIGEST_STATE = 1;\n  var RUNNING_STATE = 2;\n  var ONE_SPACE = ' ';\n\n  var rules = this.rules = {\n    skip: [],\n    cancel: [],\n    join: []\n  };\n\n  function makeTruthyCssClassMap(classString) {\n    if (!classString) {\n      return null;\n    }\n\n    var keys = classString.split(ONE_SPACE);\n    var map = Object.create(null);\n\n    forEach(keys, function(key) {\n      map[key] = true;\n    });\n    return map;\n  }\n\n  function hasMatchingClasses(newClassString, currentClassString) {\n    if (newClassString && currentClassString) {\n      var currentClassMap = makeTruthyCssClassMap(currentClassString);\n      return newClassString.split(ONE_SPACE).some(function(className) {\n        return currentClassMap[className];\n      });\n    }\n  }\n\n  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {\n    return rules[ruleType].some(function(fn) {\n      return fn(element, currentAnimation, previousAnimation);\n    });\n  }\n\n  function hasAnimationClasses(animation, and) {\n    var a = (animation.addClass || '').length > 0;\n    var b = (animation.removeClass || '').length > 0;\n    return and ? a && b : a || b;\n  }\n\n  rules.join.push(function(element, newAnimation, currentAnimation) {\n    // if the new animation is class-based then we can just tack that on\n    return !newAnimation.structural && hasAnimationClasses(newAnimation);\n  });\n\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\n    // there is no need to animate anything if no classes are being added and\n    // there is no structural animation that will be triggered\n    return !newAnimation.structural && !hasAnimationClasses(newAnimation);\n  });\n\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\n    // why should we trigger a new structural animation if the element will\n    // be removed from the DOM anyway?\n    return currentAnimation.event == 'leave' && newAnimation.structural;\n  });\n\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\n    // if there is an ongoing current animation then don't even bother running the class-based animation\n    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;\n  });\n\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n    // there can never be two structural animations running at the same time\n    return currentAnimation.structural && newAnimation.structural;\n  });\n\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n    // if the previous animation is already running, but the new animation will\n    // be triggered, but the new animation is structural\n    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;\n  });\n\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n    // cancel the animation if classes added / removed in both animation cancel each other out,\n    // but only if the current animation isn't structural\n\n    if (currentAnimation.structural) return false;\n\n    var nA = newAnimation.addClass;\n    var nR = newAnimation.removeClass;\n    var cA = currentAnimation.addClass;\n    var cR = currentAnimation.removeClass;\n\n    // early detection to save the global CPU shortage :)\n    if ((isUndefined(nA) && isUndefined(nR)) || (isUndefined(cA) && isUndefined(cR))) {\n      return false;\n    }\n\n    return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);\n  });\n\n  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',\n               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',\n       function($$rAF,   $rootScope,   $rootElement,   $document,   $$HashMap,\n                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow) {\n\n    var activeAnimationsLookup = new $$HashMap();\n    var disabledElementsLookup = new $$HashMap();\n    var animationsEnabled = null;\n\n    function postDigestTaskFactory() {\n      var postDigestCalled = false;\n      return function(fn) {\n        // we only issue a call to postDigest before\n        // it has first passed. This prevents any callbacks\n        // from not firing once the animation has completed\n        // since it will be out of the digest cycle.\n        if (postDigestCalled) {\n          fn();\n        } else {\n          $rootScope.$$postDigest(function() {\n            postDigestCalled = true;\n            fn();\n          });\n        }\n      };\n    }\n\n    // Wait until all directive and route-related templates are downloaded and\n    // compiled. The $templateRequest.totalPendingRequests variable keeps track of\n    // all of the remote templates being currently downloaded. If there are no\n    // templates currently downloading then the watcher will still fire anyway.\n    var deregisterWatch = $rootScope.$watch(\n      function() { return $templateRequest.totalPendingRequests === 0; },\n      function(isEmpty) {\n        if (!isEmpty) return;\n        deregisterWatch();\n\n        // Now that all templates have been downloaded, $animate will wait until\n        // the post digest queue is empty before enabling animations. By having two\n        // calls to $postDigest calls we can ensure that the flag is enabled at the\n        // very end of the post digest queue. Since all of the animations in $animate\n        // use $postDigest, it's important that the code below executes at the end.\n        // This basically means that the page is fully downloaded and compiled before\n        // any animations are triggered.\n        $rootScope.$$postDigest(function() {\n          $rootScope.$$postDigest(function() {\n            // we check for null directly in the event that the application already called\n            // .enabled() with whatever arguments that it provided it with\n            if (animationsEnabled === null) {\n              animationsEnabled = true;\n            }\n          });\n        });\n      }\n    );\n\n    var callbackRegistry = {};\n\n    // remember that the classNameFilter is set during the provider/config\n    // stage therefore we can optimize here and setup a helper function\n    var classNameFilter = $animateProvider.classNameFilter();\n    var isAnimatableClassName = !classNameFilter\n              ? function() { return true; }\n              : function(className) {\n                return classNameFilter.test(className);\n              };\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function normalizeAnimationDetails(element, animation) {\n      return mergeAnimationDetails(element, animation, {});\n    }\n\n    // IE9-11 has no method \"contains\" in SVG element and in Node.prototype. Bug #10259.\n    var contains = window.Node.prototype.contains || function(arg) {\n      // jshint bitwise: false\n      return this === arg || !!(this.compareDocumentPosition(arg) & 16);\n      // jshint bitwise: true\n    };\n\n    function findCallbacks(parent, element, event) {\n      var targetNode = getDomNode(element);\n      var targetParentNode = getDomNode(parent);\n\n      var matches = [];\n      var entries = callbackRegistry[event];\n      if (entries) {\n        forEach(entries, function(entry) {\n          if (contains.call(entry.node, targetNode)) {\n            matches.push(entry.callback);\n          } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {\n            matches.push(entry.callback);\n          }\n        });\n      }\n\n      return matches;\n    }\n\n    function filterFromRegistry(list, matchContainer, matchCallback) {\n      var containerNode = extractElementNode(matchContainer);\n      return list.filter(function(entry) {\n        var isMatch = entry.node === containerNode &&\n                        (!matchCallback || entry.callback === matchCallback);\n        return !isMatch;\n      });\n    }\n\n    function cleanupEventListeners(phase, element) {\n      if (phase === 'close' && !element[0].parentNode) {\n        // If the element is not attached to a parentNode, it has been removed by\n        // the domOperation, and we can safely remove the event callbacks\n        $animate.off(element);\n      }\n    }\n\n    var $animate = {\n      on: function(event, container, callback) {\n        var node = extractElementNode(container);\n        callbackRegistry[event] = callbackRegistry[event] || [];\n        callbackRegistry[event].push({\n          node: node,\n          callback: callback\n        });\n\n        // Remove the callback when the element is removed from the DOM\n        jqLite(container).on('$destroy', function() {\n          var animationDetails = activeAnimationsLookup.get(node);\n\n          if (!animationDetails) {\n            // If there's an animation ongoing, the callback calling code will remove\n            // the event listeners. If we'd remove here, the callbacks would be removed\n            // before the animation ends\n            $animate.off(event, container, callback);\n          }\n        });\n      },\n\n      off: function(event, container, callback) {\n        if (arguments.length === 1 && !angular.isString(arguments[0])) {\n          container = arguments[0];\n          for (var eventType in callbackRegistry) {\n            callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);\n          }\n\n          return;\n        }\n\n        var entries = callbackRegistry[event];\n        if (!entries) return;\n\n        callbackRegistry[event] = arguments.length === 1\n            ? null\n            : filterFromRegistry(entries, container, callback);\n      },\n\n      pin: function(element, parentElement) {\n        assertArg(isElement(element), 'element', 'not an element');\n        assertArg(isElement(parentElement), 'parentElement', 'not an element');\n        element.data(NG_ANIMATE_PIN_DATA, parentElement);\n      },\n\n      push: function(element, event, options, domOperation) {\n        options = options || {};\n        options.domOperation = domOperation;\n        return queueAnimation(element, event, options);\n      },\n\n      // this method has four signatures:\n      //  () - global getter\n      //  (bool) - global setter\n      //  (element) - element getter\n      //  (element, bool) - element setter<F37>\n      enabled: function(element, bool) {\n        var argCount = arguments.length;\n\n        if (argCount === 0) {\n          // () - Global getter\n          bool = !!animationsEnabled;\n        } else {\n          var hasElement = isElement(element);\n\n          if (!hasElement) {\n            // (bool) - Global setter\n            bool = animationsEnabled = !!element;\n          } else {\n            var node = getDomNode(element);\n            var recordExists = disabledElementsLookup.get(node);\n\n            if (argCount === 1) {\n              // (element) - Element getter\n              bool = !recordExists;\n            } else {\n              // (element, bool) - Element setter\n              disabledElementsLookup.put(node, !bool);\n            }\n          }\n        }\n\n        return bool;\n      }\n    };\n\n    return $animate;\n\n    function queueAnimation(element, event, initialOptions) {\n      // we always make a copy of the options since\n      // there should never be any side effects on\n      // the input data when running `$animateCss`.\n      var options = copy(initialOptions);\n\n      var node, parent;\n      element = stripCommentsFromElement(element);\n      if (element) {\n        node = getDomNode(element);\n        parent = element.parent();\n      }\n\n      options = prepareAnimationOptions(options);\n\n      // we create a fake runner with a working promise.\n      // These methods will become available after the digest has passed\n      var runner = new $$AnimateRunner();\n\n      // this is used to trigger callbacks in postDigest mode\n      var runInNextPostDigestOrNow = postDigestTaskFactory();\n\n      if (isArray(options.addClass)) {\n        options.addClass = options.addClass.join(' ');\n      }\n\n      if (options.addClass && !isString(options.addClass)) {\n        options.addClass = null;\n      }\n\n      if (isArray(options.removeClass)) {\n        options.removeClass = options.removeClass.join(' ');\n      }\n\n      if (options.removeClass && !isString(options.removeClass)) {\n        options.removeClass = null;\n      }\n\n      if (options.from && !isObject(options.from)) {\n        options.from = null;\n      }\n\n      if (options.to && !isObject(options.to)) {\n        options.to = null;\n      }\n\n      // there are situations where a directive issues an animation for\n      // a jqLite wrapper that contains only comment nodes... If this\n      // happens then there is no way we can perform an animation\n      if (!node) {\n        close();\n        return runner;\n      }\n\n      var className = [node.className, options.addClass, options.removeClass].join(' ');\n      if (!isAnimatableClassName(className)) {\n        close();\n        return runner;\n      }\n\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\n      var documentHidden = $document[0].hidden;\n\n      // this is a hard disable of all animations for the application or on\n      // the element itself, therefore  there is no need to continue further\n      // past this point if not enabled\n      // Animations are also disabled if the document is currently hidden (page is not visible\n      // to the user), because browsers slow down or do not flush calls to requestAnimationFrame\n      var skipAnimations = !animationsEnabled || documentHidden || disabledElementsLookup.get(node);\n      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};\n      var hasExistingAnimation = !!existingAnimation.state;\n\n      // there is no point in traversing the same collection of parent ancestors if a followup\n      // animation will be run on the same element that already did all that checking work\n      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {\n        skipAnimations = !areAnimationsAllowed(element, parent, event);\n      }\n\n      if (skipAnimations) {\n        // Callbacks should fire even if the document is hidden (regression fix for issue #14120)\n        if (documentHidden) notifyProgress(runner, event, 'start');\n        close();\n        if (documentHidden) notifyProgress(runner, event, 'close');\n        return runner;\n      }\n\n      if (isStructural) {\n        closeChildAnimations(element);\n      }\n\n      var newAnimation = {\n        structural: isStructural,\n        element: element,\n        event: event,\n        addClass: options.addClass,\n        removeClass: options.removeClass,\n        close: close,\n        options: options,\n        runner: runner\n      };\n\n      if (hasExistingAnimation) {\n        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);\n        if (skipAnimationFlag) {\n          if (existingAnimation.state === RUNNING_STATE) {\n            close();\n            return runner;\n          } else {\n            mergeAnimationDetails(element, existingAnimation, newAnimation);\n            return existingAnimation.runner;\n          }\n        }\n        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);\n        if (cancelAnimationFlag) {\n          if (existingAnimation.state === RUNNING_STATE) {\n            // this will end the animation right away and it is safe\n            // to do so since the animation is already running and the\n            // runner callback code will run in async\n            existingAnimation.runner.end();\n          } else if (existingAnimation.structural) {\n            // this means that the animation is queued into a digest, but\n            // hasn't started yet. Therefore it is safe to run the close\n            // method which will call the runner methods in async.\n            existingAnimation.close();\n          } else {\n            // this will merge the new animation options into existing animation options\n            mergeAnimationDetails(element, existingAnimation, newAnimation);\n\n            return existingAnimation.runner;\n          }\n        } else {\n          // a joined animation means that this animation will take over the existing one\n          // so an example would involve a leave animation taking over an enter. Then when\n          // the postDigest kicks in the enter will be ignored.\n          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);\n          if (joinAnimationFlag) {\n            if (existingAnimation.state === RUNNING_STATE) {\n              normalizeAnimationDetails(element, newAnimation);\n            } else {\n              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);\n\n              event = newAnimation.event = existingAnimation.event;\n              options = mergeAnimationDetails(element, existingAnimation, newAnimation);\n\n              //we return the same runner since only the option values of this animation will\n              //be fed into the `existingAnimation`.\n              return existingAnimation.runner;\n            }\n          }\n        }\n      } else {\n        // normalization in this case means that it removes redundant CSS classes that\n        // already exist (addClass) or do not exist (removeClass) on the element\n        normalizeAnimationDetails(element, newAnimation);\n      }\n\n      // when the options are merged and cleaned up we may end up not having to do\n      // an animation at all, therefore we should check this before issuing a post\n      // digest callback. Structural animations will always run no matter what.\n      var isValidAnimation = newAnimation.structural;\n      if (!isValidAnimation) {\n        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present\n        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)\n                            || hasAnimationClasses(newAnimation);\n      }\n\n      if (!isValidAnimation) {\n        close();\n        clearElementAnimationState(element);\n        return runner;\n      }\n\n      // the counter keeps track of cancelled animations\n      var counter = (existingAnimation.counter || 0) + 1;\n      newAnimation.counter = counter;\n\n      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);\n\n      $rootScope.$$postDigest(function() {\n        var animationDetails = activeAnimationsLookup.get(node);\n        var animationCancelled = !animationDetails;\n        animationDetails = animationDetails || {};\n\n        // if addClass/removeClass is called before something like enter then the\n        // registered parent element may not be present. The code below will ensure\n        // that a final value for parent element is obtained\n        var parentElement = element.parent() || [];\n\n        // animate/structural/class-based animations all have requirements. Otherwise there\n        // is no point in performing an animation. The parent node must also be set.\n        var isValidAnimation = parentElement.length > 0\n                                && (animationDetails.event === 'animate'\n                                    || animationDetails.structural\n                                    || hasAnimationClasses(animationDetails));\n\n        // this means that the previous animation was cancelled\n        // even if the follow-up animation is the same event\n        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {\n          // if another animation did not take over then we need\n          // to make sure that the domOperation and options are\n          // handled accordingly\n          if (animationCancelled) {\n            applyAnimationClasses(element, options);\n            applyAnimationStyles(element, options);\n          }\n\n          // if the event changed from something like enter to leave then we do\n          // it, otherwise if it's the same then the end result will be the same too\n          if (animationCancelled || (isStructural && animationDetails.event !== event)) {\n            options.domOperation();\n            runner.end();\n          }\n\n          // in the event that the element animation was not cancelled or a follow-up animation\n          // isn't allowed to animate from here then we need to clear the state of the element\n          // so that any future animations won't read the expired animation data.\n          if (!isValidAnimation) {\n            clearElementAnimationState(element);\n          }\n\n          return;\n        }\n\n        // this combined multiple class to addClass / removeClass into a setClass event\n        // so long as a structural event did not take over the animation\n        event = !animationDetails.structural && hasAnimationClasses(animationDetails, true)\n            ? 'setClass'\n            : animationDetails.event;\n\n        markElementAnimationState(element, RUNNING_STATE);\n        var realRunner = $$animation(element, event, animationDetails.options);\n\n        // this will update the runner's flow-control events based on\n        // the `realRunner` object.\n        runner.setHost(realRunner);\n        notifyProgress(runner, event, 'start', {});\n\n        realRunner.done(function(status) {\n          close(!status);\n          var animationDetails = activeAnimationsLookup.get(node);\n          if (animationDetails && animationDetails.counter === counter) {\n            clearElementAnimationState(getDomNode(element));\n          }\n          notifyProgress(runner, event, 'close', {});\n        });\n      });\n\n      return runner;\n\n      function notifyProgress(runner, event, phase, data) {\n        runInNextPostDigestOrNow(function() {\n          var callbacks = findCallbacks(parent, element, event);\n          if (callbacks.length) {\n            // do not optimize this call here to RAF because\n            // we don't know how heavy the callback code here will\n            // be and if this code is buffered then this can\n            // lead to a performance regression.\n            $$rAF(function() {\n              forEach(callbacks, function(callback) {\n                callback(element, phase, data);\n              });\n              cleanupEventListeners(phase, element);\n            });\n          } else {\n            cleanupEventListeners(phase, element);\n          }\n        });\n        runner.progress(event, phase, data);\n      }\n\n      function close(reject) { // jshint ignore:line\n        clearGeneratedClasses(element, options);\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n        options.domOperation();\n        runner.complete(!reject);\n      }\n    }\n\n    function closeChildAnimations(element) {\n      var node = getDomNode(element);\n      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');\n      forEach(children, function(child) {\n        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));\n        var animationDetails = activeAnimationsLookup.get(child);\n        if (animationDetails) {\n          switch (state) {\n            case RUNNING_STATE:\n              animationDetails.runner.end();\n              /* falls through */\n            case PRE_DIGEST_STATE:\n              activeAnimationsLookup.remove(child);\n              break;\n          }\n        }\n      });\n    }\n\n    function clearElementAnimationState(element) {\n      var node = getDomNode(element);\n      node.removeAttribute(NG_ANIMATE_ATTR_NAME);\n      activeAnimationsLookup.remove(node);\n    }\n\n    function isMatchingElement(nodeOrElmA, nodeOrElmB) {\n      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);\n    }\n\n    /**\n     * This fn returns false if any of the following is true:\n     * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed\n     * b) a parent element has an ongoing structural animation, and animateChildren is false\n     * c) the element is not a child of the body\n     * d) the element is not a child of the $rootElement\n     */\n    function areAnimationsAllowed(element, parentElement, event) {\n      var bodyElement = jqLite($document[0].body);\n      var bodyElementDetected = isMatchingElement(element, bodyElement) || element[0].nodeName === 'HTML';\n      var rootElementDetected = isMatchingElement(element, $rootElement);\n      var parentAnimationDetected = false;\n      var animateChildren;\n      var elementDisabled = disabledElementsLookup.get(getDomNode(element));\n\n      var parentHost = jqLite.data(element[0], NG_ANIMATE_PIN_DATA);\n      if (parentHost) {\n        parentElement = parentHost;\n      }\n\n      parentElement = getDomNode(parentElement);\n\n      while (parentElement) {\n        if (!rootElementDetected) {\n          // angular doesn't want to attempt to animate elements outside of the application\n          // therefore we need to ensure that the rootElement is an ancestor of the current element\n          rootElementDetected = isMatchingElement(parentElement, $rootElement);\n        }\n\n        if (parentElement.nodeType !== ELEMENT_NODE) {\n          // no point in inspecting the #document element\n          break;\n        }\n\n        var details = activeAnimationsLookup.get(parentElement) || {};\n        // either an enter, leave or move animation will commence\n        // therefore we can't allow any animations to take place\n        // but if a parent animation is class-based then that's ok\n        if (!parentAnimationDetected) {\n          var parentElementDisabled = disabledElementsLookup.get(parentElement);\n\n          if (parentElementDisabled === true && elementDisabled !== false) {\n            // disable animations if the user hasn't explicitly enabled animations on the\n            // current element\n            elementDisabled = true;\n            // element is disabled via parent element, no need to check anything else\n            break;\n          } else if (parentElementDisabled === false) {\n            elementDisabled = false;\n          }\n          parentAnimationDetected = details.structural;\n        }\n\n        if (isUndefined(animateChildren) || animateChildren === true) {\n          var value = jqLite.data(parentElement, NG_ANIMATE_CHILDREN_DATA);\n          if (isDefined(value)) {\n            animateChildren = value;\n          }\n        }\n\n        // there is no need to continue traversing at this point\n        if (parentAnimationDetected && animateChildren === false) break;\n\n        if (!bodyElementDetected) {\n          // we also need to ensure that the element is or will be a part of the body element\n          // otherwise it is pointless to even issue an animation to be rendered\n          bodyElementDetected = isMatchingElement(parentElement, bodyElement);\n        }\n\n        if (bodyElementDetected && rootElementDetected) {\n          // If both body and root have been found, any other checks are pointless,\n          // as no animation data should live outside the application\n          break;\n        }\n\n        if (!rootElementDetected) {\n          // If no rootElement is detected, check if the parentElement is pinned to another element\n          parentHost = jqLite.data(parentElement, NG_ANIMATE_PIN_DATA);\n          if (parentHost) {\n            // The pin target element becomes the next parent element\n            parentElement = getDomNode(parentHost);\n            continue;\n          }\n        }\n\n        parentElement = parentElement.parentNode;\n      }\n\n      var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;\n      return allowAnimation && rootElementDetected && bodyElementDetected;\n    }\n\n    function markElementAnimationState(element, state, details) {\n      details = details || {};\n      details.state = state;\n\n      var node = getDomNode(element);\n      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);\n\n      var oldValue = activeAnimationsLookup.get(node);\n      var newValue = oldValue\n          ? extend(oldValue, details)\n          : details;\n      activeAnimationsLookup.put(node, newValue);\n    }\n  }];\n}];\n\nvar $$AnimationProvider = ['$animateProvider', function($animateProvider) {\n  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';\n\n  var drivers = this.drivers = [];\n\n  var RUNNER_STORAGE_KEY = '$$animationRunner';\n\n  function setRunner(element, runner) {\n    element.data(RUNNER_STORAGE_KEY, runner);\n  }\n\n  function removeRunner(element) {\n    element.removeData(RUNNER_STORAGE_KEY);\n  }\n\n  function getRunner(element) {\n    return element.data(RUNNER_STORAGE_KEY);\n  }\n\n  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',\n       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$HashMap,   $$rAFScheduler) {\n\n    var animationQueue = [];\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function sortAnimations(animations) {\n      var tree = { children: [] };\n      var i, lookup = new $$HashMap();\n\n      // this is done first beforehand so that the hashmap\n      // is filled with a list of the elements that will be animated\n      for (i = 0; i < animations.length; i++) {\n        var animation = animations[i];\n        lookup.put(animation.domNode, animations[i] = {\n          domNode: animation.domNode,\n          fn: animation.fn,\n          children: []\n        });\n      }\n\n      for (i = 0; i < animations.length; i++) {\n        processNode(animations[i]);\n      }\n\n      return flatten(tree);\n\n      function processNode(entry) {\n        if (entry.processed) return entry;\n        entry.processed = true;\n\n        var elementNode = entry.domNode;\n        var parentNode = elementNode.parentNode;\n        lookup.put(elementNode, entry);\n\n        var parentEntry;\n        while (parentNode) {\n          parentEntry = lookup.get(parentNode);\n          if (parentEntry) {\n            if (!parentEntry.processed) {\n              parentEntry = processNode(parentEntry);\n            }\n            break;\n          }\n          parentNode = parentNode.parentNode;\n        }\n\n        (parentEntry || tree).children.push(entry);\n        return entry;\n      }\n\n      function flatten(tree) {\n        var result = [];\n        var queue = [];\n        var i;\n\n        for (i = 0; i < tree.children.length; i++) {\n          queue.push(tree.children[i]);\n        }\n\n        var remainingLevelEntries = queue.length;\n        var nextLevelEntries = 0;\n        var row = [];\n\n        for (i = 0; i < queue.length; i++) {\n          var entry = queue[i];\n          if (remainingLevelEntries <= 0) {\n            remainingLevelEntries = nextLevelEntries;\n            nextLevelEntries = 0;\n            result.push(row);\n            row = [];\n          }\n          row.push(entry.fn);\n          entry.children.forEach(function(childEntry) {\n            nextLevelEntries++;\n            queue.push(childEntry);\n          });\n          remainingLevelEntries--;\n        }\n\n        if (row.length) {\n          result.push(row);\n        }\n\n        return result;\n      }\n    }\n\n    // TODO(matsko): document the signature in a better way\n    return function(element, event, options) {\n      options = prepareAnimationOptions(options);\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\n      // there is no animation at the current moment, however\n      // these runner methods will get later updated with the\n      // methods leading into the driver's end/cancel methods\n      // for now they just stop the animation from starting\n      var runner = new $$AnimateRunner({\n        end: function() { close(); },\n        cancel: function() { close(true); }\n      });\n\n      if (!drivers.length) {\n        close();\n        return runner;\n      }\n\n      setRunner(element, runner);\n\n      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));\n      var tempClasses = options.tempClasses;\n      if (tempClasses) {\n        classes += ' ' + tempClasses;\n        options.tempClasses = null;\n      }\n\n      var prepareClassName;\n      if (isStructural) {\n        prepareClassName = 'ng-' + event + PREPARE_CLASS_SUFFIX;\n        $$jqLite.addClass(element, prepareClassName);\n      }\n\n      animationQueue.push({\n        // this data is used by the postDigest code and passed into\n        // the driver step function\n        element: element,\n        classes: classes,\n        event: event,\n        structural: isStructural,\n        options: options,\n        beforeStart: beforeStart,\n        close: close\n      });\n\n      element.on('$destroy', handleDestroyedElement);\n\n      // we only want there to be one function called within the post digest\n      // block. This way we can group animations for all the animations that\n      // were apart of the same postDigest flush call.\n      if (animationQueue.length > 1) return runner;\n\n      $rootScope.$$postDigest(function() {\n        var animations = [];\n        forEach(animationQueue, function(entry) {\n          // the element was destroyed early on which removed the runner\n          // form its storage. This means we can't animate this element\n          // at all and it already has been closed due to destruction.\n          if (getRunner(entry.element)) {\n            animations.push(entry);\n          } else {\n            entry.close();\n          }\n        });\n\n        // now any future animations will be in another postDigest\n        animationQueue.length = 0;\n\n        var groupedAnimations = groupAnimations(animations);\n        var toBeSortedAnimations = [];\n\n        forEach(groupedAnimations, function(animationEntry) {\n          toBeSortedAnimations.push({\n            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),\n            fn: function triggerAnimationStart() {\n              // it's important that we apply the `ng-animate` CSS class and the\n              // temporary classes before we do any driver invoking since these\n              // CSS classes may be required for proper CSS detection.\n              animationEntry.beforeStart();\n\n              var startAnimationFn, closeFn = animationEntry.close;\n\n              // in the event that the element was removed before the digest runs or\n              // during the RAF sequencing then we should not trigger the animation.\n              var targetElement = animationEntry.anchors\n                  ? (animationEntry.from.element || animationEntry.to.element)\n                  : animationEntry.element;\n\n              if (getRunner(targetElement)) {\n                var operation = invokeFirstDriver(animationEntry);\n                if (operation) {\n                  startAnimationFn = operation.start;\n                }\n              }\n\n              if (!startAnimationFn) {\n                closeFn();\n              } else {\n                var animationRunner = startAnimationFn();\n                animationRunner.done(function(status) {\n                  closeFn(!status);\n                });\n                updateAnimationRunners(animationEntry, animationRunner);\n              }\n            }\n          });\n        });\n\n        // we need to sort each of the animations in order of parent to child\n        // relationships. This ensures that the child classes are applied at the\n        // right time.\n        $$rAFScheduler(sortAnimations(toBeSortedAnimations));\n      });\n\n      return runner;\n\n      // TODO(matsko): change to reference nodes\n      function getAnchorNodes(node) {\n        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';\n        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)\n              ? [node]\n              : node.querySelectorAll(SELECTOR);\n        var anchors = [];\n        forEach(items, function(node) {\n          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);\n          if (attr && attr.length) {\n            anchors.push(node);\n          }\n        });\n        return anchors;\n      }\n\n      function groupAnimations(animations) {\n        var preparedAnimations = [];\n        var refLookup = {};\n        forEach(animations, function(animation, index) {\n          var element = animation.element;\n          var node = getDomNode(element);\n          var event = animation.event;\n          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;\n          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];\n\n          if (anchorNodes.length) {\n            var direction = enterOrMove ? 'to' : 'from';\n\n            forEach(anchorNodes, function(anchor) {\n              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);\n              refLookup[key] = refLookup[key] || {};\n              refLookup[key][direction] = {\n                animationID: index,\n                element: jqLite(anchor)\n              };\n            });\n          } else {\n            preparedAnimations.push(animation);\n          }\n        });\n\n        var usedIndicesLookup = {};\n        var anchorGroups = {};\n        forEach(refLookup, function(operations, key) {\n          var from = operations.from;\n          var to = operations.to;\n\n          if (!from || !to) {\n            // only one of these is set therefore we can't have an\n            // anchor animation since all three pieces are required\n            var index = from ? from.animationID : to.animationID;\n            var indexKey = index.toString();\n            if (!usedIndicesLookup[indexKey]) {\n              usedIndicesLookup[indexKey] = true;\n              preparedAnimations.push(animations[index]);\n            }\n            return;\n          }\n\n          var fromAnimation = animations[from.animationID];\n          var toAnimation = animations[to.animationID];\n          var lookupKey = from.animationID.toString();\n          if (!anchorGroups[lookupKey]) {\n            var group = anchorGroups[lookupKey] = {\n              structural: true,\n              beforeStart: function() {\n                fromAnimation.beforeStart();\n                toAnimation.beforeStart();\n              },\n              close: function() {\n                fromAnimation.close();\n                toAnimation.close();\n              },\n              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),\n              from: fromAnimation,\n              to: toAnimation,\n              anchors: [] // TODO(matsko): change to reference nodes\n            };\n\n            // the anchor animations require that the from and to elements both have at least\n            // one shared CSS class which effectively marries the two elements together to use\n            // the same animation driver and to properly sequence the anchor animation.\n            if (group.classes.length) {\n              preparedAnimations.push(group);\n            } else {\n              preparedAnimations.push(fromAnimation);\n              preparedAnimations.push(toAnimation);\n            }\n          }\n\n          anchorGroups[lookupKey].anchors.push({\n            'out': from.element, 'in': to.element\n          });\n        });\n\n        return preparedAnimations;\n      }\n\n      function cssClassesIntersection(a,b) {\n        a = a.split(' ');\n        b = b.split(' ');\n        var matches = [];\n\n        for (var i = 0; i < a.length; i++) {\n          var aa = a[i];\n          if (aa.substring(0,3) === 'ng-') continue;\n\n          for (var j = 0; j < b.length; j++) {\n            if (aa === b[j]) {\n              matches.push(aa);\n              break;\n            }\n          }\n        }\n\n        return matches.join(' ');\n      }\n\n      function invokeFirstDriver(animationDetails) {\n        // we loop in reverse order since the more general drivers (like CSS and JS)\n        // may attempt more elements, but custom drivers are more particular\n        for (var i = drivers.length - 1; i >= 0; i--) {\n          var driverName = drivers[i];\n          var factory = $injector.get(driverName);\n          var driver = factory(animationDetails);\n          if (driver) {\n            return driver;\n          }\n        }\n      }\n\n      function beforeStart() {\n        element.addClass(NG_ANIMATE_CLASSNAME);\n        if (tempClasses) {\n          $$jqLite.addClass(element, tempClasses);\n        }\n        if (prepareClassName) {\n          $$jqLite.removeClass(element, prepareClassName);\n          prepareClassName = null;\n        }\n      }\n\n      function updateAnimationRunners(animation, newRunner) {\n        if (animation.from && animation.to) {\n          update(animation.from.element);\n          update(animation.to.element);\n        } else {\n          update(animation.element);\n        }\n\n        function update(element) {\n          var runner = getRunner(element);\n          if (runner) runner.setHost(newRunner);\n        }\n      }\n\n      function handleDestroyedElement() {\n        var runner = getRunner(element);\n        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {\n          runner.end();\n        }\n      }\n\n      function close(rejected) { // jshint ignore:line\n        element.off('$destroy', handleDestroyedElement);\n        removeRunner(element);\n\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n        options.domOperation();\n\n        if (tempClasses) {\n          $$jqLite.removeClass(element, tempClasses);\n        }\n\n        element.removeClass(NG_ANIMATE_CLASSNAME);\n        runner.complete(!rejected);\n      }\n    };\n  }];\n}];\n\n/**\n * @ngdoc directive\n * @name ngAnimateSwap\n * @restrict A\n * @scope\n *\n * @description\n *\n * ngAnimateSwap is a animation-oriented directive that allows for the container to\n * be removed and entered in whenever the associated expression changes. A\n * common usecase for this directive is a rotating banner or slider component which\n * contains one image being present at a time. When the active image changes\n * then the old image will perform a `leave` animation and the new element\n * will be inserted via an `enter` animation.\n *\n * @animations\n * | Animation                        | Occurs                               |\n * |----------------------------------|--------------------------------------|\n * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM  |\n * | {@link ng.$animate#leave leave}  | when the old element is removed from the DOM |\n *\n * @example\n * <example name=\"ngAnimateSwap-directive\" module=\"ngAnimateSwapExample\"\n *          deps=\"angular-animate.js\"\n *          animations=\"true\" fixBase=\"true\">\n *   <file name=\"index.html\">\n *     <div class=\"container\" ng-controller=\"AppCtrl\">\n *       <div ng-animate-swap=\"number\" class=\"cell swap-animation\" ng-class=\"colorClass(number)\">\n *         {{ number }}\n *       </div>\n *     </div>\n *   </file>\n *   <file name=\"script.js\">\n *     angular.module('ngAnimateSwapExample', ['ngAnimate'])\n *       .controller('AppCtrl', ['$scope', '$interval', function($scope, $interval) {\n *         $scope.number = 0;\n *         $interval(function() {\n *           $scope.number++;\n *         }, 1000);\n *\n *         var colors = ['red','blue','green','yellow','orange'];\n *         $scope.colorClass = function(number) {\n *           return colors[number % colors.length];\n *         };\n *       }]);\n *   </file>\n *  <file name=\"animations.css\">\n *  .container {\n *    height:250px;\n *    width:250px;\n *    position:relative;\n *    overflow:hidden;\n *    border:2px solid black;\n *  }\n *  .container .cell {\n *    font-size:150px;\n *    text-align:center;\n *    line-height:250px;\n *    position:absolute;\n *    top:0;\n *    left:0;\n *    right:0;\n *    border-bottom:2px solid black;\n *  }\n *  .swap-animation.ng-enter, .swap-animation.ng-leave {\n *    transition:0.5s linear all;\n *  }\n *  .swap-animation.ng-enter {\n *    top:-250px;\n *  }\n *  .swap-animation.ng-enter-active {\n *    top:0px;\n *  }\n *  .swap-animation.ng-leave {\n *    top:0px;\n *  }\n *  .swap-animation.ng-leave-active {\n *    top:250px;\n *  }\n *  .red { background:red; }\n *  .green { background:green; }\n *  .blue { background:blue; }\n *  .yellow { background:yellow; }\n *  .orange { background:orange; }\n *  </file>\n * </example>\n */\nvar ngAnimateSwapDirective = ['$animate', '$rootScope', function($animate, $rootScope) {\n  return {\n    restrict: 'A',\n    transclude: 'element',\n    terminal: true,\n    priority: 600, // we use 600 here to ensure that the directive is caught before others\n    link: function(scope, $element, attrs, ctrl, $transclude) {\n      var previousElement, previousScope;\n      scope.$watchCollection(attrs.ngAnimateSwap || attrs['for'], function(value) {\n        if (previousElement) {\n          $animate.leave(previousElement);\n        }\n        if (previousScope) {\n          previousScope.$destroy();\n          previousScope = null;\n        }\n        if (value || value === 0) {\n          previousScope = scope.$new();\n          $transclude(previousScope, function(element) {\n            previousElement = element;\n            $animate.enter(element, null, $element);\n          });\n        }\n      });\n    }\n  };\n}];\n\n/* global angularAnimateModule: true,\n\n   ngAnimateSwapDirective,\n   $$AnimateAsyncRunFactory,\n   $$rAFSchedulerFactory,\n   $$AnimateChildrenDirective,\n   $$AnimateQueueProvider,\n   $$AnimationProvider,\n   $AnimateCssProvider,\n   $$AnimateCssDriverProvider,\n   $$AnimateJsProvider,\n   $$AnimateJsDriverProvider,\n*/\n\n/**\n * @ngdoc module\n * @name ngAnimate\n * @description\n *\n * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via\n * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.\n *\n * <div doc-module-components=\"ngAnimate\"></div>\n *\n * # Usage\n * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based\n * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For\n * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within\n * the HTML element that the animation will be triggered on.\n *\n * ## Directive Support\n * The following directives are \"animation aware\":\n *\n * | Directive                                                                                                | Supported Animations                                                     |\n * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|\n * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |\n * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |\n * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |\n * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |\n * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |\n * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |\n * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |\n * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |\n * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |\n * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |\n *\n * (More information can be found by visiting each the documentation associated with each directive.)\n *\n * ## CSS-based Animations\n *\n * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML\n * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.\n *\n * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:\n *\n * ```html\n * <div ng-if=\"bool\" class=\"fade\">\n *    Fade me in out\n * </div>\n * <button ng-click=\"bool=true\">Fade In!</button>\n * <button ng-click=\"bool=false\">Fade Out!</button>\n * ```\n *\n * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:\n *\n * ```css\n * /&#42; The starting CSS styles for the enter animation &#42;/\n * .fade.ng-enter {\n *   transition:0.5s linear all;\n *   opacity:0;\n * }\n *\n * /&#42; The finishing CSS styles for the enter animation &#42;/\n * .fade.ng-enter.ng-enter-active {\n *   opacity:1;\n * }\n * ```\n *\n * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two\n * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition\n * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.\n *\n * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:\n *\n * ```css\n * /&#42; now the element will fade out before it is removed from the DOM &#42;/\n * .fade.ng-leave {\n *   transition:0.5s linear all;\n *   opacity:1;\n * }\n * .fade.ng-leave.ng-leave-active {\n *   opacity:0;\n * }\n * ```\n *\n * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:\n *\n * ```css\n * /&#42; there is no need to define anything inside of the destination\n * CSS class since the keyframe will take charge of the animation &#42;/\n * .fade.ng-leave {\n *   animation: my_fade_animation 0.5s linear;\n *   -webkit-animation: my_fade_animation 0.5s linear;\n * }\n *\n * @keyframes my_fade_animation {\n *   from { opacity:1; }\n *   to { opacity:0; }\n * }\n *\n * @-webkit-keyframes my_fade_animation {\n *   from { opacity:1; }\n *   to { opacity:0; }\n * }\n * ```\n *\n * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.\n *\n * ### CSS Class-based Animations\n *\n * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different\n * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added\n * and removed.\n *\n * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:\n *\n * ```html\n * <div ng-show=\"bool\" class=\"fade\">\n *   Show and hide me\n * </div>\n * <button ng-click=\"bool=!bool\">Toggle</button>\n *\n * <style>\n * .fade.ng-hide {\n *   transition:0.5s linear all;\n *   opacity:0;\n * }\n * </style>\n * ```\n *\n * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since\n * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.\n *\n * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation\n * with CSS styles.\n *\n * ```html\n * <div ng-class=\"{on:onOff}\" class=\"highlight\">\n *   Highlight this box\n * </div>\n * <button ng-click=\"onOff=!onOff\">Toggle</button>\n *\n * <style>\n * .highlight {\n *   transition:0.5s linear all;\n * }\n * .highlight.on-add {\n *   background:white;\n * }\n * .highlight.on {\n *   background:yellow;\n * }\n * .highlight.on-remove {\n *   background:black;\n * }\n * </style>\n * ```\n *\n * We can also make use of CSS keyframes by placing them within the CSS classes.\n *\n *\n * ### CSS Staggering Animations\n * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a\n * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be\n * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for\n * the animation. The style property expected within the stagger class can either be a **transition-delay** or an\n * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).\n *\n * ```css\n * .my-animation.ng-enter {\n *   /&#42; standard transition code &#42;/\n *   transition: 1s linear all;\n *   opacity:0;\n * }\n * .my-animation.ng-enter-stagger {\n *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/\n *   transition-delay: 0.1s;\n *\n *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate\n *     to not accidentally inherit a delay property from another CSS class &#42;/\n *   transition-duration: 0s;\n * }\n * .my-animation.ng-enter.ng-enter-active {\n *   /&#42; standard transition styles &#42;/\n *   opacity:1;\n * }\n * ```\n *\n * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations\n * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this\n * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation\n * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.\n *\n * The following code will issue the **ng-leave-stagger** event on the element provided:\n *\n * ```js\n * var kids = parent.children();\n *\n * $animate.leave(kids[0]); //stagger index=0\n * $animate.leave(kids[1]); //stagger index=1\n * $animate.leave(kids[2]); //stagger index=2\n * $animate.leave(kids[3]); //stagger index=3\n * $animate.leave(kids[4]); //stagger index=4\n *\n * window.requestAnimationFrame(function() {\n *   //stagger has reset itself\n *   $animate.leave(kids[5]); //stagger index=0\n *   $animate.leave(kids[6]); //stagger index=1\n *\n *   $scope.$digest();\n * });\n * ```\n *\n * Stagger animations are currently only supported within CSS-defined animations.\n *\n * ### The `ng-animate` CSS class\n *\n * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.\n * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).\n *\n * Therefore, animations can be applied to an element using this temporary class directly via CSS.\n *\n * ```css\n * .zipper.ng-animate {\n *   transition:0.5s linear all;\n * }\n * .zipper.ng-enter {\n *   opacity:0;\n * }\n * .zipper.ng-enter.ng-enter-active {\n *   opacity:1;\n * }\n * .zipper.ng-leave {\n *   opacity:1;\n * }\n * .zipper.ng-leave.ng-leave-active {\n *   opacity:0;\n * }\n * ```\n *\n * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove\n * the CSS class once an animation has completed.)\n *\n *\n * ### The `ng-[event]-prepare` class\n *\n * This is a special class that can be used to prevent unwanted flickering / flash of content before\n * the actual animation starts. The class is added as soon as an animation is initialized, but removed\n * before the actual animation starts (after waiting for a $digest).\n * It is also only added for *structural* animations (`enter`, `move`, and `leave`).\n *\n * In practice, flickering can appear when nesting elements with structural animations such as `ngIf`\n * into elements that have class-based animations such as `ngClass`.\n *\n * ```html\n * <div ng-class=\"{red: myProp}\">\n *   <div ng-class=\"{blue: myProp}\">\n *     <div class=\"message\" ng-if=\"myProp\"></div>\n *   </div>\n * </div>\n * ```\n *\n * It is possible that during the `enter` animation, the `.message` div will be briefly visible before it starts animating.\n * In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:\n *\n * ```css\n * .message.ng-enter-prepare {\n *   opacity: 0;\n * }\n *\n * ```\n *\n * ## JavaScript-based Animations\n *\n * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared\n * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the\n * `module.animation()` module function we can register the animation.\n *\n * Let's see an example of a enter/leave animation using `ngRepeat`:\n *\n * ```html\n * <div ng-repeat=\"item in items\" class=\"slide\">\n *   {{ item }}\n * </div>\n * ```\n *\n * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:\n *\n * ```js\n * myModule.animation('.slide', [function() {\n *   return {\n *     // make note that other events (like addClass/removeClass)\n *     // have different function input parameters\n *     enter: function(element, doneFn) {\n *       jQuery(element).fadeIn(1000, doneFn);\n *\n *       // remember to call doneFn so that angular\n *       // knows that the animation has concluded\n *     },\n *\n *     move: function(element, doneFn) {\n *       jQuery(element).fadeIn(1000, doneFn);\n *     },\n *\n *     leave: function(element, doneFn) {\n *       jQuery(element).fadeOut(1000, doneFn);\n *     }\n *   }\n * }]);\n * ```\n *\n * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as\n * greensock.js and velocity.js.\n *\n * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define\n * our animations inside of the same registered animation, however, the function input arguments are a bit different:\n *\n * ```html\n * <div ng-class=\"color\" class=\"colorful\">\n *   this box is moody\n * </div>\n * <button ng-click=\"color='red'\">Change to red</button>\n * <button ng-click=\"color='blue'\">Change to blue</button>\n * <button ng-click=\"color='green'\">Change to green</button>\n * ```\n *\n * ```js\n * myModule.animation('.colorful', [function() {\n *   return {\n *     addClass: function(element, className, doneFn) {\n *       // do some cool animation and call the doneFn\n *     },\n *     removeClass: function(element, className, doneFn) {\n *       // do some cool animation and call the doneFn\n *     },\n *     setClass: function(element, addedClass, removedClass, doneFn) {\n *       // do some cool animation and call the doneFn\n *     }\n *   }\n * }]);\n * ```\n *\n * ## CSS + JS Animations Together\n *\n * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,\n * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking\n * charge of the animation**:\n *\n * ```html\n * <div ng-if=\"bool\" class=\"slide\">\n *   Slide in and out\n * </div>\n * ```\n *\n * ```js\n * myModule.animation('.slide', [function() {\n *   return {\n *     enter: function(element, doneFn) {\n *       jQuery(element).slideIn(1000, doneFn);\n *     }\n *   }\n * }]);\n * ```\n *\n * ```css\n * .slide.ng-enter {\n *   transition:0.5s linear all;\n *   transform:translateY(-100px);\n * }\n * .slide.ng-enter.ng-enter-active {\n *   transform:translateY(0);\n * }\n * ```\n *\n * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the\n * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from\n * our own JS-based animation code:\n *\n * ```js\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element) {\n*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.\n *       return $animateCss(element, {\n *         event: 'enter',\n *         structural: true\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.\n *\n * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or\n * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that\n * data into `$animateCss` directly:\n *\n * ```js\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element) {\n *       return $animateCss(element, {\n *         event: 'enter',\n *         structural: true,\n *         addClass: 'maroon-setting',\n *         from: { height:0 },\n *         to: { height: 200 }\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * Now we can fill in the rest via our transition CSS code:\n *\n * ```css\n * /&#42; the transition tells ngAnimate to make the animation happen &#42;/\n * .slide.ng-enter { transition:0.5s linear all; }\n *\n * /&#42; this extra CSS class will be absorbed into the transition\n * since the $animateCss code is adding the class &#42;/\n * .maroon-setting { background:red; }\n * ```\n *\n * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.\n *\n * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.\n *\n * ## Animation Anchoring (via `ng-animate-ref`)\n *\n * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between\n * structural areas of an application (like views) by pairing up elements using an attribute\n * called `ng-animate-ref`.\n *\n * Let's say for example we have two views that are managed by `ng-view` and we want to show\n * that there is a relationship between two components situated in within these views. By using the\n * `ng-animate-ref` attribute we can identify that the two components are paired together and we\n * can then attach an animation, which is triggered when the view changes.\n *\n * Say for example we have the following template code:\n *\n * ```html\n * <!-- index.html -->\n * <div ng-view class=\"view-animation\">\n * </div>\n *\n * <!-- home.html -->\n * <a href=\"#/banner-page\">\n *   <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n * </a>\n *\n * <!-- banner-page.html -->\n * <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n * ```\n *\n * Now, when the view changes (once the link is clicked), ngAnimate will examine the\n * HTML contents to see if there is a match reference between any components in the view\n * that is leaving and the view that is entering. It will scan both the view which is being\n * removed (leave) and inserted (enter) to see if there are any paired DOM elements that\n * contain a matching ref value.\n *\n * The two images match since they share the same ref value. ngAnimate will now create a\n * transport element (which is a clone of the first image element) and it will then attempt\n * to animate to the position of the second image element in the next view. For the animation to\n * work a special CSS class called `ng-anchor` will be added to the transported element.\n *\n * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then\n * ngAnimate will handle the entire transition for us as well as the addition and removal of\n * any changes of CSS classes between the elements:\n *\n * ```css\n * .banner.ng-anchor {\n *   /&#42; this animation will last for 1 second since there are\n *          two phases to the animation (an `in` and an `out` phase) &#42;/\n *   transition:0.5s linear all;\n * }\n * ```\n *\n * We also **must** include animations for the views that are being entered and removed\n * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).\n *\n * ```css\n * .view-animation.ng-enter, .view-animation.ng-leave {\n *   transition:0.5s linear all;\n *   position:fixed;\n *   left:0;\n *   top:0;\n *   width:100%;\n * }\n * .view-animation.ng-enter {\n *   transform:translateX(100%);\n * }\n * .view-animation.ng-leave,\n * .view-animation.ng-enter.ng-enter-active {\n *   transform:translateX(0%);\n * }\n * .view-animation.ng-leave.ng-leave-active {\n *   transform:translateX(-100%);\n * }\n * ```\n *\n * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:\n * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away\n * from its origin. Once that animation is over then the `in` stage occurs which animates the\n * element to its destination. The reason why there are two animations is to give enough time\n * for the enter animation on the new element to be ready.\n *\n * The example above sets up a transition for both the in and out phases, but we can also target the out or\n * in phases directly via `ng-anchor-out` and `ng-anchor-in`.\n *\n * ```css\n * .banner.ng-anchor-out {\n *   transition: 0.5s linear all;\n *\n *   /&#42; the scale will be applied during the out animation,\n *          but will be animated away when the in animation runs &#42;/\n *   transform: scale(1.2);\n * }\n *\n * .banner.ng-anchor-in {\n *   transition: 1s linear all;\n * }\n * ```\n *\n *\n *\n *\n * ### Anchoring Demo\n *\n  <example module=\"anchoringExample\"\n           name=\"anchoringExample\"\n           id=\"anchoringExample\"\n           deps=\"angular-animate.js;angular-route.js\"\n           animations=\"true\">\n    <file name=\"index.html\">\n      <a href=\"#/\">Home</a>\n      <hr />\n      <div class=\"view-container\">\n        <div ng-view class=\"view\"></div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])\n        .config(['$routeProvider', function($routeProvider) {\n          $routeProvider.when('/', {\n            templateUrl: 'home.html',\n            controller: 'HomeController as home'\n          });\n          $routeProvider.when('/profile/:id', {\n            templateUrl: 'profile.html',\n            controller: 'ProfileController as profile'\n          });\n        }])\n        .run(['$rootScope', function($rootScope) {\n          $rootScope.records = [\n            { id:1, title: \"Miss Beulah Roob\" },\n            { id:2, title: \"Trent Morissette\" },\n            { id:3, title: \"Miss Ava Pouros\" },\n            { id:4, title: \"Rod Pouros\" },\n            { id:5, title: \"Abdul Rice\" },\n            { id:6, title: \"Laurie Rutherford Sr.\" },\n            { id:7, title: \"Nakia McLaughlin\" },\n            { id:8, title: \"Jordon Blanda DVM\" },\n            { id:9, title: \"Rhoda Hand\" },\n            { id:10, title: \"Alexandrea Sauer\" }\n          ];\n        }])\n        .controller('HomeController', [function() {\n          //empty\n        }])\n        .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {\n          var index = parseInt($routeParams.id, 10);\n          var record = $rootScope.records[index - 1];\n\n          this.title = record.title;\n          this.id = record.id;\n        }]);\n    </file>\n    <file name=\"home.html\">\n      <h2>Welcome to the home page</h1>\n      <p>Please click on an element</p>\n      <a class=\"record\"\n         ng-href=\"#/profile/{{ record.id }}\"\n         ng-animate-ref=\"{{ record.id }}\"\n         ng-repeat=\"record in records\">\n        {{ record.title }}\n      </a>\n    </file>\n    <file name=\"profile.html\">\n      <div class=\"profile record\" ng-animate-ref=\"{{ profile.id }}\">\n        {{ profile.title }}\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .record {\n        display:block;\n        font-size:20px;\n      }\n      .profile {\n        background:black;\n        color:white;\n        font-size:100px;\n      }\n      .view-container {\n        position:relative;\n      }\n      .view-container > .view.ng-animate {\n        position:absolute;\n        top:0;\n        left:0;\n        width:100%;\n        min-height:500px;\n      }\n      .view.ng-enter, .view.ng-leave,\n      .record.ng-anchor {\n        transition:0.5s linear all;\n      }\n      .view.ng-enter {\n        transform:translateX(100%);\n      }\n      .view.ng-enter.ng-enter-active, .view.ng-leave {\n        transform:translateX(0%);\n      }\n      .view.ng-leave.ng-leave-active {\n        transform:translateX(-100%);\n      }\n      .record.ng-anchor-out {\n        background:red;\n      }\n    </file>\n  </example>\n *\n * ### How is the element transported?\n *\n * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting\n * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element\n * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The\n * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match\n * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied\n * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class\n * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element\n * will become visible since the shim class will be removed.\n *\n * ### How is the morphing handled?\n *\n * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out\n * what CSS classes differ between the starting element and the destination element. These different CSS classes\n * will be added/removed on the anchor element and a transition will be applied (the transition that is provided\n * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will\n * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that\n * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since\n * the cloned element is placed inside of root element which is likely close to the body element).\n *\n * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.\n *\n *\n * ## Using $animate in your directive code\n *\n * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?\n * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's\n * imagine we have a greeting box that shows and hides itself when the data changes\n *\n * ```html\n * <greeting-box active=\"onOrOff\">Hi there</greeting-box>\n * ```\n *\n * ```js\n * ngModule.directive('greetingBox', ['$animate', function($animate) {\n *   return function(scope, element, attrs) {\n *     attrs.$observe('active', function(value) {\n *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');\n *     });\n *   });\n * }]);\n * ```\n *\n * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element\n * in our HTML code then we can trigger a CSS or JS animation to happen.\n *\n * ```css\n * /&#42; normally we would create a CSS class to reference on the element &#42;/\n * greeting-box.on { transition:0.5s linear all; background:green; color:white; }\n * ```\n *\n * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's\n * possible be sure to visit the {@link ng.$animate $animate service API page}.\n *\n *\n * ## Callbacks and Promises\n *\n * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger\n * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has\n * ended by chaining onto the returned promise that animation method returns.\n *\n * ```js\n * // somewhere within the depths of the directive\n * $animate.enter(element, parent).then(function() {\n *   //the animation has completed\n * });\n * ```\n *\n * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case\n * anymore.)\n *\n * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering\n * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view\n * routing controller to hook into that:\n *\n * ```js\n * ngModule.controller('HomePageController', ['$animate', function($animate) {\n *   $animate.on('enter', ngViewElement, function(element) {\n *     // the animation for this route has completed\n *   }]);\n * }])\n * ```\n *\n * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)\n */\n\n/**\n * @ngdoc service\n * @name $animate\n * @kind object\n *\n * @description\n * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.\n *\n * Click here {@link ng.$animate to learn more about animations with `$animate`}.\n */\nangular.module('ngAnimate', [])\n  .directive('ngAnimateSwap', ngAnimateSwapDirective)\n\n  .directive('ngAnimateChildren', $$AnimateChildrenDirective)\n  .factory('$$rAFScheduler', $$rAFSchedulerFactory)\n\n  .provider('$$animateQueue', $$AnimateQueueProvider)\n  .provider('$$animation', $$AnimationProvider)\n\n  .provider('$animateCss', $AnimateCssProvider)\n  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)\n\n  .provider('$$animateJs', $$AnimateJsProvider)\n  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);\n\n\n})(window, window.angular);\n"]}