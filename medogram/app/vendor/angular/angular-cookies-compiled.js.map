{"version":3,"sources":["angular-cookies.js"],"names":[],"mappings":"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","file":"angular-cookies-compiled.js","sourcesContent":["/**\n * @license AngularJS v1.5.7\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\n/**\n * @ngdoc module\n * @name ngCookies\n * @description\n *\n * # ngCookies\n *\n * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.\n *\n *\n * <div doc-module-components=\"ngCookies\"></div>\n *\n * See {@link ngCookies.$cookies `$cookies`} for usage.\n */\n\n\nangular.module('ngCookies', ['ng']).\n  /**\n   * @ngdoc provider\n   * @name $cookiesProvider\n   * @description\n   * Use `$cookiesProvider` to change the default behavior of the {@link ngCookies.$cookies $cookies} service.\n   * */\n   provider('$cookies', [function $CookiesProvider() {\n    /**\n     * @ngdoc property\n     * @name $cookiesProvider#defaults\n     * @description\n     *\n     * Object containing default options to pass when setting cookies.\n     *\n     * The object may have following properties:\n     *\n     * - **path** - `{string}` - The cookie will be available only for this path and its\n     *   sub-paths. By default, this is the URL that appears in your `<base>` tag.\n     * - **domain** - `{string}` - The cookie will be available only for this domain and\n     *   its sub-domains. For security reasons the user agent will not accept the cookie\n     *   if the current domain is not a sub-domain of this domain or equal to it.\n     * - **expires** - `{string|Date}` - String of the form \"Wdy, DD Mon YYYY HH:MM:SS GMT\"\n     *   or a Date object indicating the exact date/time this cookie will expire.\n     * - **secure** - `{boolean}` - If `true`, then the cookie will only be available through a\n     *   secured connection.\n     *\n     * Note: By default, the address that appears in your `<base>` tag will be used as the path.\n     * This is important so that cookies will be visible for all routes when html5mode is enabled.\n     *\n     **/\n    var defaults = this.defaults = {};\n\n    function calcOptions(options) {\n      return options ? angular.extend({}, defaults, options) : defaults;\n    }\n\n    /**\n     * @ngdoc service\n     * @name $cookies\n     *\n     * @description\n     * Provides read/write access to browser's cookies.\n     *\n     * <div class=\"alert alert-info\">\n     * Up until Angular 1.3, `$cookies` exposed properties that represented the\n     * current browser cookie values. In version 1.4, this behavior has changed, and\n     * `$cookies` now provides a standard api of getters, setters etc.\n     * </div>\n     *\n     * Requires the {@link ngCookies `ngCookies`} module to be installed.\n     *\n     * @example\n     *\n     * ```js\n     * angular.module('cookiesExample', ['ngCookies'])\n     *   .controller('ExampleController', ['$cookies', function($cookies) {\n     *     // Retrieving a cookie\n     *     var favoriteCookie = $cookies.get('myFavorite');\n     *     // Setting a cookie\n     *     $cookies.put('myFavorite', 'oatmeal');\n     *   }]);\n     * ```\n     */\n    this.$get = ['$$cookieReader', '$$cookieWriter', function($$cookieReader, $$cookieWriter) {\n      return {\n        /**\n         * @ngdoc method\n         * @name $cookies#get\n         *\n         * @description\n         * Returns the value of given cookie key\n         *\n         * @param {string} key Id to use for lookup.\n         * @returns {string} Raw cookie value.\n         */\n        get: function(key) {\n          return $$cookieReader()[key];\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookies#getObject\n         *\n         * @description\n         * Returns the deserialized value of given cookie key\n         *\n         * @param {string} key Id to use for lookup.\n         * @returns {Object} Deserialized cookie value.\n         */\n        getObject: function(key) {\n          var value = this.get(key);\n          return value ? angular.fromJson(value) : value;\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookies#getAll\n         *\n         * @description\n         * Returns a key value object with all the cookies\n         *\n         * @returns {Object} All cookies\n         */\n        getAll: function() {\n          return $$cookieReader();\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookies#put\n         *\n         * @description\n         * Sets a value for given cookie key\n         *\n         * @param {string} key Id for the `value`.\n         * @param {string} value Raw value to be stored.\n         * @param {Object=} options Options object.\n         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}\n         */\n        put: function(key, value, options) {\n          $$cookieWriter(key, value, calcOptions(options));\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookies#putObject\n         *\n         * @description\n         * Serializes and sets a value for given cookie key\n         *\n         * @param {string} key Id for the `value`.\n         * @param {Object} value Value to be stored.\n         * @param {Object=} options Options object.\n         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}\n         */\n        putObject: function(key, value, options) {\n          this.put(key, angular.toJson(value), options);\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookies#remove\n         *\n         * @description\n         * Remove given cookie\n         *\n         * @param {string} key Id of the key-value pair to delete.\n         * @param {Object=} options Options object.\n         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}\n         */\n        remove: function(key, options) {\n          $$cookieWriter(key, undefined, calcOptions(options));\n        }\n      };\n    }];\n  }]);\n\nangular.module('ngCookies').\n/**\n * @ngdoc service\n * @name $cookieStore\n * @deprecated\n * @requires $cookies\n *\n * @description\n * Provides a key-value (string-object) storage, that is backed by session cookies.\n * Objects put or retrieved from this storage are automatically serialized or\n * deserialized by angular's toJson/fromJson.\n *\n * Requires the {@link ngCookies `ngCookies`} module to be installed.\n *\n * <div class=\"alert alert-danger\">\n * **Note:** The $cookieStore service is **deprecated**.\n * Please use the {@link ngCookies.$cookies `$cookies`} service instead.\n * </div>\n *\n * @example\n *\n * ```js\n * angular.module('cookieStoreExample', ['ngCookies'])\n *   .controller('ExampleController', ['$cookieStore', function($cookieStore) {\n *     // Put cookie\n *     $cookieStore.put('myFavorite','oatmeal');\n *     // Get cookie\n *     var favoriteCookie = $cookieStore.get('myFavorite');\n *     // Removing a cookie\n *     $cookieStore.remove('myFavorite');\n *   }]);\n * ```\n */\n factory('$cookieStore', ['$cookies', function($cookies) {\n\n    return {\n      /**\n       * @ngdoc method\n       * @name $cookieStore#get\n       *\n       * @description\n       * Returns the value of given cookie key\n       *\n       * @param {string} key Id to use for lookup.\n       * @returns {Object} Deserialized cookie value, undefined if the cookie does not exist.\n       */\n      get: function(key) {\n        return $cookies.getObject(key);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $cookieStore#put\n       *\n       * @description\n       * Sets a value for given cookie key\n       *\n       * @param {string} key Id for the `value`.\n       * @param {Object} value Value to be stored.\n       */\n      put: function(key, value) {\n        $cookies.putObject(key, value);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $cookieStore#remove\n       *\n       * @description\n       * Remove given cookie\n       *\n       * @param {string} key Id of the key-value pair to delete.\n       */\n      remove: function(key) {\n        $cookies.remove(key);\n      }\n    };\n\n  }]);\n\n/**\n * @name $$cookieWriter\n * @requires $document\n *\n * @description\n * This is a private service for writing cookies\n *\n * @param {string} name Cookie name\n * @param {string=} value Cookie value (if undefined, cookie will be deleted)\n * @param {Object=} options Object with options that need to be stored for the cookie.\n */\nfunction $$CookieWriter($document, $log, $browser) {\n  var cookiePath = $browser.baseHref();\n  var rawDocument = $document[0];\n\n  function buildCookieString(name, value, options) {\n    var path, expires;\n    options = options || {};\n    expires = options.expires;\n    path = angular.isDefined(options.path) ? options.path : cookiePath;\n    if (angular.isUndefined(value)) {\n      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n      value = '';\n    }\n    if (angular.isString(expires)) {\n      expires = new Date(expires);\n    }\n\n    var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    str += path ? ';path=' + path : '';\n    str += options.domain ? ';domain=' + options.domain : '';\n    str += expires ? ';expires=' + expires.toUTCString() : '';\n    str += options.secure ? ';secure' : '';\n\n    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n    // - 300 cookies\n    // - 20 cookies per unique domain\n    // - 4096 bytes per cookie\n    var cookieLength = str.length + 1;\n    if (cookieLength > 4096) {\n      $log.warn(\"Cookie '\" + name +\n        \"' possibly not set or overflowed because it was too large (\" +\n        cookieLength + \" > 4096 bytes)!\");\n    }\n\n    return str;\n  }\n\n  return function(name, value, options) {\n    rawDocument.cookie = buildCookieString(name, value, options);\n  };\n}\n\n$$CookieWriter.$inject = ['$document', '$log', '$browser'];\n\nangular.module('ngCookies').provider('$$cookieWriter', function $$CookieWriterProvider() {\n  this.$get = $$CookieWriter;\n});\n\n\n})(window, window.angular);\n"]}