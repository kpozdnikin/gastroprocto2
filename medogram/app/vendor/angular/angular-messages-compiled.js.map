{"version":3,"sources":["angular-messages.js"],"names":[],"mappings":"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","file":"angular-messages-compiled.js","sourcesContent":["/**\n * @license AngularJS v1.5.7\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\n/* jshint ignore:start */\n// this code is in the core, but not in angular-messages.js\nvar isArray = angular.isArray;\nvar forEach = angular.forEach;\nvar isString = angular.isString;\nvar jqLite = angular.element;\n/* jshint ignore:end */\n\n/**\n * @ngdoc module\n * @name ngMessages\n * @description\n *\n * The `ngMessages` module provides enhanced support for displaying messages within templates\n * (typically within forms or when rendering message objects that return key/value data).\n * Instead of relying on JavaScript code and/or complex ng-if statements within your form template to\n * show and hide error messages specific to the state of an input field, the `ngMessages` and\n * `ngMessage` directives are designed to handle the complexity, inheritance and priority\n * sequencing based on the order of how the messages are defined in the template.\n *\n * Currently, the ngMessages module only contains the code for the `ngMessages`, `ngMessagesInclude`\n * `ngMessage` and `ngMessageExp` directives.\n *\n * # Usage\n * The `ngMessages` directive allows keys in a key/value collection to be associated with a child element\n * (or 'message') that will show or hide based on the truthiness of that key's value in the collection. A common use\n * case for `ngMessages` is to display error messages for inputs using the `$error` object exposed by the\n * {@link ngModel ngModel} directive.\n *\n * The child elements of the `ngMessages` directive are matched to the collection keys by a `ngMessage` or\n * `ngMessageExp` directive. The value of these attributes must match a key in the collection that is provided by\n * the `ngMessages` directive.\n *\n * Consider the following example, which illustrates a typical use case of `ngMessages`. Within the form `myForm` we\n * have a text input named `myField` which is bound to the scope variable `field` using the {@link ngModel ngModel}\n * directive.\n *\n * The `myField` field is a required input of type `email` with a maximum length of 15 characters.\n *\n * ```html\n * <form name=\"myForm\">\n *   <label>\n *     Enter text:\n *     <input type=\"email\" ng-model=\"field\" name=\"myField\" required maxlength=\"15\" />\n *   </label>\n *   <div ng-messages=\"myForm.myField.$error\" role=\"alert\">\n *     <div ng-message=\"required\">Please enter a value for this field.</div>\n *     <div ng-message=\"email\">This field must be a valid email address.</div>\n *     <div ng-message=\"maxlength\">This field can be at most 15 characters long.</div>\n *   </div>\n * </form>\n * ```\n *\n * In order to show error messages corresponding to `myField` we first create an element with an `ngMessages` attribute\n * set to the `$error` object owned by the `myField` input in our `myForm` form.\n *\n * Within this element we then create separate elements for each of the possible errors that `myField` could have.\n * The `ngMessage` attribute is used to declare which element(s) will appear for which error - for example,\n * setting `ng-message=\"required\"` specifies that this particular element should be displayed when there\n * is no value present for the required field `myField` (because the key `required` will be `true` in the object\n * `myForm.myField.$error`).\n *\n * ### Message order\n *\n * By default, `ngMessages` will only display one message for a particular key/value collection at any time. If more\n * than one message (or error) key is currently true, then which message is shown is determined by the order of messages\n * in the HTML template code (messages declared first are prioritised). This mechanism means the developer does not have\n * to prioritise messages using custom JavaScript code.\n *\n * Given the following error object for our example (which informs us that the field `myField` currently has both the\n * `required` and `email` errors):\n *\n * ```javascript\n * <!-- keep in mind that ngModel automatically sets these error flags -->\n * myField.$error = { required : true, email: true, maxlength: false };\n * ```\n * The `required` message will be displayed to the user since it appears before the `email` message in the DOM.\n * Once the user types a single character, the `required` message will disappear (since the field now has a value)\n * but the `email` message will be visible because it is still applicable.\n *\n * ### Displaying multiple messages at the same time\n *\n * While `ngMessages` will by default only display one error element at a time, the `ng-messages-multiple` attribute can\n * be applied to the `ngMessages` container element to cause it to display all applicable error messages at once:\n *\n * ```html\n * <!-- attribute-style usage -->\n * <div ng-messages=\"myForm.myField.$error\" ng-messages-multiple>...</div>\n *\n * <!-- element-style usage -->\n * <ng-messages for=\"myForm.myField.$error\" multiple>...</ng-messages>\n * ```\n *\n * ## Reusing and Overriding Messages\n * In addition to prioritization, ngMessages also allows for including messages from a remote or an inline\n * template. This allows for generic collection of messages to be reused across multiple parts of an\n * application.\n *\n * ```html\n * <script type=\"text/ng-template\" id=\"error-messages\">\n *   <div ng-message=\"required\">This field is required</div>\n *   <div ng-message=\"minlength\">This field is too short</div>\n * </script>\n *\n * <div ng-messages=\"myForm.myField.$error\" role=\"alert\">\n *   <div ng-messages-include=\"error-messages\"></div>\n * </div>\n * ```\n *\n * However, including generic messages may not be useful enough to match all input fields, therefore,\n * `ngMessages` provides the ability to override messages defined in the remote template by redefining\n * them within the directive container.\n *\n * ```html\n * <!-- a generic template of error messages known as \"my-custom-messages\" -->\n * <script type=\"text/ng-template\" id=\"my-custom-messages\">\n *   <div ng-message=\"required\">This field is required</div>\n *   <div ng-message=\"minlength\">This field is too short</div>\n * </script>\n *\n * <form name=\"myForm\">\n *   <label>\n *     Email address\n *     <input type=\"email\"\n *            id=\"email\"\n *            name=\"myEmail\"\n *            ng-model=\"email\"\n *            minlength=\"5\"\n *            required />\n *   </label>\n *   <!-- any ng-message elements that appear BEFORE the ng-messages-include will\n *        override the messages present in the ng-messages-include template -->\n *   <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n *     <!-- this required message has overridden the template message -->\n *     <div ng-message=\"required\">You did not enter your email address</div>\n *\n *     <!-- this is a brand new message and will appear last in the prioritization -->\n *     <div ng-message=\"email\">Your email address is invalid</div>\n *\n *     <!-- and here are the generic error messages -->\n *     <div ng-messages-include=\"my-custom-messages\"></div>\n *   </div>\n * </form>\n * ```\n *\n * In the example HTML code above the message that is set on required will override the corresponding\n * required message defined within the remote template. Therefore, with particular input fields (such\n * email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied\n * while more generic messages can be used to handle other, more general input errors.\n *\n * ## Dynamic Messaging\n * ngMessages also supports using expressions to dynamically change key values. Using arrays and\n * repeaters to list messages is also supported. This means that the code below will be able to\n * fully adapt itself and display the appropriate message when any of the expression data changes:\n *\n * ```html\n * <form name=\"myForm\">\n *   <label>\n *     Email address\n *     <input type=\"email\"\n *            name=\"myEmail\"\n *            ng-model=\"email\"\n *            minlength=\"5\"\n *            required />\n *   </label>\n *   <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n *     <div ng-message=\"required\">You did not enter your email address</div>\n *     <div ng-repeat=\"errorMessage in errorMessages\">\n *       <!-- use ng-message-exp for a message whose key is given by an expression -->\n *       <div ng-message-exp=\"errorMessage.type\">{{ errorMessage.text }}</div>\n *     </div>\n *   </div>\n * </form>\n * ```\n *\n * The `errorMessage.type` expression can be a string value or it can be an array so\n * that multiple errors can be associated with a single error message:\n *\n * ```html\n *   <label>\n *     Email address\n *     <input type=\"email\"\n *            ng-model=\"data.email\"\n *            name=\"myEmail\"\n *            ng-minlength=\"5\"\n *            ng-maxlength=\"100\"\n *            required />\n *   </label>\n *   <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n *     <div ng-message-exp=\"'required'\">You did not enter your email address</div>\n *     <div ng-message-exp=\"['minlength', 'maxlength']\">\n *       Your email must be between 5 and 100 characters long\n *     </div>\n *   </div>\n * ```\n *\n * Feel free to use other structural directives such as ng-if and ng-switch to further control\n * what messages are active and when. Be careful, if you place ng-message on the same element\n * as these structural directives, Angular may not be able to determine if a message is active\n * or not. Therefore it is best to place the ng-message on a child element of the structural\n * directive.\n *\n * ```html\n * <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n *   <div ng-if=\"showRequiredError\">\n *     <div ng-message=\"required\">Please enter something</div>\n *   </div>\n * </div>\n * ```\n *\n * ## Animations\n * If the `ngAnimate` module is active within the application then the `ngMessages`, `ngMessage` and\n * `ngMessageExp` directives will trigger animations whenever any messages are added and removed from\n * the DOM by the `ngMessages` directive.\n *\n * Whenever the `ngMessages` directive contains one or more visible messages then the `.ng-active` CSS\n * class will be added to the element. The `.ng-inactive` CSS class will be applied when there are no\n * messages present. Therefore, CSS transitions and keyframes as well as JavaScript animations can\n * hook into the animations whenever these classes are added/removed.\n *\n * Let's say that our HTML code for our messages container looks like so:\n *\n * ```html\n * <div ng-messages=\"myMessages\" class=\"my-messages\" role=\"alert\">\n *   <div ng-message=\"alert\" class=\"some-message\">...</div>\n *   <div ng-message=\"fail\" class=\"some-message\">...</div>\n * </div>\n * ```\n *\n * Then the CSS animation code for the message container looks like so:\n *\n * ```css\n * .my-messages {\n *   transition:1s linear all;\n * }\n * .my-messages.ng-active {\n *   // messages are visible\n * }\n * .my-messages.ng-inactive {\n *   // messages are hidden\n * }\n * ```\n *\n * Whenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter\n * and leave animation is triggered for each particular element bound to the `ngMessage` directive.\n *\n * Therefore, the CSS code for the inner messages looks like so:\n *\n * ```css\n * .some-message {\n *   transition:1s linear all;\n * }\n *\n * .some-message.ng-enter {}\n * .some-message.ng-enter.ng-enter-active {}\n *\n * .some-message.ng-leave {}\n * .some-message.ng-leave.ng-leave-active {}\n * ```\n *\n * {@link ngAnimate Click here} to learn how to use JavaScript animations or to learn more about ngAnimate.\n */\nangular.module('ngMessages', [])\n\n  /**\n   * @ngdoc directive\n   * @module ngMessages\n   * @name ngMessages\n   * @restrict AE\n   *\n   * @description\n   * `ngMessages` is a directive that is designed to show and hide messages based on the state\n   * of a key/value object that it listens on. The directive itself complements error message\n   * reporting with the `ngModel` $error object (which stores a key/value state of validation errors).\n   *\n   * `ngMessages` manages the state of internal messages within its container element. The internal\n   * messages use the `ngMessage` directive and will be inserted/removed from the page depending\n   * on if they're present within the key/value object. By default, only one message will be displayed\n   * at a time and this depends on the prioritization of the messages within the template. (This can\n   * be changed by using the `ng-messages-multiple` or `multiple` attribute on the directive container.)\n   *\n   * A remote template can also be used to promote message reusability and messages can also be\n   * overridden.\n   *\n   * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.\n   *\n   * @usage\n   * ```html\n   * <!-- using attribute directives -->\n   * <ANY ng-messages=\"expression\" role=\"alert\">\n   *   <ANY ng-message=\"stringValue\">...</ANY>\n   *   <ANY ng-message=\"stringValue1, stringValue2, ...\">...</ANY>\n   *   <ANY ng-message-exp=\"expressionValue\">...</ANY>\n   * </ANY>\n   *\n   * <!-- or by using element directives -->\n   * <ng-messages for=\"expression\" role=\"alert\">\n   *   <ng-message when=\"stringValue\">...</ng-message>\n   *   <ng-message when=\"stringValue1, stringValue2, ...\">...</ng-message>\n   *   <ng-message when-exp=\"expressionValue\">...</ng-message>\n   * </ng-messages>\n   * ```\n   *\n   * @param {string} ngMessages an angular expression evaluating to a key/value object\n   *                 (this is typically the $error object on an ngModel instance).\n   * @param {string=} ngMessagesMultiple|multiple when set, all messages will be displayed with true\n   *\n   * @example\n   * <example name=\"ngMessages-directive\" module=\"ngMessagesExample\"\n   *          deps=\"angular-messages.js\"\n   *          animations=\"true\" fixBase=\"true\">\n   *   <file name=\"index.html\">\n   *     <form name=\"myForm\">\n   *       <label>\n   *         Enter your name:\n   *         <input type=\"text\"\n   *                name=\"myName\"\n   *                ng-model=\"name\"\n   *                ng-minlength=\"5\"\n   *                ng-maxlength=\"20\"\n   *                required />\n   *       </label>\n   *       <pre>myForm.myName.$error = {{ myForm.myName.$error | json }}</pre>\n   *\n   *       <div ng-messages=\"myForm.myName.$error\" style=\"color:maroon\" role=\"alert\">\n   *         <div ng-message=\"required\">You did not enter a field</div>\n   *         <div ng-message=\"minlength\">Your field is too short</div>\n   *         <div ng-message=\"maxlength\">Your field is too long</div>\n   *       </div>\n   *     </form>\n   *   </file>\n   *   <file name=\"script.js\">\n   *     angular.module('ngMessagesExample', ['ngMessages']);\n   *   </file>\n   * </example>\n   */\n  .directive('ngMessages', ['$animate', function($animate) {\n    var ACTIVE_CLASS = 'ng-active';\n    var INACTIVE_CLASS = 'ng-inactive';\n\n    return {\n      require: 'ngMessages',\n      restrict: 'AE',\n      controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {\n        var ctrl = this;\n        var latestKey = 0;\n        var nextAttachId = 0;\n\n        this.getAttachId = function getAttachId() { return nextAttachId++; };\n\n        var messages = this.messages = {};\n        var renderLater, cachedCollection;\n\n        this.render = function(collection) {\n          collection = collection || {};\n\n          renderLater = false;\n          cachedCollection = collection;\n\n          // this is true if the attribute is empty or if the attribute value is truthy\n          var multiple = isAttrTruthy($scope, $attrs.ngMessagesMultiple) ||\n                         isAttrTruthy($scope, $attrs.multiple);\n\n          var unmatchedMessages = [];\n          var matchedKeys = {};\n          var messageItem = ctrl.head;\n          var messageFound = false;\n          var totalMessages = 0;\n\n          // we use != instead of !== to allow for both undefined and null values\n          while (messageItem != null) {\n            totalMessages++;\n            var messageCtrl = messageItem.message;\n\n            var messageUsed = false;\n            if (!messageFound) {\n              forEach(collection, function(value, key) {\n                if (!messageUsed && truthy(value) && messageCtrl.test(key)) {\n                  // this is to prevent the same error name from showing up twice\n                  if (matchedKeys[key]) return;\n                  matchedKeys[key] = true;\n\n                  messageUsed = true;\n                  messageCtrl.attach();\n                }\n              });\n            }\n\n            if (messageUsed) {\n              // unless we want to display multiple messages then we should\n              // set a flag here to avoid displaying the next message in the list\n              messageFound = !multiple;\n            } else {\n              unmatchedMessages.push(messageCtrl);\n            }\n\n            messageItem = messageItem.next;\n          }\n\n          forEach(unmatchedMessages, function(messageCtrl) {\n            messageCtrl.detach();\n          });\n\n          unmatchedMessages.length !== totalMessages\n              ? $animate.setClass($element, ACTIVE_CLASS, INACTIVE_CLASS)\n              : $animate.setClass($element, INACTIVE_CLASS, ACTIVE_CLASS);\n        };\n\n        $scope.$watchCollection($attrs.ngMessages || $attrs['for'], ctrl.render);\n\n        // If the element is destroyed, proactively destroy all the currently visible messages\n        $element.on('$destroy', function() {\n          forEach(messages, function(item) {\n            item.message.detach();\n          });\n        });\n\n        this.reRender = function() {\n          if (!renderLater) {\n            renderLater = true;\n            $scope.$evalAsync(function() {\n              if (renderLater) {\n                cachedCollection && ctrl.render(cachedCollection);\n              }\n            });\n          }\n        };\n\n        this.register = function(comment, messageCtrl) {\n          var nextKey = latestKey.toString();\n          messages[nextKey] = {\n            message: messageCtrl\n          };\n          insertMessageNode($element[0], comment, nextKey);\n          comment.$$ngMessageNode = nextKey;\n          latestKey++;\n\n          ctrl.reRender();\n        };\n\n        this.deregister = function(comment) {\n          var key = comment.$$ngMessageNode;\n          delete comment.$$ngMessageNode;\n          removeMessageNode($element[0], comment, key);\n          delete messages[key];\n          ctrl.reRender();\n        };\n\n        function findPreviousMessage(parent, comment) {\n          var prevNode = comment;\n          var parentLookup = [];\n\n          while (prevNode && prevNode !== parent) {\n            var prevKey = prevNode.$$ngMessageNode;\n            if (prevKey && prevKey.length) {\n              return messages[prevKey];\n            }\n\n            // dive deeper into the DOM and examine its children for any ngMessage\n            // comments that may be in an element that appears deeper in the list\n            if (prevNode.childNodes.length && parentLookup.indexOf(prevNode) === -1) {\n              parentLookup.push(prevNode);\n              prevNode = prevNode.childNodes[prevNode.childNodes.length - 1];\n            } else if (prevNode.previousSibling) {\n              prevNode = prevNode.previousSibling;\n            } else {\n              prevNode = prevNode.parentNode;\n              parentLookup.push(prevNode);\n            }\n          }\n        }\n\n        function insertMessageNode(parent, comment, key) {\n          var messageNode = messages[key];\n          if (!ctrl.head) {\n            ctrl.head = messageNode;\n          } else {\n            var match = findPreviousMessage(parent, comment);\n            if (match) {\n              messageNode.next = match.next;\n              match.next = messageNode;\n            } else {\n              messageNode.next = ctrl.head;\n              ctrl.head = messageNode;\n            }\n          }\n        }\n\n        function removeMessageNode(parent, comment, key) {\n          var messageNode = messages[key];\n\n          var match = findPreviousMessage(parent, comment);\n          if (match) {\n            match.next = messageNode.next;\n          } else {\n            ctrl.head = messageNode.next;\n          }\n        }\n      }]\n    };\n\n    function isAttrTruthy(scope, attr) {\n     return (isString(attr) && attr.length === 0) || //empty attribute\n            truthy(scope.$eval(attr));\n    }\n\n    function truthy(val) {\n      return isString(val) ? val.length : !!val;\n    }\n  }])\n\n  /**\n   * @ngdoc directive\n   * @name ngMessagesInclude\n   * @restrict AE\n   * @scope\n   *\n   * @description\n   * `ngMessagesInclude` is a directive with the purpose to import existing ngMessage template\n   * code from a remote template and place the downloaded template code into the exact spot\n   * that the ngMessagesInclude directive is placed within the ngMessages container. This allows\n   * for a series of pre-defined messages to be reused and also allows for the developer to\n   * determine what messages are overridden due to the placement of the ngMessagesInclude directive.\n   *\n   * @usage\n   * ```html\n   * <!-- using attribute directives -->\n   * <ANY ng-messages=\"expression\" role=\"alert\">\n   *   <ANY ng-messages-include=\"remoteTplString\">...</ANY>\n   * </ANY>\n   *\n   * <!-- or by using element directives -->\n   * <ng-messages for=\"expression\" role=\"alert\">\n   *   <ng-messages-include src=\"expressionValue1\">...</ng-messages-include>\n   * </ng-messages>\n   * ```\n   *\n   * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.\n   *\n   * @param {string} ngMessagesInclude|src a string value corresponding to the remote template.\n   */\n  .directive('ngMessagesInclude',\n    ['$templateRequest', '$document', '$compile', function($templateRequest, $document, $compile) {\n\n    return {\n      restrict: 'AE',\n      require: '^^ngMessages', // we only require this for validation sake\n      link: function($scope, element, attrs) {\n        var src = attrs.ngMessagesInclude || attrs.src;\n        $templateRequest(src).then(function(html) {\n          if ($scope.$$destroyed) return;\n\n          if (isString(html) && !html.trim()) {\n            // Empty template - nothing to compile\n            replaceElementWithMarker(element, src);\n          } else {\n            // Non-empty template - compile and link\n            $compile(html)($scope, function(contents) {\n              element.after(contents);\n              replaceElementWithMarker(element, src);\n            });\n          }\n        });\n      }\n    };\n\n    // Helpers\n    function replaceElementWithMarker(element, src) {\n      // A comment marker is placed for debugging purposes\n      var comment = $compile.$$createComment ?\n          $compile.$$createComment('ngMessagesInclude', src) :\n          $document[0].createComment(' ngMessagesInclude: ' + src + ' ');\n      var marker = jqLite(comment);\n      element.after(marker);\n\n      // Don't pollute the DOM anymore by keeping an empty directive element\n      element.remove();\n    }\n  }])\n\n  /**\n   * @ngdoc directive\n   * @name ngMessage\n   * @restrict AE\n   * @scope\n   *\n   * @description\n   * `ngMessage` is a directive with the purpose to show and hide a particular message.\n   * For `ngMessage` to operate, a parent `ngMessages` directive on a parent DOM element\n   * must be situated since it determines which messages are visible based on the state\n   * of the provided key/value map that `ngMessages` listens on.\n   *\n   * More information about using `ngMessage` can be found in the\n   * {@link module:ngMessages `ngMessages` module documentation}.\n   *\n   * @usage\n   * ```html\n   * <!-- using attribute directives -->\n   * <ANY ng-messages=\"expression\" role=\"alert\">\n   *   <ANY ng-message=\"stringValue\">...</ANY>\n   *   <ANY ng-message=\"stringValue1, stringValue2, ...\">...</ANY>\n   * </ANY>\n   *\n   * <!-- or by using element directives -->\n   * <ng-messages for=\"expression\" role=\"alert\">\n   *   <ng-message when=\"stringValue\">...</ng-message>\n   *   <ng-message when=\"stringValue1, stringValue2, ...\">...</ng-message>\n   * </ng-messages>\n   * ```\n   *\n   * @param {expression} ngMessage|when a string value corresponding to the message key.\n   */\n  .directive('ngMessage', ngMessageDirectiveFactory())\n\n\n  /**\n   * @ngdoc directive\n   * @name ngMessageExp\n   * @restrict AE\n   * @priority 1\n   * @scope\n   *\n   * @description\n   * `ngMessageExp` is a directive with the purpose to show and hide a particular message.\n   * For `ngMessageExp` to operate, a parent `ngMessages` directive on a parent DOM element\n   * must be situated since it determines which messages are visible based on the state\n   * of the provided key/value map that `ngMessages` listens on.\n   *\n   * @usage\n   * ```html\n   * <!-- using attribute directives -->\n   * <ANY ng-messages=\"expression\">\n   *   <ANY ng-message-exp=\"expressionValue\">...</ANY>\n   * </ANY>\n   *\n   * <!-- or by using element directives -->\n   * <ng-messages for=\"expression\">\n   *   <ng-message when-exp=\"expressionValue\">...</ng-message>\n   * </ng-messages>\n   * ```\n   *\n   * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.\n   *\n   * @param {expression} ngMessageExp|whenExp an expression value corresponding to the message key.\n   */\n  .directive('ngMessageExp', ngMessageDirectiveFactory());\n\nfunction ngMessageDirectiveFactory() {\n  return ['$animate', function($animate) {\n    return {\n      restrict: 'AE',\n      transclude: 'element',\n      priority: 1, // must run before ngBind, otherwise the text is set on the comment\n      terminal: true,\n      require: '^^ngMessages',\n      link: function(scope, element, attrs, ngMessagesCtrl, $transclude) {\n        var commentNode = element[0];\n\n        var records;\n        var staticExp = attrs.ngMessage || attrs.when;\n        var dynamicExp = attrs.ngMessageExp || attrs.whenExp;\n        var assignRecords = function(items) {\n          records = items\n              ? (isArray(items)\n                  ? items\n                  : items.split(/[\\s,]+/))\n              : null;\n          ngMessagesCtrl.reRender();\n        };\n\n        if (dynamicExp) {\n          assignRecords(scope.$eval(dynamicExp));\n          scope.$watchCollection(dynamicExp, assignRecords);\n        } else {\n          assignRecords(staticExp);\n        }\n\n        var currentElement, messageCtrl;\n        ngMessagesCtrl.register(commentNode, messageCtrl = {\n          test: function(name) {\n            return contains(records, name);\n          },\n          attach: function() {\n            if (!currentElement) {\n              $transclude(function(elm, newScope) {\n                $animate.enter(elm, null, element);\n                currentElement = elm;\n\n                // Each time we attach this node to a message we get a new id that we can match\n                // when we are destroying the node later.\n                var $$attachId = currentElement.$$attachId = ngMessagesCtrl.getAttachId();\n\n                // in the event that the element or a parent element is destroyed\n                // by another structural directive then it's time\n                // to deregister the message from the controller\n                currentElement.on('$destroy', function() {\n                  if (currentElement && currentElement.$$attachId === $$attachId) {\n                    ngMessagesCtrl.deregister(commentNode);\n                    messageCtrl.detach();\n                  }\n                  newScope.$destroy();\n                });\n              });\n            }\n          },\n          detach: function() {\n            if (currentElement) {\n              var elm = currentElement;\n              currentElement = null;\n              $animate.leave(elm);\n            }\n          }\n        });\n      }\n    };\n  }];\n\n  function contains(collection, key) {\n    if (collection) {\n      return isArray(collection)\n          ? collection.indexOf(key) >= 0\n          : collection.hasOwnProperty(key);\n    }\n  }\n}\n\n\n})(window, window.angular);\n"]}