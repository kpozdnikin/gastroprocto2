{"version":3,"sources":["bigint.js"],"names":[],"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","file":"bigint-compiled.js","sourcesContent":["////////////////////////////////////////////////////////////////////////////////////////\n// Big Integer Library v. 5.5\n// Created 2000, last modified 2013\n// Leemon Baird\n// www.leemon.com\n//\n// Version history:\n// v 5.5  17 Mar 2013\n//   - two lines of a form like \"if (x<0) x+=n\" had the \"if\" changed to \"while\" to \n//     handle the case when x<-n. (Thanks to James Ansell for finding that bug)\n// v 5.4  3 Oct 2009\n//   - added \"var i\" to greaterShift() so i is not global. (Thanks to PŽter Szab— for finding that bug)\n//\n// v 5.3  21 Sep 2009\n//   - added randProbPrime(k) for probable primes\n//   - unrolled loop in mont_ (slightly faster)\n//   - millerRabin now takes a bigInt parameter rather than an int\n//\n// v 5.2  15 Sep 2009\n//   - fixed capitalization in call to int2bigInt in randBigInt\n//     (thanks to Emili Evripidou, Reinhold Behringer, and Samuel Macaleese for finding that bug)\n//\n// v 5.1  8 Oct 2007 \n//   - renamed inverseModInt_ to inverseModInt since it doesn't change its parameters\n//   - added functions GCD and randBigInt, which call GCD_ and randBigInt_\n//   - fixed a bug found by Rob Visser (see comment with his name below)\n//   - improved comments\n//\n// This file is public domain.   You can use it for any purpose without restriction.\n// I do not guarantee that it is correct, so use it at your own risk.  If you use \n// it for something interesting, I'd appreciate hearing about it.  If you find \n// any bugs or make any improvements, I'd appreciate hearing about those too.\n// It would also be nice if my name and URL were left in the comments.  But none \n// of that is required.\n//\n// This code defines a bigInt library for arbitrary-precision integers.\n// A bigInt is an array of integers storing the value in chunks of bpe bits, \n// little endian (buff[0] is the least significant word).\n// Negative bigInts are stored two's complement.  Almost all the functions treat\n// bigInts as nonnegative.  The few that view them as two's complement say so\n// in their comments.  Some functions assume their parameters have at least one \n// leading zero element. Functions with an underscore at the end of the name put\n// their answer into one of the arrays passed in, and have unpredictable behavior \n// in case of overflow, so the caller must make sure the arrays are big enough to \n// hold the answer.  But the average user should never have to call any of the \n// underscored functions.  Each important underscored function has a wrapper function \n// of the same name without the underscore that takes care of the details for you.  \n// For each underscored function where a parameter is modified, that same variable \n// must not be used as another argument too.  So, you cannot square x by doing \n// multMod_(x,x,n).  You must use squareMod_(x,n) instead, or do y=dup(x); multMod_(x,y,n).\n// Or simply use the multMod(x,x,n) function without the underscore, where\n// such issues never arise, because non-underscored functions never change\n// their parameters; they always allocate new memory for the answer that is returned.\n//\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\n// For most functions, if it needs a BigInt as a local variable it will actually use\n// a global, and will only allocate to it only when it's not the right size.  This ensures\n// that when a function is called repeatedly with same-sized parameters, it only allocates\n// memory on the first call.\n//\n// Note that for cryptographic purposes, the calls to Math.random() must \n// be replaced with calls to a better pseudorandom number generator.\n//\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer \n// can be negative.  Negative bigInts are 2s complement.\n// \n// The following functions do not modify their inputs.\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\n// Those returning boolean or int will not allocate memory except possibly on the first \n// time they're called with a given parameter size.\n// \n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.  \n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\n// bigInt  dup(x)                 //return a copy of bigInt x\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\n// Array   findPrimes(n)          //return array of all primes less than integer n\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\n// boolean isZero(x)              //is the bigInt x equal to zero?\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\n// boolean negative(x)            //is bigInt x negative?\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\n//\n//\n// The following functions each have a non-underscored version, which most users should call instead.\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array \n// passed in is large enough to hold the result. \n//\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\n// void    add_(x,y)             //do x=x+y for bigInts x and y\n// void    copy_(x,y)            //do x=y on bigInts x and y\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\n//\n// The following functions do NOT have a non-underscored version. \n// They each write a bigInt result to one or more parameters.  The caller is responsible for\n// ensuring the arrays passed in are large enough to hold the results. \n//\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\n// int  eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\n//\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\n//    mont_()             = algorithm 14.36, Montgomery multiplication\n//    divide_()           = algorithm 14.20  Multiple-precision division\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\n//\n// Profiling shows:\n//     randTruePrime_() spends:\n//         10% of its time in calls to powMod_()\n//         85% of its time in calls to millerRabin()\n//     millerRabin() spends:\n//         99% of its time in calls to powMod_()   (always with a base of 2)\n//     powMod_() spends:\n//         94% of its time in calls to mont_()  (almost always with x==y)\n//\n// This suggests there are several ways to speed up this library slightly:\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\n//         -- this should especially focus on being fast when raising 2 to a power mod n\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\n//       within the loop when all the parameters are the same length.\n//\n// There are several ideas that look like they wouldn't help much at all:\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\n//       Montgomery reduction, but that's obviously wrong.\n////////////////////////////////////////////////////////////////////////////////////////\n\n//globals\nbpe=0;         //bits stored per array element\nmask=0;        //AND this with an array element to chop it down to bpe bits\nradix=mask+1;  //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.\n\n//the digits for converting to different bases\ndigitsStr='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\\\\'\\\"+-';\n\n//initialize the global variables\nfor (bpe=0; (1<<(bpe+1)) > (1<<bpe); bpe++);  //bpe=number of bits in the mantissa on this platform\nbpe>>=1;                   //bpe=number of bits in one element of the array representing the bigInt\nmask=(1<<bpe)-1;           //AND the mask with an integer to get its bpe least significant bits\nradix=mask+1;              //2^bpe.  a single 1 bit to the left of the first bit of mask\none=int2bigInt(1,1,1);     //constant used in powMod_()\n\n//the following global variables are scratchpad memory to \n//reduce dynamic memory allocation in the inner loop\nt=new Array(0);\nss=t;       //used in mult_()\ns0=t;       //used in multMod_(), squareMod_() \ns1=t;       //used in powMod_(), multMod_(), squareMod_() \ns2=t;       //used in powMod_(), multMod_()\ns3=t;       //used in powMod_()\ns4=t; s5=t; //used in mod_()\ns6=t;       //used in bigInt2str()\ns7=t;       //used in powMod_()\nT=t;        //used in GCD_()\nsa=t;       //used in mont_()\nmr_x1=t; mr_r=t; mr_a=t;                                      //used in millerRabin()\neg_v=t; eg_u=t; eg_A=t; eg_B=t; eg_C=t; eg_D=t;               //used in eGCD_(), inverseMod_()\nmd_q1=t; md_q2=t; md_q3=t; md_r=t; md_r1=t; md_r2=t; md_tt=t; //used in mod_()\n\nprimes=t; pows=t; s_i=t; s_i2=t; s_R=t; s_rm=t; s_q=t; s_n1=t; \n  s_a=t; s_r2=t; s_n=t; s_b=t; s_d=t; s_x1=t; s_x2=t, s_aa=t; //used in randTruePrime_()\n  \nrpprb=t; //used in randProbPrimeRounds() (which also uses \"primes\")\n\n////////////////////////////////////////////////////////////////////////////////////////\n\n\n//return array of all primes less than integer n\nfunction findPrimes(n) {\n  var i,s,p,ans;\n  s=new Array(n);\n  for (i=0;i<n;i++)\n    s[i]=0;\n  s[0]=2;\n  p=0;    //first p elements of s are primes, the rest are a sieve\n  for(;s[p]<n;) {                  //s[p] is the pth prime\n    for(i=s[p]*s[p]; i<n; i+=s[p]) //mark multiples of s[p]\n      s[i]=1;\n    p++;\n    s[p]=s[p-1]+1;\n    for(; s[p]<n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)\n  }\n  ans=new Array(p);\n  for(i=0;i<p;i++)\n    ans[i]=s[i];\n  return ans;\n}\n\n\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\n//x is a bigInt, and b is an integer, with b<x\nfunction millerRabinInt(x,b) {\n  if (mr_x1.length!=x.length) {\n    mr_x1=dup(x);\n    mr_r=dup(x);\n    mr_a=dup(x);\n  }\n\n  copyInt_(mr_a,b);\n  return millerRabin(x,mr_a);\n}\n\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\n//x and b are bigInts with b<x\nfunction millerRabin(x,b) {\n  var i,j,k,s;\n\n  if (mr_x1.length!=x.length) {\n    mr_x1=dup(x);\n    mr_r=dup(x);\n    mr_a=dup(x);\n  }\n\n  copy_(mr_a,b);\n  copy_(mr_r,x);\n  copy_(mr_x1,x);\n\n  addInt_(mr_r,-1);\n  addInt_(mr_x1,-1);\n\n  //s=the highest power of two that divides mr_r\n  k=0;\n  for (i=0;i<mr_r.length;i++)\n    for (j=1;j<mask;j<<=1)\n      if (x[i] & j) {\n        s=(k<mr_r.length+bpe ? k : 0); \n         i=mr_r.length;\n         j=mask;\n      } else\n        k++;\n\n  if (s)                \n    rightShift_(mr_r,s);\n\n  powMod_(mr_a,mr_r,x);\n\n  if (!equalsInt(mr_a,1) && !equals(mr_a,mr_x1)) {\n    j=1;\n    while (j<=s-1 && !equals(mr_a,mr_x1)) {\n      squareMod_(mr_a,x);\n      if (equalsInt(mr_a,1)) {\n        return 0;\n      }\n      j++;\n    }\n    if (!equals(mr_a,mr_x1)) {\n      return 0;\n    }\n  }\n  return 1;  \n}\n\n//returns how many bits long the bigInt is, not counting leading zeros.\nfunction bitSize(x) {\n  var j,z,w;\n  for (j=x.length-1; (x[j]==0) && (j>0); j--);\n  for (z=0,w=x[j]; w; (w>>=1),z++);\n  z+=bpe*j;\n  return z;\n}\n\n//return a copy of x with at least n elements, adding leading zeros if needed\nfunction expand(x,n) {\n  var ans=int2bigInt(0,(x.length>n ? x.length : n)*bpe,0);\n  copy_(ans,x);\n  return ans;\n}\n\n//return a k-bit true random prime using Maurer's algorithm.\nfunction randTruePrime(k) {\n  var ans=int2bigInt(0,k,0);\n  randTruePrime_(ans,k);\n  return trim(ans,1);\n}\n\n//return a k-bit random probable prime with probability of error < 2^-80\nfunction randProbPrime(k) {\n  if (k>=600) return randProbPrimeRounds(k,2); //numbers from HAC table 4.3\n  if (k>=550) return randProbPrimeRounds(k,4);\n  if (k>=500) return randProbPrimeRounds(k,5);\n  if (k>=400) return randProbPrimeRounds(k,6);\n  if (k>=350) return randProbPrimeRounds(k,7);\n  if (k>=300) return randProbPrimeRounds(k,9);\n  if (k>=250) return randProbPrimeRounds(k,12); //numbers from HAC table 4.4\n  if (k>=200) return randProbPrimeRounds(k,15);\n  if (k>=150) return randProbPrimeRounds(k,18);\n  if (k>=100) return randProbPrimeRounds(k,27);\n              return randProbPrimeRounds(k,40); //number from HAC remark 4.26 (only an estimate)\n}\n\n//return a k-bit probable random prime using n rounds of Miller Rabin (after trial division with small primes)\t\nfunction randProbPrimeRounds(k,n) {\n  var ans, i, divisible, B; \n  B=30000;  //B is largest prime to use in trial division\n  ans=int2bigInt(0,k,0);\n  \n  //optimization: try larger and smaller B to find the best limit.\n  \n  if (primes.length==0)\n    primes=findPrimes(30000);  //check for divisibility by primes <=30000\n\n  if (rpprb.length!=ans.length)\n    rpprb=dup(ans);\n\n  for (;;) { //keep trying random values for ans until one appears to be prime\n    //optimization: pick a random number times L=2*3*5*...*p, plus a \n    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.\n    //   This can reduce the amount of random number generation.\n    \n    randBigInt_(ans,k,0); //ans = a random odd number to check\n    ans[0] |= 1; \n    divisible=0;\n  \n    //check ans for divisibility by small primes up to B\n    for (i=0; (i<primes.length) && (primes[i]<=B); i++)\n      if (modInt(ans,primes[i])==0 && !equalsInt(ans,primes[i])) {\n        divisible=1;\n        break;\n      }      \n    \n    //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.\n    \n    //do n rounds of Miller Rabin, with random bases less than ans\n    for (i=0; i<n && !divisible; i++) {\n      randBigInt_(rpprb,k,0);\n      while(!greater(ans,rpprb)) //pick a random rpprb that's < ans\n        randBigInt_(rpprb,k,0);\n      if (!millerRabin(ans,rpprb))\n        divisible=1;\n    }\n    \n    if(!divisible)\n      return ans;\n  }  \n}\n\n//return a new bigInt equal to (x mod n) for bigInts x and n.\nfunction mod(x,n) {\n  var ans=dup(x);\n  mod_(ans,n);\n  return trim(ans,1);\n}\n\n//return (x+n) where x is a bigInt and n is an integer.\nfunction addInt(x,n) {\n  var ans=expand(x,x.length+1);\n  addInt_(ans,n);\n  return trim(ans,1);\n}\n\n//return x*y for bigInts x and y. This is faster when y<x.\nfunction mult(x,y) {\n  var ans=expand(x,x.length+y.length);\n  mult_(ans,y);\n  return trim(ans,1);\n}\n\n//return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\nfunction powMod(x,y,n) {\n  var ans=expand(x,n.length);  \n  powMod_(ans,trim(y,2),trim(n,2),0);  //this should work without the trim, but doesn't\n  return trim(ans,1);\n}\n\n//return (x-y) for bigInts x and y.  Negative answers will be 2s complement\nfunction sub(x,y) {\n  var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1)); \n  sub_(ans,y);\n  return trim(ans,1);\n}\n\n//return (x+y) for bigInts x and y.  \nfunction add(x,y) {\n  var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1)); \n  add_(ans,y);\n  return trim(ans,1);\n}\n\n//return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\nfunction inverseMod(x,n) {\n  var ans=expand(x,n.length); \n  var s;\n  s=inverseMod_(ans,n);\n  return s ? trim(ans,1) : null;\n}\n\n//return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\nfunction multMod(x,y,n) {\n  var ans=expand(x,n.length);\n  multMod_(ans,y,n);\n  return trim(ans,1);\n}\n\n//generate a k-bit true random prime using Maurer's algorithm,\n//and put it into ans.  The bigInt ans must be large enough to hold it.\nfunction randTruePrime_(ans,k) {\n  var c,m,pm,dd,j,r,B,divisible,z,zz,recSize;\n\n  if (primes.length==0)\n    primes=findPrimes(30000);  //check for divisibility by primes <=30000\n\n  if (pows.length==0) {\n    pows=new Array(512);\n    for (j=0;j<512;j++) {\n      pows[j]=Math.pow(2,j/511.-1.);\n    }\n  }\n\n  //c and m should be tuned for a particular machine and value of k, to maximize speed\n  c=0.1;  //c=0.1 in HAC\n  m=20;   //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n  recLimit=20; //stop recursion when k <=recLimit.  Must have recLimit >= 2\n\n  if (s_i2.length!=ans.length) {\n    s_i2=dup(ans);\n    s_R =dup(ans);\n    s_n1=dup(ans);\n    s_r2=dup(ans);\n    s_d =dup(ans);\n    s_x1=dup(ans);\n    s_x2=dup(ans);\n    s_b =dup(ans);\n    s_n =dup(ans);\n    s_i =dup(ans);\n    s_rm=dup(ans);\n    s_q =dup(ans);\n    s_a =dup(ans);\n    s_aa=dup(ans);\n  }\n\n  if (k <= recLimit) {  //generate small random primes by trial division up to its square root\n    pm=(1<<((k+2)>>1))-1; //pm is binary number with all ones, just over sqrt(2^k)\n    copyInt_(ans,0);\n    for (dd=1;dd;) {\n      dd=0;\n      ans[0]= 1 | (1<<(k-1)) | Math.floor(Math.random()*(1<<k));  //random, k-bit, odd integer, with msb 1\n      for (j=1;(j<primes.length) && ((primes[j]&pm)==primes[j]);j++) { //trial division by all primes 3...sqrt(2^k)\n        if (0==(ans[0]%primes[j])) {\n          dd=1;\n          break;\n        }\n      }\n    }\n    carry_(ans);\n    return;\n  }\n\n  B=c*k*k;    //try small primes up to B (or all the primes[] array if the largest is less than B).\n  if (k>2*m)  //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n    for (r=1; k-k*r<=m; )\n      r=pows[Math.floor(Math.random()*512)];   //r=Math.pow(2,Math.random()-1);\n  else\n    r=.5;\n\n  //simulation suggests the more complex algorithm using r=.333 is only slightly faster.\n\n  recSize=Math.floor(r*k)+1;\n\n  randTruePrime_(s_q,recSize);\n  copyInt_(s_i2,0);\n  s_i2[Math.floor((k-2)/bpe)] |= (1<<((k-2)%bpe));   //s_i2=2^(k-2)\n  divide_(s_i2,s_q,s_i,s_rm);                        //s_i=floor((2^(k-1))/(2q))\n\n  z=bitSize(s_i);\n\n  for (;;) {\n    for (;;) {  //generate z-bit numbers until one falls in the range [0,s_i-1]\n      randBigInt_(s_R,z,0);\n      if (greater(s_i,s_R))\n        break;\n    }                //now s_R is in the range [0,s_i-1]\n    addInt_(s_R,1);  //now s_R is in the range [1,s_i]\n    add_(s_R,s_i);   //now s_R is in the range [s_i+1,2*s_i]\n\n    copy_(s_n,s_q);\n    mult_(s_n,s_R); \n    multInt_(s_n,2);\n    addInt_(s_n,1);    //s_n=2*s_R*s_q+1\n    \n    copy_(s_r2,s_R);\n    multInt_(s_r2,2);  //s_r2=2*s_R\n\n    //check s_n for divisibility by small primes up to B\n    for (divisible=0,j=0; (j<primes.length) && (primes[j]<B); j++)\n      if (modInt(s_n,primes[j])==0 && !equalsInt(s_n,primes[j])) {\n        divisible=1;\n        break;\n      }      \n\n    if (!divisible)    //if it passes small primes check, then try a single Miller-Rabin base 2\n      if (!millerRabinInt(s_n,2)) //this line represents 75% of the total runtime for randTruePrime_ \n        divisible=1;\n\n    if (!divisible) {  //if it passes that test, continue checking s_n\n      addInt_(s_n,-3);\n      for (j=s_n.length-1;(s_n[j]==0) && (j>0); j--);  //strip leading zeros\n      for (zz=0,w=s_n[j]; w; (w>>=1),zz++);\n      zz+=bpe*j;                             //zz=number of bits in s_n, ignoring leading zeros\n      for (;;) {  //generate z-bit numbers until one falls in the range [0,s_n-1]\n        randBigInt_(s_a,zz,0);\n        if (greater(s_n,s_a))\n          break;\n      }                //now s_a is in the range [0,s_n-1]\n      addInt_(s_n,3);  //now s_a is in the range [0,s_n-4]\n      addInt_(s_a,2);  //now s_a is in the range [2,s_n-2]\n      copy_(s_b,s_a);\n      copy_(s_n1,s_n);\n      addInt_(s_n1,-1);\n      powMod_(s_b,s_n1,s_n);   //s_b=s_a^(s_n-1) modulo s_n\n      addInt_(s_b,-1);\n      if (isZero(s_b)) {\n        copy_(s_b,s_a);\n        powMod_(s_b,s_r2,s_n);\n        addInt_(s_b,-1);\n        copy_(s_aa,s_n);\n        copy_(s_d,s_b);\n        GCD_(s_d,s_n);  //if s_b and s_n are relatively prime, then s_n is a prime\n        if (equalsInt(s_d,1)) {\n          copy_(ans,s_aa);\n          return;     //if we've made it this far, then s_n is absolutely guaranteed to be prime\n        }\n      }\n    }\n  }\n}\n\n//Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\nfunction randBigInt(n,s) {\n  var a,b;\n  a=Math.floor((n-1)/bpe)+2; //# array elements to hold the BigInt with a leading 0 element\n  b=int2bigInt(0,0,a);\n  randBigInt_(b,n,s);\n  return b;\n}\n\n//Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.\n//Array b must be big enough to hold the result. Must have n>=1\nfunction randBigInt_(b,n,s) {\n  var i,a;\n  for (i=0;i<b.length;i++)\n    b[i]=0;\n  a=Math.floor((n-1)/bpe)+1; //# array elements to hold the BigInt\n  for (i=0;i<a;i++) {\n    b[i]=Math.floor(Math.random()*(1<<(bpe-1)));\n  }\n  b[a-1] &= (2<<((n-1)%bpe))-1;\n  if (s==1)\n    b[a-1] |= (1<<((n-1)%bpe));\n}\n\n//Return the greatest common divisor of bigInts x and y (each with same number of elements).\nfunction GCD(x,y) {\n  var xc,yc;\n  xc=dup(x);\n  yc=dup(y);\n  GCD_(xc,yc);\n  return xc;\n}\n\n//set x to the greatest common divisor of bigInts x and y (each with same number of elements).\n//y is destroyed.\nfunction GCD_(x,y) {\n  var i,xp,yp,A,B,C,D,q,sing;\n  if (T.length!=x.length)\n    T=dup(x);\n\n  sing=1;\n  while (sing) { //while y has nonzero elements other than y[0]\n    sing=0;\n    for (i=1;i<y.length;i++) //check if y has nonzero elements other than 0\n      if (y[i]) {\n        sing=1;\n        break;\n      }\n    if (!sing) break; //quit when y all zero elements except possibly y[0]\n\n    for (i=x.length;!x[i] && i>=0;i--);  //find most significant element of x\n    xp=x[i];\n    yp=y[i];\n    A=1; B=0; C=0; D=1;\n    while ((yp+C) && (yp+D)) {\n      q =Math.floor((xp+A)/(yp+C));\n      qp=Math.floor((xp+B)/(yp+D));\n      if (q!=qp)\n        break;\n      t= A-q*C;   A=C;   C=t;    //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)      \n      t= B-q*D;   B=D;   D=t;\n      t=xp-q*yp; xp=yp; yp=t;\n    }\n    if (B) {\n      copy_(T,x);\n      linComb_(x,y,A,B); //x=A*x+B*y\n      linComb_(y,T,D,C); //y=D*y+C*T\n    } else {\n      mod_(x,y);\n      copy_(T,x);\n      copy_(x,y);\n      copy_(y,T);\n    } \n  }\n  if (y[0]==0)\n    return;\n  t=modInt(x,y[0]);\n  copyInt_(x,y[0]);\n  y[0]=t;\n  while (y[0]) {\n    x[0]%=y[0];\n    t=x[0]; x[0]=y[0]; y[0]=t;\n  }\n}\n\n//do x=x**(-1) mod n, for bigInts x and n.\n//If no inverse exists, it sets x to zero and returns 0, else it returns 1.\n//The x array must be at least as large as the n array.\nfunction inverseMod_(x,n) {\n  var k=1+2*Math.max(x.length,n.length);\n\n  if(!(x[0]&1)  && !(n[0]&1)) {  //if both inputs are even, then inverse doesn't exist\n    copyInt_(x,0);\n    return 0;\n  }\n\n  if (eg_u.length!=k) {\n    eg_u=new Array(k);\n    eg_v=new Array(k);\n    eg_A=new Array(k);\n    eg_B=new Array(k);\n    eg_C=new Array(k);\n    eg_D=new Array(k);\n  }\n\n  copy_(eg_u,x);\n  copy_(eg_v,n);\n  copyInt_(eg_A,1);\n  copyInt_(eg_B,0);\n  copyInt_(eg_C,0);\n  copyInt_(eg_D,1);\n  for (;;) {\n    while(!(eg_u[0]&1)) {  //while eg_u is even\n      halve_(eg_u);\n      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if eg_A==eg_B==0 mod 2\n        halve_(eg_A);\n        halve_(eg_B);      \n      } else {\n        add_(eg_A,n);  halve_(eg_A);\n        sub_(eg_B,x);  halve_(eg_B);\n      }\n    }\n\n    while (!(eg_v[0]&1)) {  //while eg_v is even\n      halve_(eg_v);\n      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if eg_C==eg_D==0 mod 2\n        halve_(eg_C);\n        halve_(eg_D);      \n      } else {\n        add_(eg_C,n);  halve_(eg_C);\n        sub_(eg_D,x);  halve_(eg_D);\n      }\n    }\n\n    if (!greater(eg_v,eg_u)) { //eg_v <= eg_u\n      sub_(eg_u,eg_v);\n      sub_(eg_A,eg_C);\n      sub_(eg_B,eg_D);\n    } else {                   //eg_v > eg_u\n      sub_(eg_v,eg_u);\n      sub_(eg_C,eg_A);\n      sub_(eg_D,eg_B);\n    }\n  \n    if (equalsInt(eg_u,0)) {\n      while (negative(eg_C)) //make sure answer is nonnegative\n        add_(eg_C,n);\n      copy_(x,eg_C);\n\n      if (!equalsInt(eg_v,1)) { //if GCD_(x,n)!=1, then there is no inverse\n        copyInt_(x,0);\n        return 0;\n      }\n      return 1;\n    }\n  }\n}\n\n//return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\nfunction inverseModInt(x,n) {\n  var a=1,b=0,t;\n  for (;;) {\n    if (x==1) return a;\n    if (x==0) return 0;\n    b-=a*Math.floor(n/x);\n    n%=x;\n\n    if (n==1) return b; //to avoid negatives, change this b to n-b, and each -= to +=\n    if (n==0) return 0;\n    a-=b*Math.floor(x/n);\n    x%=n;\n  }\n}\n\n//this deprecated function is for backward compatibility only. \nfunction inverseModInt_(x,n) {\n   return inverseModInt(x,n);\n}\n\n\n//Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:\n//     v = GCD_(x,y) = a*x-b*y\n//The bigInts v, a, b, must have exactly as many elements as the larger of x and y.\nfunction eGCD_(x,y,v,a,b) {\n  var g=0;\n  var k=Math.max(x.length,y.length);\n  if (eg_u.length!=k) {\n    eg_u=new Array(k);\n    eg_A=new Array(k);\n    eg_B=new Array(k);\n    eg_C=new Array(k);\n    eg_D=new Array(k);\n  }\n  while(!(x[0]&1)  && !(y[0]&1)) {  //while x and y both even\n    halve_(x);\n    halve_(y);\n    g++;\n  }\n  copy_(eg_u,x);\n  copy_(v,y);\n  copyInt_(eg_A,1);\n  copyInt_(eg_B,0);\n  copyInt_(eg_C,0);\n  copyInt_(eg_D,1);\n  for (;;) {\n    while(!(eg_u[0]&1)) {  //while u is even\n      halve_(eg_u);\n      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if A==B==0 mod 2\n        halve_(eg_A);\n        halve_(eg_B);      \n      } else {\n        add_(eg_A,y);  halve_(eg_A);\n        sub_(eg_B,x);  halve_(eg_B);\n      }\n    }\n\n    while (!(v[0]&1)) {  //while v is even\n      halve_(v);\n      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if C==D==0 mod 2\n        halve_(eg_C);\n        halve_(eg_D);      \n      } else {\n        add_(eg_C,y);  halve_(eg_C);\n        sub_(eg_D,x);  halve_(eg_D);\n      }\n    }\n\n    if (!greater(v,eg_u)) { //v<=u\n      sub_(eg_u,v);\n      sub_(eg_A,eg_C);\n      sub_(eg_B,eg_D);\n    } else {                //v>u\n      sub_(v,eg_u);\n      sub_(eg_C,eg_A);\n      sub_(eg_D,eg_B);\n    }\n    if (equalsInt(eg_u,0)) {\n      while (negative(eg_C)) {   //make sure a (C) is nonnegative\n        add_(eg_C,y);\n        sub_(eg_D,x);\n      }\n      multInt_(eg_D,-1);  ///make sure b (D) is nonnegative\n      copy_(a,eg_C);\n      copy_(b,eg_D);\n      leftShift_(v,g);\n      return;\n    }\n  }\n}\n\n\n//is bigInt x negative?\nfunction negative(x) {\n  return ((x[x.length-1]>>(bpe-1))&1);\n}\n\n\n//is (x << (shift*bpe)) > y?\n//x and y are nonnegative bigInts\n//shift is a nonnegative integer\nfunction greaterShift(x,y,shift) {\n  var i, kx=x.length, ky=y.length;\n  k=((kx+shift)<ky) ? (kx+shift) : ky;\n  for (i=ky-1-shift; i<kx && i>=0; i++) \n    if (x[i]>0)\n      return 1; //if there are nonzeros in x to the left of the first column of y, then x is bigger\n  for (i=kx-1+shift; i<ky; i++)\n    if (y[i]>0)\n      return 0; //if there are nonzeros in y to the left of the first column of x, then x is not bigger\n  for (i=k-1; i>=shift; i--)\n    if      (x[i-shift]>y[i]) return 1;\n    else if (x[i-shift]<y[i]) return 0;\n  return 0;\n}\n\n//is x > y? (x and y both nonnegative)\nfunction greater(x,y) {\n  var i;\n  var k=(x.length<y.length) ? x.length : y.length;\n\n  for (i=x.length;i<y.length;i++)\n    if (y[i])\n      return 0;  //y has more digits\n\n  for (i=y.length;i<x.length;i++)\n    if (x[i])\n      return 1;  //x has more digits\n\n  for (i=k-1;i>=0;i--)\n    if (x[i]>y[i])\n      return 1;\n    else if (x[i]<y[i])\n      return 0;\n  return 0;\n}\n\n//divide x by y giving quotient q and remainder r.  (q=floor(x/y),  r=x mod y).  All 4 are bigints.\n//x must have at least one leading zero element.\n//y must be nonzero.\n//q and r must be arrays that are exactly the same length as x. (Or q can have more).\n//Must have x.length >= y.length >= 2.\nfunction divide_(x,y,q,r) {\n  var kx, ky;\n  var i,j,y1,y2,c,a,b;\n  copy_(r,x);\n  for (ky=y.length;y[ky-1]==0;ky--); //ky is number of elements in y, not including leading zeros\n\n  //normalize: ensure the most significant element of y has its highest bit set  \n  b=y[ky-1];\n  for (a=0; b; a++)\n    b>>=1;  \n  a=bpe-a;  //a is how many bits to shift so that the high order bit of y is leftmost in its array element\n  leftShift_(y,a);  //multiply both by 1<<a now, then divide both by that at the end\n  leftShift_(r,a);\n\n  //Rob Visser discovered a bug: the following line was originally just before the normalization.\n  for (kx=r.length;r[kx-1]==0 && kx>ky;kx--); //kx is number of elements in normalized x, not including leading zeros\n\n  copyInt_(q,0);                      // q=0\n  while (!greaterShift(y,r,kx-ky)) {  // while (leftShift_(y,kx-ky) <= r) {\n    subShift_(r,y,kx-ky);             //   r=r-leftShift_(y,kx-ky)\n    q[kx-ky]++;                       //   q[kx-ky]++;\n  }                                   // }\n\n  for (i=kx-1; i>=ky; i--) {\n    if (r[i]==y[ky-1])\n      q[i-ky]=mask;\n    else\n      q[i-ky]=Math.floor((r[i]*radix+r[i-1])/y[ky-1]);\t\n\n    //The following for(;;) loop is equivalent to the commented while loop, \n    //except that the uncommented version avoids overflow.\n    //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0\n    //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])\n    //    q[i-ky]--;    \n    for (;;) {\n      y2=(ky>1 ? y[ky-2] : 0)*q[i-ky];\n      c=y2>>bpe;\n      y2=y2 & mask;\n      y1=c+q[i-ky]*y[ky-1];\n      c=y1>>bpe;\n      y1=y1 & mask;\n\n      if (c==r[i] ? y1==r[i-1] ? y2>(i>1 ? r[i-2] : 0) : y1>r[i-1] : c>r[i]) \n        q[i-ky]--;\n      else\n        break;\n    }\n\n    linCombShift_(r,y,-q[i-ky],i-ky);    //r=r-q[i-ky]*leftShift_(y,i-ky)\n    if (negative(r)) {\n      addShift_(r,y,i-ky);         //r=r+leftShift_(y,i-ky)\n      q[i-ky]--;\n    }\n  }\n\n  rightShift_(y,a);  //undo the normalization step\n  rightShift_(r,a);  //undo the normalization step\n}\n\n//do carries and borrows so each element of the bigInt x fits in bpe bits.\nfunction carry_(x) {\n  var i,k,c,b;\n  k=x.length;\n  c=0;\n  for (i=0;i<k;i++) {\n    c+=x[i];\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n  }\n}\n\n//return x mod n for bigInt x and integer n.\nfunction modInt(x,n) {\n  var i,c=0;\n  for (i=x.length-1; i>=0; i--)\n    c=(c*radix+x[i])%n;\n  return c;\n}\n\n//convert the integer t into a bigInt with at least the given number of bits.\n//the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)\n//Pad the array with leading zeros so that it has at least minSize elements.\n//There will always be at least one leading 0 element.\nfunction int2bigInt(t,bits,minSize) {   \n  var i,k;\n  k=Math.ceil(bits/bpe)+1;\n  k=minSize>k ? minSize : k;\n  buff=new Array(k);\n  copyInt_(buff,t);\n  return buff;\n}\n\n//return the bigInt given a string representation in a given base.  \n//Pad the array with leading zeros so that it has at least minSize elements.\n//If base=-1, then it reads in a space-separated list of array elements in decimal.\n//The array will always have at least one leading zero, unless base=-1.\nfunction str2bigInt(s,base,minSize) {\n  var d, i, j, x, y, kk;\n  var k=s.length;\n  if (base==-1) { //comma-separated list of array elements in decimal\n    x=new Array(0);\n    for (;;) {\n      y=new Array(x.length+1);\n      for (i=0;i<x.length;i++)\n        y[i+1]=x[i];\n      y[0]=parseInt(s,10);\n      x=y;\n      d=s.indexOf(',',0);\n      if (d<1) \n        break;\n      s=s.substring(d+1);\n      if (s.length==0)\n        break;\n    }\n    if (x.length<minSize) {\n      y=new Array(minSize);\n      copy_(y,x);\n      return y;\n    }\n    return x;\n  }\n\n  x=int2bigInt(0,base*k,0);\n  for (i=0;i<k;i++) {\n    d=digitsStr.indexOf(s.substring(i,i+1),0);\n    if (base<=36 && d>=36)  //convert lowercase to uppercase if base<=36\n      d-=26;\n    if (d>=base || d<0) {   //stop at first illegal character\n      break;\n    }\n    multInt_(x,base);\n    addInt_(x,d);\n  }\n\n  for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros\n  k=minSize>k+1 ? minSize : k+1;\n  y=new Array(k);\n  kk=k<x.length ? k : x.length;\n  for (i=0;i<kk;i++)\n    y[i]=x[i];\n  for (;i<k;i++)\n    y[i]=0;\n  return y;\n}\n\n//is bigint x equal to integer y?\n//y must have less than bpe bits\nfunction equalsInt(x,y) {\n  var i;\n  if (x[0]!=y)\n    return 0;\n  for (i=1;i<x.length;i++)\n    if (x[i])\n      return 0;\n  return 1;\n}\n\n//are bigints x and y equal?\n//this works even if x and y are different lengths and have arbitrarily many leading zeros\nfunction equals(x,y) {\n  var i;\n  var k=x.length<y.length ? x.length : y.length;\n  for (i=0;i<k;i++)\n    if (x[i]!=y[i])\n      return 0;\n  if (x.length>y.length) {\n    for (;i<x.length;i++)\n      if (x[i])\n        return 0;\n  } else {\n    for (;i<y.length;i++)\n      if (y[i])\n        return 0;\n  }\n  return 1;\n}\n\n//is the bigInt x equal to zero?\nfunction isZero(x) {\n  var i;\n  for (i=0;i<x.length;i++)\n    if (x[i])\n      return 0;\n  return 1;\n}\n\n//convert a bigInt into a string in a given base, from base 2 up to base 95.\n//Base -1 prints the contents of the array representing the number.\nfunction bigInt2str(x,base) {\n  var i,t,s=\"\";\n\n  if (s6.length!=x.length) \n    s6=dup(x);\n  else\n    copy_(s6,x);\n\n  if (base==-1) { //return the list of array contents\n    for (i=x.length-1;i>0;i--)\n      s+=x[i]+',';\n    s+=x[0];\n  }\n  else { //return it in the given base\n    while (!isZero(s6)) {\n      t=divInt_(s6,base);  //t=s6 % base; s6=floor(s6/base);\n      s=digitsStr.substring(t,t+1)+s;\n    }\n  }\n  if (s.length==0)\n    s=\"0\";\n  return s;\n}\n\n//returns a duplicate of bigInt x\nfunction dup(x) {\n  var i;\n  buff=new Array(x.length);\n  copy_(buff,x);\n  return buff;\n}\n\n//do x=y on bigInts x and y.  x must be an array at least as big as y (not counting the leading zeros in y).\nfunction copy_(x,y) {\n  var i;\n  var k=x.length<y.length ? x.length : y.length;\n  for (i=0;i<k;i++)\n    x[i]=y[i];\n  for (i=k;i<x.length;i++)\n    x[i]=0;\n}\n\n//do x=y on bigInt x and integer y.  \nfunction copyInt_(x,n) {\n  var i,c;\n  for (c=n,i=0;i<x.length;i++) {\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+n where x is a bigInt and n is an integer.\n//x must be large enough to hold the result.\nfunction addInt_(x,n) {\n  var i,k,c,b;\n  x[0]+=n;\n  k=x.length;\n  c=0;\n  for (i=0;i<k;i++) {\n    c+=x[i];\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n    if (!c) return; //stop carrying as soon as the carry is zero\n  }\n}\n\n//right shift bigInt x by n bits.  0 <= n < bpe.\nfunction rightShift_(x,n) {\n  var i;\n  var k=Math.floor(n/bpe);\n  if (k) {\n    for (i=0;i<x.length-k;i++) //right shift x by k elements\n      x[i]=x[i+k];\n    for (;i<x.length;i++)\n      x[i]=0;\n    n%=bpe;\n  }\n  for (i=0;i<x.length-1;i++) {\n    x[i]=mask & ((x[i+1]<<(bpe-n)) | (x[i]>>n));\n  }\n  x[i]>>=n;\n}\n\n//do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement\nfunction halve_(x) {\n  var i;\n  for (i=0;i<x.length-1;i++) {\n    x[i]=mask & ((x[i+1]<<(bpe-1)) | (x[i]>>1));\n  }\n  x[i]=(x[i]>>1) | (x[i] & (radix>>1));  //most significant bit stays the same\n}\n\n//left shift bigInt x by n bits.\nfunction leftShift_(x,n) {\n  var i;\n  var k=Math.floor(n/bpe);\n  if (k) {\n    for (i=x.length; i>=k; i--) //left shift x by k elements\n      x[i]=x[i-k];\n    for (;i>=0;i--)\n      x[i]=0;  \n    n%=bpe;\n  }\n  if (!n)\n    return;\n  for (i=x.length-1;i>0;i--) {\n    x[i]=mask & ((x[i]<<n) | (x[i-1]>>(bpe-n)));\n  }\n  x[i]=mask & (x[i]<<n);\n}\n\n//do x=x*n where x is a bigInt and n is an integer.\n//x must be large enough to hold the result.\nfunction multInt_(x,n) {\n  var i,k,c,b;\n  if (!n)\n    return;\n  k=x.length;\n  c=0;\n  for (i=0;i<k;i++) {\n    c+=x[i]*n;\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n  }\n}\n\n//do x=floor(x/n) for bigInt x and integer n, and return the remainder\nfunction divInt_(x,n) {\n  var i,r=0,s;\n  for (i=x.length-1;i>=0;i--) {\n    s=r*radix+x[i];\n    x[i]=Math.floor(s/n);\n    r=s%n;\n  }\n  return r;\n}\n\n//do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.\n//x must be large enough to hold the answer.\nfunction linComb_(x,y,a,b) {\n  var i,c,k,kk;\n  k=x.length<y.length ? x.length : y.length;\n  kk=x.length;\n  for (c=0,i=0;i<k;i++) {\n    c+=a*x[i]+b*y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;i<kk;i++) {\n    c+=a*x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.\n//x must be large enough to hold the answer.\nfunction linCombShift_(x,y,b,ys) {\n  var i,c,k,kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0,i=ys;i<k;i++) {\n    c+=x[i]+b*y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<kk;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\n//x must be large enough to hold the answer.\nfunction addShift_(x,y,ys) {\n  var i,c,k,kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0,i=ys;i<k;i++) {\n    c+=x[i]+y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<kk;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x-(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\n//x must be large enough to hold the answer.\nfunction subShift_(x,y,ys) {\n  var i,c,k,kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0,i=ys;i<k;i++) {\n    c+=x[i]-y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<kk;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x-y for bigInts x and y.\n//x must be large enough to hold the answer.\n//negative answers will be 2s complement\nfunction sub_(x,y) {\n  var i,c,k,kk;\n  k=x.length<y.length ? x.length : y.length;\n  for (c=0,i=0;i<k;i++) {\n    c+=x[i]-y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<x.length;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+y for bigInts x and y.\n//x must be large enough to hold the answer.\nfunction add_(x,y) {\n  var i,c,k,kk;\n  k=x.length<y.length ? x.length : y.length;\n  for (c=0,i=0;i<k;i++) {\n    c+=x[i]+y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<x.length;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x*y for bigInts x and y.  This is faster when y<x.\nfunction mult_(x,y) {\n  var i;\n  if (ss.length!=2*x.length)\n    ss=new Array(2*x.length);\n  copyInt_(ss,0);\n  for (i=0;i<y.length;i++)\n    if (y[i])\n      linCombShift_(ss,x,y[i],i);   //ss=1*ss+y[i]*(x<<(i*bpe))\n  copy_(x,ss);\n}\n\n//do x=x mod n for bigInts x and n.\nfunction mod_(x,n) {\n  if (s4.length!=x.length)\n    s4=dup(x);\n  else\n    copy_(s4,x);\n  if (s5.length!=x.length)\n    s5=dup(x);  \n  divide_(s4,n,s5,x);  //x = remainder of s4 / n\n}\n\n//do x=x*y mod n for bigInts x,y,n.\n//for greater speed, let y<x.\nfunction multMod_(x,y,n) {\n  var i;\n  if (s0.length!=2*x.length)\n    s0=new Array(2*x.length);\n  copyInt_(s0,0);\n  for (i=0;i<y.length;i++)\n    if (y[i])\n      linCombShift_(s0,x,y[i],i);   //s0=1*s0+y[i]*(x<<(i*bpe))\n  mod_(s0,n);\n  copy_(x,s0);\n}\n\n//do x=x*x mod n for bigInts x,n.\nfunction squareMod_(x,n) {\n  var i,j,d,c,kx,kn,k;\n  for (kx=x.length; kx>0 && !x[kx-1]; kx--);  //ignore leading zeros in x\n  k=kx>n.length ? 2*kx : 2*n.length; //k=# elements in the product, which is twice the elements in the larger of x and n\n  if (s0.length!=k) \n    s0=new Array(k);\n  copyInt_(s0,0);\n  for (i=0;i<kx;i++) {\n    c=s0[2*i]+x[i]*x[i];\n    s0[2*i]=c & mask;\n    c>>=bpe;\n    for (j=i+1;j<kx;j++) {\n      c=s0[i+j]+2*x[i]*x[j]+c;\n      s0[i+j]=(c & mask);\n      c>>=bpe;\n    }\n    s0[i+kx]=c;\n  }\n  mod_(s0,n);\n  copy_(x,s0);\n}\n\n//return x with exactly k leading zero elements\nfunction trim(x,k) {\n  var i,y;\n  for (i=x.length; i>0 && !x[i-1]; i--);\n  y=new Array(i+k);\n  copy_(y,x);\n  return y;\n}\n\n//do x=x**y mod n, where x,y,n are bigInts and ** is exponentiation.  0**0=1.\n//this is faster when n is odd.  x usually needs to have as many elements as n.\nfunction powMod_(x,y,n) {\n  var k1,k2,kn,np;\n  if(s7.length!=n.length)\n    s7=dup(n);\n\n  //for even modulus, use a simple square-and-multiply algorithm,\n  //rather than using the more complex Montgomery algorithm.\n  if ((n[0]&1)==0) {\n    copy_(s7,x);\n    copyInt_(x,1);\n    while(!equalsInt(y,0)) {\n      if (y[0]&1)\n        multMod_(x,s7,n);\n      divInt_(y,2);\n      squareMod_(s7,n); \n    }\n    return;\n  }\n\n  //calculate np from n for the Montgomery multiplications\n  copyInt_(s7,0);\n  for (kn=n.length;kn>0 && !n[kn-1];kn--);\n  np=radix-inverseModInt(modInt(n,radix),radix);\n  s7[kn]=1;\n  multMod_(x ,s7,n);   // x = x * 2**(kn*bp) mod n\n\n  if (s3.length!=x.length)\n    s3=dup(x);\n  else\n    copy_(s3,x);\n\n  for (k1=y.length-1;k1>0 & !y[k1]; k1--);  //k1=first nonzero element of y\n  if (y[k1]==0) {  //anything to the 0th power is 1\n    copyInt_(x,1);\n    return;\n  }\n  for (k2=1<<(bpe-1);k2 && !(y[k1] & k2); k2>>=1);  //k2=position of first 1 bit in y[k1]\n  for (;;) {\n    if (!(k2>>=1)) {  //look at next bit of y\n      k1--;\n      if (k1<0) {\n        mont_(x,one,n,np);\n        return;\n      }\n      k2=1<<(bpe-1);\n    }    \n    mont_(x,x,n,np);\n\n    if (k2 & y[k1]) //if next bit is a 1\n      mont_(x,s3,n,np);\n  }\n}\n\n\n//do x=x*y*Ri mod n for bigInts x,y,n, \n//  where Ri = 2**(-kn*bpe) mod n, and kn is the \n//  number of elements in the n array, not \n//  counting leading zeros.  \n//x array must have at least as many elemnts as the n array\n//It's OK if x and y are the same variable.\n//must have:\n//  x,y < n\n//  n is odd\n//  np = -(n^(-1)) mod radix\nfunction mont_(x,y,n,np) {\n  var i,j,c,ui,t,ks;\n  var kn=n.length;\n  var ky=y.length;\n\n  if (sa.length!=kn)\n    sa=new Array(kn);\n    \n  copyInt_(sa,0);\n\n  for (;kn>0 && n[kn-1]==0;kn--); //ignore leading zeros of n\n  for (;ky>0 && y[ky-1]==0;ky--); //ignore leading zeros of y\n  ks=sa.length-1; //sa will never have more than this many nonzero elements.  \n\n  //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers\n  for (i=0; i<kn; i++) {\n    t=sa[0]+x[i]*y[0];\n    ui=((t & mask) * np) & mask;  //the inner \"& mask\" was needed on Safari (but not MSIE) at one time\n    c=(t+ui*n[0]) >> bpe;\n    t=x[i];\n    \n    //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed\n    j=1;\n    for (;j<ky-4;) { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }    \n    for (;j<ky;)   { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    for (;j<kn-4;) { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }  \n    for (;j<kn;)   { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }   \n    for (;j<ks;)   { c+=sa[j];                  sa[j-1]=c & mask;   c>>=bpe;   j++; }  \n    sa[j-1]=c & mask;\n  }\n\n  if (!greater(n,sa))\n    sub_(sa,n);\n  copy_(x,sa);\n}\n\n"]}