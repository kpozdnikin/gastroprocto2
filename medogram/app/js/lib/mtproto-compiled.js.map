{"version":3,"sources":["mtproto.js"],"names":[],"mappings":";;AAAA;;;;;;;AAOA,QAAQ,MAAR,CAAe,iBAAf,EAAkC,CAAC,eAAD,CAAlC,EAEG,OAFH,CAEW,mBAFX,EAEgC,YAAY;AACxC,MAAI,gBAAgB,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,OAA7B,EAAsC,OAAtC,CAApB;;AAEA,MAAI,YAAY,OAAO,KAAP,CAAa,IAAb,GACZ,CACA,EAAC,IAAI,CAAL,EAAQ,MAAM,gBAAd,EAAiC,MAAM,EAAvC,EADA,EAEA,EAAC,IAAI,CAAL,EAAQ,MAAM,gBAAd,EAAiC,MAAM,EAAvC,EAFA,EAGA,EAAC,IAAI,CAAL,EAAQ,MAAM,iBAAd,EAAiC,MAAM,EAAvC,EAHA,CADY,GAMZ,CACA,EAAC,IAAI,CAAL,EAAQ,MAAM,gBAAd,EAAiC,MAAM,EAAvC,EADA,EAEA,EAAC,IAAI,CAAL,EAAQ,MAAM,gBAAd,EAAiC,MAAM,EAAvC,EAFA,EAGA,EAAC,IAAI,CAAL,EAAQ,MAAM,iBAAd,EAAiC,MAAM,EAAvC,EAHA,EAIA,EAAC,IAAI,CAAL,EAAQ,MAAM,gBAAd,EAAiC,MAAM,EAAvC,EAJA,EAKA,EAAC,IAAI,CAAL,EAAQ,MAAM,eAAd,EAAiC,MAAM,EAAvC,EALA,CANJ;;AAcA,MAAI,gBAAgB,EAApB;;AAEA,WAAS,YAAT,CAAuB,IAAvB,EAA6B,MAA7B,EAAqC;AACnC,QAAI,cAAc,IAAd,MAAwB,SAA5B,EAAuC;AACrC,UAAI,eAAe,KAAnB;AAAA,UACE,CADF;AAAA,UACK,QADL;;AAGA,UAAI,OAAO,KAAP,CAAa,GAAb,IAAoB,CAAC,OAAO,KAAP,CAAa,IAAtC,EAA4C;AAC1C,YAAI,YAAY,cAAc,OAAO,CAArB,KAA2B,SAAS,IAAT,GAAgB,EAA3C,CAAhB;AACA,YAAI,OAAO,OAAO,KAAP,CAAa,IAAb,GAAoB,YAApB,GAAmC,OAA9C;AACA,uBAAe,aAAa,SAAb,GAAyB,oBAAzB,GAAgD,IAA/D;AACA,eAAO,YAAP;AACD;;AAED,WAAK,IAAI,CAAT,EAAY,IAAI,UAAU,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,mBAAW,UAAU,CAAV,CAAX;AACA,YAAI,SAAS,EAAT,IAAe,IAAnB,EAAyB;AACvB,yBAAe,YAAY,SAAS,IAArB,IAA6B,SAAS,IAAT,IAAiB,EAAjB,GAAsB,MAAM,SAAS,IAArC,GAA4C,EAAzE,IAA+E,QAA9F;AACA;AACD;AACF;AACD,oBAAc,IAAd,IAAsB,YAAtB;AACD;;AAED,WAAO,cAAc,IAAd,CAAP;AACD;;AAED,SAAO;AACL,kBAAc;AADT,GAAP;AAGD,CAjDH,EAmDG,OAnDH,CAmDW,mBAnDX,EAmDgC,YAAY;;AAExC;;;;;;;;;;;;;AAaA,MAAI,gBAAgB,CAAC;AACnB,aAAS,kgBADU;AAEnB,cAAU;AAFS,GAAD,CAApB;;AAKA,MAAI,mBAAmB,EAAvB;AACA,MAAI,WAAW,KAAf;;AAEA,WAAS,cAAT,GAA2B;AACzB,QAAI,QAAJ,EAAc;AACZ;AACD;;AAED,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,cAAc,MAAlC,EAA0C,GAA1C,EAA+C;AAC7C,UAAI,YAAY,cAAc,CAAd,CAAhB;;AAEA,UAAI,eAAe,IAAI,eAAJ,EAAnB;AACA,mBAAa,UAAb,CAAwB,aAAa,UAAU,OAAvB,CAAxB,EAAyD,GAAzD;AACA,mBAAa,UAAb,CAAwB,aAAa,UAAU,QAAvB,CAAxB,EAA0D,GAA1D;;AAEA,UAAI,SAAS,aAAa,SAAb,EAAb;;AAEA,UAAI,mBAAmB,cAAc,MAAd,EAAsB,KAAtB,CAA4B,CAAC,CAA7B,CAAvB;AACA,uBAAiB,OAAjB;;AAEA,uBAAiB,WAAW,gBAAX,CAAjB,IAAiD;AAC/C,iBAAS,UAAU,OAD4B;AAE/C,kBAAU,UAAU;AAF2B,OAAjD;AAID;;AAED,eAAW,IAAX;AACD;;AAED,WAAS,yBAAT,CAAoC,YAApC,EAAkD;AAChD;;AAEA,QAAI,cAAJ,EAAoB,QAApB,EAA8B,CAA9B;AACA,SAAK,IAAI,CAAT,EAAY,IAAI,aAAa,MAA7B,EAAqC,GAArC,EAA0C;AACxC,uBAAiB,aAAa,aAAa,CAAb,CAAb,EAA8B,QAA9B,CAAuC,EAAvC,CAAjB;AACA,UAAI,WAAW,iBAAiB,cAAjB,CAAf,EAAiD;AAC/C,eAAO,QAAQ,MAAR,CAAe,EAAC,aAAa,aAAa,CAAb,CAAd,EAAf,EAA+C,QAA/C,CAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD;;AAED,SAAO;AACL,aAAS,cADJ;AAEL,YAAQ;AAFH,GAAP;AAID,CAtHH,EAwHG,OAxHH,CAwHW,iBAxHX,EAwH8B,UAAU,OAAV,EAAmB;AAC7C,IAAE,OAAF,EAAW,EAAX,CAAc,eAAd,EAA+B,aAA/B;AACA,SAAO,IAAI,YAAJ,EAAP;AACD,CA3HH,EA6HG,OA7HH,CA6HW,gBA7HX,EA6H6B,UAAU,OAAV,EAAmB;AAC5C,MAAI,gBAAgB,CAAC,CAAD,EAAI,CAAJ,CAApB;AACA,MAAI,aAAa,CAAjB;;AAEA,UAAQ,GAAR,CAAY,oBAAZ,EAAkC,IAAlC,CAAuC,UAAU,EAAV,EAAc;AACnD,QAAI,EAAJ,EAAQ;AACN,mBAAa,EAAb;AACD;AACF,GAJD;;AAMA,WAAS,iBAAT,GAA8B;AAC5B,QAAI,YAAY,OAAhB;AAAA,QACE,UAAU,KAAK,KAAL,CAAW,YAAY,IAAvB,IAA+B,UAD3C;AAAA,QAEE,WAAW,YAAY,IAFzB;AAAA,QAGE,SAAS,cAAc,MAAd,CAHX;;AAKA,QAAI,YAAY,CAAC,OAAD,EAAW,YAAY,EAAb,GAAoB,UAAU,CAA9B,GAAmC,CAA7C,CAAhB;AACA,QAAI,cAAc,CAAd,IAAmB,UAAU,CAAV,CAAnB,IACF,cAAc,CAAd,KAAoB,UAAU,CAAV,CAApB,IAAoC,cAAc,CAAd,KAAoB,UAAU,CAAV,CAD1D,EACwE;AACtE,kBAAY,CAAC,cAAc,CAAd,CAAD,EAAmB,cAAc,CAAd,IAAmB,CAAtC,CAAZ;AACD;;AAED,oBAAgB,SAAhB;;AAEA;;AAEA,WAAO,aAAa,UAAU,CAAV,CAAb,EAA2B,UAAU,CAAV,CAA3B,CAAP;AACD;;AAED,WAAS,eAAT,CAA0B,UAA1B,EAAsC,SAAtC,EAAiD;AAC/C,QAAI,gBAAgB,aAAa,KAAK,KAAL,CAAW,CAAC,aAAa,OAAd,IAAyB,IAApC,CAAjC;AACA,QAAI,UAAU,KAAK,GAAL,CAAS,aAAa,aAAtB,IAAuC,EAArD;AACA,YAAQ,GAAR,CAAY,EAAC,oBAAoB,aAArB,EAAZ;;AAEA,oBAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB;AACA,iBAAa,aAAb;AACA,YAAQ,GAAR,CAAY,IAAZ,EAAkB,mBAAlB,EAAuC,UAAvC,EAAmD,SAAnD,EAA8D,aAA9D,EAA6E,OAA7E;;AAEA,WAAO,OAAP;AACD;;AAED,SAAO;AACL,gBAAY,iBADP;AAEL,qBAAiB;AAFZ,GAAP;AAID,CA1KH,EA4KG,OA5KH,CA4KW,eA5KX,EA4K4B,UAAU,iBAAV,EAA6B,iBAA7B,EAAgD,eAAhD,EAAiE,cAAjE,EAAiF,YAAjF,EAA+F,KAA/F,EAAsG,EAAtG,EAA0G,QAA1G,EAAoH;AAC5I,MAAI,gBAAgB,UAAU,SAAV,CAAoB,KAApB,CAA0B,uBAA1B,CAApB;AACA,MAAI,gBAAgB,iBAAiB,WAAW,cAAc,CAAd,CAAX,CAAjB,IAAiD,KAArE;AACA,MAAI,gBAAgB,EAAE,qBAAqB,MAAvB,MAAmC,CAAC,aAAD,IAAkB,gBAAgB,EAArE,CAApB;;AAEA,SAAO,MAAM,QAAN,CAAe,OAAf,CAAuB,IAAvB,CAA4B,cAA5B,CAAP;AACA,SAAO,MAAM,QAAN,CAAe,OAAf,CAAuB,MAAvB,CAA8B,QAA9B,CAAP;;AAEA,WAAS,mBAAT,CAA8B,IAA9B,EAAoC,aAApC,EAAmD;AACjD,QAAI,gBAAgB,cAAc,UAAlC;AAAA,QACE,eAAe,IAAI,UAAJ,CAAe,aAAf,CADjB;;AAGA,QAAI,SAAS,IAAI,eAAJ,EAAb;AACA,WAAO,UAAP,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,aAAxB,EALiD,CAKV;AACvC,WAAO,SAAP,CAAiB,eAAe,UAAf,EAAjB,EAA8C,QAA9C,EANiD,CAMO;AACxD,WAAO,QAAP,CAAgB,aAAhB,EAA+B,gBAA/B;;AAEA,QAAI,eAAe,OAAO,SAAP,EAAnB;AAAA,QACE,cAAc,IAAI,UAAJ,CAAe,YAAf,CADhB;AAEA,QAAI,eAAe,aAAa,UAAhC;;AAEA,QAAI,eAAe,IAAI,WAAJ,CAAgB,eAAe,aAA/B,CAAnB;AAAA,QACE,cAAc,IAAI,UAAJ,CAAe,YAAf,CADhB;;AAGA,gBAAY,GAAZ,CAAgB,WAAhB;AACA,gBAAY,GAAZ,CAAgB,YAAhB,EAA8B,YAAY,MAA1C;;AAEA,QAAI,cAAc,gBAAgB,YAAhB,GAA+B,WAAjD;AAAA,QACE,cADF;AAEA,QAAI,MAAM,kBAAkB,YAAlB,CAA+B,IAA/B,CAAV;AACA,QAAI,YAAY,EAAC,MAAM,GAAP,EAAY,MAAM,sBAAlB,EAA0C,KAAK,GAA/C,EAAhB;AACA,QAAI;AACF,uBAAiB,MAAM,IAAN,CAAW,GAAX,EAAgB,WAAhB,EAA6B;AAC5C,sBAAc,aAD8B;AAE5C,0BAAkB;AAF0B,OAA7B,CAAjB;AAID,KALD,CAKE,OAAO,CAAP,EAAU;AACV,uBAAiB,GAAG,MAAH,CAAU,QAAQ,MAAR,CAAe,SAAf,EAA0B,EAAC,eAAe,CAAhB,EAA1B,CAAV,CAAjB;AACD;AACD,WAAO,eAAe,IAAf,CACL,UAAU,MAAV,EAAkB;AAChB,UAAI,CAAC,OAAO,IAAR,IAAgB,CAAC,OAAO,IAAP,CAAY,UAAjC,EAA6C;AAC3C,eAAO,GAAG,MAAH,CAAU,SAAV,CAAP;AACD;;AAED,UAAI;AACF,YAAI,eAAe,IAAI,iBAAJ,CAAsB,OAAO,IAA7B,EAAmC,EAAC,SAAS,IAAV,EAAnC,CAAnB;AACA,YAAI,cAAc,aAAa,SAAb,CAAuB,aAAvB,CAAlB;AACA,YAAI,SAAS,aAAa,SAAb,CAAuB,QAAvB,CAAb;AACA,YAAI,UAAU,aAAa,QAAb,CAAsB,SAAtB,CAAd;AACD,OALD,CAKE,OAAO,CAAP,EAAU;AACV,eAAO,GAAG,MAAH,CAAU,QAAQ,MAAR,CAAe,SAAf,EAA0B,EAAC,eAAe,CAAhB,EAA1B,CAAV,CAAP;AACD;;AAED,aAAO,YAAP;AACD,KAhBI,EAiBL,UAAU,KAAV,EAAiB;AACf,UAAI,CAAC,MAAM,OAAP,IAAkB,CAAC,MAAM,IAA7B,EAAmC;AACjC,gBAAQ,QAAQ,MAAR,CAAe,SAAf,EAA0B,EAAC,eAAe,KAAhB,EAA1B,CAAR;AACD;AACD,aAAO,GAAG,MAAH,CAAU,KAAV,CAAP;AACD,KAtBI,CAAP;AAwBD;;AAED,WAAS,YAAT,CAAuB,IAAvB,EAA6B;AAC3B,QAAI,WAAW,KAAK,QAApB;;AAEA,QAAI,UAAU,IAAI,eAAJ,CAAoB,EAAC,SAAS,IAAV,EAApB,CAAd;;AAEA,YAAQ,WAAR,CAAoB,QAApB,EAA8B,EAAC,OAAO,KAAK,KAAb,EAA9B;;AAEA,YAAQ,GAAR,CAAY,IAAZ,EAAkB,aAAlB,EAAiC,WAAW,KAAK,KAAhB,CAAjC;AACA,wBAAoB,KAAK,IAAzB,EAA+B,QAAQ,SAAR,EAA/B,EAAoD,IAApD,CAAyD,UAAU,YAAV,EAAwB;AAC/E,UAAI,WAAW,aAAa,WAAb,CAAyB,OAAzB,CAAf;;AAEA,UAAI,SAAS,CAAT,IAAc,OAAlB,EAA2B;AACzB,cAAM,IAAI,KAAJ,CAAU,6BAA6B,SAAS,CAAhD,CAAN;AACD;;AAED,UAAI,CAAC,SAAS,KAAK,KAAd,EAAqB,SAAS,KAA9B,CAAL,EAA2C;AACzC,cAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,WAAK,WAAL,GAAmB,SAAS,YAA5B;AACA,WAAK,EAAL,GAAU,SAAS,EAAnB;AACA,WAAK,YAAL,GAAoB,SAAS,8BAA7B;;AAEA,cAAQ,GAAR,CAAY,IAAZ,EAAkB,WAAlB,EAA+B,WAAW,KAAK,WAAhB,CAA/B,EAA6D,WAAW,KAAK,EAAhB,CAA7D,EAAkF,KAAK,YAAvF;;AAEA,WAAK,SAAL,GAAiB,kBAAkB,MAAlB,CAAyB,KAAK,YAA9B,CAAjB;;AAEA,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,cAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,cAAQ,GAAR,CAAY,IAAZ,EAAkB,wBAAlB,EAA4C,KAAK,EAAjD;AACA,mBAAa,SAAb,CAAuB,KAAK,EAA5B,EAAgC,IAAhC,CAAqC,UAAU,KAAV,EAAiB;AACpD,aAAK,CAAL,GAAS,MAAM,CAAN,CAAT;AACA,aAAK,CAAL,GAAS,MAAM,CAAN,CAAT;AACA,gBAAQ,GAAR,CAAY,IAAZ,EAAkB,uBAAlB,EAA2C,MAAM,CAAN,CAA3C;AACA,2BAAmB,IAAnB;AACD,OALD,EAKG,UAAU,KAAV,EAAiB;AAClB,gBAAQ,GAAR,CAAY,cAAZ,EAA4B,KAA5B,EAAmC,MAAM,KAAzC;AACA,iBAAS,MAAT,CAAgB,KAAhB;AACD,OARD;AASD,KAjCD,EAiCG,UAAU,KAAV,EAAiB;AAClB,cAAQ,KAAR,CAAc,IAAd,EAAoB,cAApB,EAAoC,MAAM,OAA1C;AACA,eAAS,MAAT,CAAgB,KAAhB;AACD,KApCD;;AAsCA,aAAS,YAAY;AACnB,wBAAkB,OAAlB;AACD,KAFD;AAGD;;AAED,WAAS,kBAAT,CAA6B,IAA7B,EAAmC;AACjC,QAAI,WAAW,KAAK,QAApB;;AAEA,SAAK,QAAL,GAAgB,IAAI,KAAJ,CAAU,EAAV,CAAhB;AACA,oBAAgB,SAAhB,CAA0B,KAAK,QAA/B;;AAEA,QAAI,OAAO,IAAI,eAAJ,CAAoB,EAAC,SAAS,IAAV,EAApB,CAAX;AACA,SAAK,WAAL,CAAiB;AACf,SAAG,gBADY;AAEf,UAAI,KAAK,EAFM;AAGf,SAAG,KAAK,CAHO;AAIf,SAAG,KAAK,CAJO;AAKf,aAAO,KAAK,KALG;AAMf,oBAAc,KAAK,WANJ;AAOf,iBAAW,KAAK;AAPD,KAAjB,EAQG,gBARH,EAQqB,gBARrB;;AAUA,QAAI,eAAe,cAAc,KAAK,SAAL,EAAd,EAAgC,MAAhC,CAAuC,KAAK,QAAL,EAAvC,CAAnB;;AAEA,QAAI,UAAU,IAAI,eAAJ,CAAoB,EAAC,SAAS,IAAV,EAApB,CAAd;AACA,YAAQ,WAAR,CAAoB,eAApB,EAAqC;AACnC,aAAO,KAAK,KADuB;AAEnC,oBAAc,KAAK,WAFgB;AAGnC,SAAG,KAAK,CAH2B;AAInC,SAAG,KAAK,CAJ2B;AAKnC,8BAAwB,KAAK,SAAL,CAAe,WALJ;AAMnC,sBAAgB,WAAW,KAAK,SAAhB,EAA2B,YAA3B;AANmB,KAArC;;AASA,YAAQ,GAAR,CAAY,IAAZ,EAAkB,oBAAlB;AACA,wBAAoB,KAAK,IAAzB,EAA+B,QAAQ,SAAR,EAA/B,EAAoD,IAApD,CAAyD,UAAU,YAAV,EAAwB;AAC/E,UAAI,WAAW,aAAa,WAAb,CAAyB,kBAAzB,EAA6C,UAA7C,CAAf;;AAEA,UAAI,SAAS,CAAT,IAAc,uBAAd,IAAyC,SAAS,CAAT,IAAc,qBAA3D,EAAkF;AAChF,iBAAS,MAAT,CAAgB,IAAI,KAAJ,CAAU,wCAAwC,SAAS,CAA3D,CAAhB;AACA,eAAO,KAAP;AACD;;AAED,UAAI,CAAC,SAAS,KAAK,KAAd,EAAqB,SAAS,KAA9B,CAAL,EAA2C;AACzC,iBAAS,MAAT,CAAgB,IAAI,KAAJ,CAAU,iCAAV,CAAhB;AACA,eAAO,KAAP;AACD;;AAED,UAAI,CAAC,SAAS,KAAK,WAAd,EAA2B,SAAS,YAApC,CAAL,EAAwD;AACtD,iBAAS,MAAT,CAAgB,IAAI,KAAJ,CAAU,wCAAV,CAAhB;AACA,eAAO,KAAP;AACD;;AAED,UAAI,SAAS,CAAT,IAAc,uBAAlB,EAA2C;AACzC,YAAI,eAAe,cAAc,KAAK,QAAnB,EAA6B,KAA7B,CAAmC,CAAC,EAApC,CAAnB;AACA,YAAI,CAAC,SAAS,YAAT,EAAuB,SAAS,cAAhC,CAAL,EAAsD;AACpD,mBAAS,MAAT,CAAgB,IAAI,KAAJ,CAAU,+CAAV,CAAhB;AACA,iBAAO,KAAP;AACD;AACD,iBAAS,MAAT,CAAgB,IAAI,KAAJ,CAAU,uBAAV,CAAhB;AACA,eAAO,KAAP;AACD;;AAED,UAAI;AACF,qCAA6B,IAA7B,EAAmC,SAAS,gBAA5C;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV,iBAAS,MAAT,CAAgB,CAAhB;AACA,eAAO,KAAP;AACD;;AAED,+BAAyB,IAAzB;AACD,KApCD,EAoCG,UAAU,KAAV,EAAiB;AAClB,eAAS,MAAT,CAAgB,KAAhB;AACD,KAtCD;AAuCD;;AAED,WAAS,4BAAT,CAAuC,IAAvC,EAA6C,eAA7C,EAA8D;AAC5D,SAAK,SAAL,GAAiB,OAAjB;;AAEA,SAAK,SAAL,GAAiB,cAAc,KAAK,QAAL,CAAc,MAAd,CAAqB,KAAK,WAA1B,CAAd,EAAsD,MAAtD,CAA6D,cAAc,KAAK,WAAL,CAAiB,MAAjB,CAAwB,KAAK,QAA7B,CAAd,EAAsD,KAAtD,CAA4D,CAA5D,EAA+D,EAA/D,CAA7D,CAAjB;AACA,SAAK,QAAL,GAAgB,cAAc,KAAK,WAAL,CAAiB,MAAjB,CAAwB,KAAK,QAA7B,CAAd,EAAsD,KAAtD,CAA4D,EAA5D,EAAgE,MAAhE,CAAuE,cAAc,GAAG,MAAH,CAAU,KAAK,QAAf,EAAyB,KAAK,QAA9B,CAAd,CAAvE,EAA+H,KAAK,QAAL,CAAc,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAA/H,CAAhB;;AAEA,QAAI,iBAAiB,eAAe,eAAf,EAAgC,KAAK,SAArC,EAAgD,KAAK,QAArD,CAArB;;AAEA,QAAI,OAAO,eAAe,KAAf,CAAqB,CAArB,EAAwB,EAAxB,CAAX;AACA,QAAI,oBAAoB,eAAe,KAAf,CAAqB,EAArB,CAAxB;AACA,QAAI,SAAS,mBAAmB,iBAAnB,CAAb;;AAEA,QAAI,eAAe,IAAI,iBAAJ,CAAsB,MAAtB,EAA8B,EAAC,SAAS,IAAV,EAA9B,CAAnB;AACA,QAAI,WAAW,aAAa,WAAb,CAAyB,sBAAzB,CAAf;;AAEA,QAAI,SAAS,CAAT,IAAc,sBAAlB,EAA0C;AACxC,YAAM,IAAI,KAAJ,CAAU,4CAA4C,WAAtD,CAAN;AACD;;AAED,QAAI,CAAC,SAAS,KAAK,KAAd,EAAqB,SAAS,KAA9B,CAAL,EAA2C;AACzC,YAAM,IAAI,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,QAAI,CAAC,SAAS,KAAK,WAAd,EAA2B,SAAS,YAApC,CAAL,EAAwD;AACtD,YAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,YAAQ,GAAR,CAAY,IAAZ,EAAkB,wBAAlB;AACA,SAAK,CAAL,GAAS,SAAS,CAAlB;AACA,SAAK,OAAL,GAAe,SAAS,QAAxB;AACA,SAAK,EAAL,GAAU,SAAS,GAAnB;AACA,SAAK,UAAL,GAAkB,SAAS,WAA3B;AACA,SAAK,KAAL,GAAa,CAAb;;AAEA,QAAI,SAAS,aAAa,SAAb,EAAb;;AAEA,QAAI,CAAC,SAAS,IAAT,EAAe,cAAc,kBAAkB,KAAlB,CAAwB,CAAxB,EAA2B,MAA3B,CAAd,CAAf,CAAL,EAAwE;AACtE,YAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,mBAAe,eAAf,CAA+B,KAAK,UAApC,EAAgD,KAAK,SAArD;AACD;;AAED,WAAS,wBAAT,CAAmC,IAAnC,EAAyC;AACvC,QAAI,WAAW,KAAK,QAApB;AACA,QAAI,SAAS,aAAa,KAAK,CAAL,CAAO,QAAP,CAAgB,EAAhB,CAAb,CAAb;;AAEA,SAAK,CAAL,GAAS,IAAI,KAAJ,CAAU,GAAV,CAAT;AACA,oBAAgB,SAAhB,CAA0B,KAAK,CAA/B;;AAEA,iBAAa,MAAb,CAAoB,MAApB,EAA4B,KAAK,CAAjC,EAAoC,KAAK,OAAzC,EAAkD,IAAlD,CAAuD,UAAU,EAAV,EAAc;AACnE,UAAI,OAAO,IAAI,eAAJ,CAAoB,EAAC,SAAS,IAAV,EAApB,CAAX;AACA,WAAK,WAAL,CAAiB;AACf,WAAG,sBADY;AAEf,eAAO,KAAK,KAFG;AAGf,sBAAc,KAAK,WAHJ;AAIf,kBAAU,CAAC,CAAD,EAAI,KAAK,KAAL,EAAJ,CAJK;AAKf,aAAK;AALU,OAAjB,EAMG,sBANH;;AAQA,UAAI,eAAe,cAAc,KAAK,SAAL,EAAd,EAAgC,MAAhC,CAAuC,KAAK,QAAL,EAAvC,CAAnB;;AAEA,UAAI,gBAAgB,eAAe,YAAf,EAA6B,KAAK,SAAlC,EAA6C,KAAK,QAAlD,CAApB;;AAEA,UAAI,UAAU,IAAI,eAAJ,CAAoB,EAAC,SAAS,IAAV,EAApB,CAAd;AACA,cAAQ,WAAR,CAAoB,sBAApB,EAA4C;AAC1C,eAAO,KAAK,KAD8B;AAE1C,sBAAc,KAAK,WAFuB;AAG1C,wBAAgB;AAH0B,OAA5C;;AAMA,cAAQ,GAAR,CAAY,IAAZ,EAAkB,2BAAlB;AACA,0BAAoB,KAAK,IAAzB,EAA+B,QAAQ,SAAR,EAA/B,EAAoD,IAApD,CAAyD,UAAU,YAAV,EAAwB;AAC/E,YAAI,WAAW,aAAa,WAAb,CAAyB,6BAAzB,CAAf;;AAEA,YAAI,SAAS,CAAT,IAAc,WAAd,IAA6B,SAAS,CAAT,IAAc,cAA3C,IAA6D,SAAS,CAAT,IAAc,aAA/E,EAA8F;AAC5F,mBAAS,MAAT,CAAgB,IAAI,KAAJ,CAAU,mDAAmD,SAAS,CAAtE,CAAhB;AACA,iBAAO,KAAP;AACD;;AAED,YAAI,CAAC,SAAS,KAAK,KAAd,EAAqB,SAAS,KAA9B,CAAL,EAA2C;AACzC,mBAAS,MAAT,CAAgB,IAAI,KAAJ,CAAU,4CAAV,CAAhB;AACA,iBAAO,KAAP;AACD;;AAED,YAAI,CAAC,SAAS,KAAK,WAAd,EAA2B,SAAS,YAApC,CAAL,EAAwD;AACtD,mBAAS,MAAT,CAAgB,IAAI,KAAJ,CAAU,mDAAV,CAAhB;AACA,iBAAO,KAAP;AACD;;AAED,qBAAa,MAAb,CAAoB,KAAK,EAAzB,EAA6B,KAAK,CAAlC,EAAqC,KAAK,OAA1C,EAAmD,IAAnD,CAAwD,UAAU,OAAV,EAAmB;AACzE,cAAI,cAAc,cAAc,OAAd,CAAlB;AAAA,cACE,aAAa,YAAY,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CADf;AAAA,cAEE,YAAY,YAAY,KAAZ,CAAkB,CAAC,CAAnB,CAFd;;AAIA,kBAAQ,GAAR,CAAY,IAAZ,EAAkB,iCAAlB,EAAqD,SAAS,CAA9D;AACA,kBAAQ,SAAS,CAAjB;AACE,iBAAK,WAAL;AACE,kBAAI,gBAAgB,cAAc,KAAK,QAAL,CAAc,MAAd,CAAqB,CAAC,CAAD,CAArB,EAA0B,UAA1B,CAAd,EAAqD,KAArD,CAA2D,CAAC,EAA5D,CAApB;;AAEA,kBAAI,CAAC,SAAS,aAAT,EAAwB,SAAS,eAAjC,CAAL,EAAwD;AACtD,yBAAS,MAAT,CAAgB,IAAI,KAAJ,CAAU,sDAAV,CAAhB;AACA,uBAAO,KAAP;AACD;;AAED,kBAAI,aAAa,SAAS,KAAK,QAAL,CAAc,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAT,EAAoC,KAAK,WAAL,CAAiB,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAApC,CAAjB;AACA;;AAEA,mBAAK,SAAL,GAAiB,SAAjB;AACA,mBAAK,OAAL,GAAe,OAAf;AACA,mBAAK,UAAL,GAAkB,UAAlB;;AAEA,uBAAS,OAAT,CAAiB,IAAjB;AACA;;AAEF,iBAAK,cAAL;AACE,kBAAI,gBAAgB,cAAc,KAAK,QAAL,CAAc,MAAd,CAAqB,CAAC,CAAD,CAArB,EAA0B,UAA1B,CAAd,EAAqD,KAArD,CAA2D,CAAC,EAA5D,CAApB;AACA,kBAAI,CAAC,SAAS,aAAT,EAAwB,SAAS,eAAjC,CAAL,EAAwD;AACtD,yBAAS,MAAT,CAAgB,IAAI,KAAJ,CAAU,sDAAV,CAAhB;AACA,uBAAO,KAAP;AACD;;AAED,qBAAO,yBAAyB,IAAzB,CAAP;;AAEF,iBAAK,aAAL;AACE,kBAAI,gBAAgB,cAAc,KAAK,QAAL,CAAc,MAAd,CAAqB,CAAC,CAAD,CAArB,EAA0B,UAA1B,CAAd,EAAqD,KAArD,CAA2D,CAAC,EAA5D,CAApB;AACA,kBAAI,CAAC,SAAS,aAAT,EAAwB,SAAS,eAAjC,CAAL,EAAwD;AACtD,yBAAS,MAAT,CAAgB,IAAI,KAAJ,CAAU,sDAAV,CAAhB;AACA,uBAAO,KAAP;AACD;;AAED,uBAAS,MAAT,CAAgB,IAAI,KAAJ,CAAU,kCAAV,CAAhB;AACA,qBAAO,KAAP;AApCJ;AAsCD,SA5CD,EA4CG,UAAU,KAAV,EAAiB;AAClB,mBAAS,MAAT,CAAgB,KAAhB;AACD,SA9CD;AA+CD,OAjED,EAiEG,UAAU,KAAV,EAAiB;AAClB,iBAAS,MAAT,CAAgB,KAAhB;AACD,OAnED;AAoED,KA1FD,EA0FG,UAAU,KAAV,EAAiB;AAClB,eAAS,MAAT,CAAgB,KAAhB;AACD,KA5FD;AA6FD;;AAED,MAAI,SAAS,EAAb;;AAEA,WAAS,OAAT,CAAkB,IAAlB,EAAwB;AACtB,QAAI,OAAO,IAAP,MAAiB,SAArB,EAAgC;AAC9B,aAAO,OAAO,IAAP,CAAP;AACD;;AAED,QAAI,QAAQ,EAAZ;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAApB,EAAwB,GAAxB,EAA6B;AAC3B,YAAM,IAAN,CAAW,cAAc,IAAd,CAAX;AACD;;AAED,QAAI,CAAC,kBAAkB,YAAlB,CAA+B,IAA/B,CAAL,EAA2C;AACzC,aAAO,GAAG,MAAH,CAAU,IAAI,KAAJ,CAAU,4BAA4B,IAAtC,CAAV,CAAP;AACD;;AAED,QAAI,OAAO;AACT,YAAM,IADG;AAET,aAAO,KAFE;AAGT,gBAAU,GAAG,KAAH;AAHD,KAAX;;AAMA,aAAS,YAAY;AACnB,mBAAa,IAAb;AACD,KAFD;;AAIA,WAAO,IAAP,IAAe,KAAK,QAAL,CAAc,OAA7B;;AAEA,WAAO,IAAP,EAAa,OAAb,EAAsB,YAAY;AAChC,aAAO,OAAO,IAAP,CAAP;AACD,KAFD;;AAIA,WAAO,OAAO,IAAP,CAAP;AACD;;AAED,SAAO;AACL,UAAM;AADD,GAAP;AAGD,CA9hBH,EAgiBG,OAhiBH,CAgiBW,qBAhiBX,EAgiBkC,UAAU,iBAAV,EAA6B,cAA7B,EAA6C,eAA7C,EAA8D,OAA9D,EAAuE,YAAvE,EAAqF,iBAArF,EAAwG,KAAxG,EAA+G,EAA/G,EAAmH,QAAnH,EAA6H,SAA7H,EAAwI,UAAxI,EAAoJ;AAClL,MAAI,gBAAJ;AACA,MAAI,MAAM,CAAV;AAAA,MACE,OADF;AAEA,MAAI,gBAAgB,KAApB;AACA,MAAI,YAAY,KAAhB;AACA,MAAI,gBAAgB,UAAU,SAAV,CAAoB,KAApB,CAA0B,uBAA1B,CAApB;AACA,MAAI,gBAAgB,iBAAiB,WAAW,cAAc,CAAd,CAAX,CAAjB,IAAiD,KAArE;AACA,MAAI,gBAAgB,EAAE,qBAAqB,MAAvB,MAAmC,CAAC,aAAD,IAAkB,gBAAgB,EAArE,CAApB;;AAEA,SAAO,MAAM,QAAN,CAAe,OAAf,CAAuB,IAAvB,CAA4B,cAA5B,CAAP;AACA,SAAO,MAAM,QAAN,CAAe,OAAf,CAAuB,MAAvB,CAA8B,QAA9B,CAAP;;AAEA,aAAW,WAAX,GAAyB,YAAY;AACnC,MAAE,SAAS,IAAX,EAAiB,OAAjB,CAAyB,QAAzB;AACD,GAFD;;AAIA,WAAS,YAAT,CAAuB,IAAvB,EAA6B,OAA7B,EAAsC,UAAtC,EAAkD,OAAlD,EAA2D;AACzD,cAAU,WAAW,EAArB;;AAEA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,GAAL,GAAW,KAAX;;AAEA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,YAAL,GAAoB,oBAAoB,OAApB,CAApB;AACA,SAAK,aAAL,GAAqB,qBAAqB,OAArB,CAArB;AACA,SAAK,SAAL,GAAiB,cAAc,OAAd,EAAuB,KAAvB,CAA6B,CAAC,CAA9B,CAAjB;;AAEA,SAAK,UAAL,GAAkB,UAAlB;;AAEA,SAAK,MAAL,GAAc,QAAQ,UAAR,IAAsB,QAAQ,YAA9B,IAA8C,KAA5D;;AAEA,SAAK,aAAL;;AAEA,SAAK,eAAL,GAAuB,CAAvB;AACA,SAAK,qBAAL,GAA6B,CAA7B;;AAEA,SAAK,YAAL,GAAoB,EAApB;AACA,SAAK,cAAL,GAAsB,EAAtB;AACA,SAAK,cAAL,GAAsB,EAAtB;;AAEA,SAAK,eAAL,GAAuB,EAAvB;AACA,SAAK,WAAL,GAAmB,EAAnB;AACA,SAAK,cAAL,GAAsB,EAAtB;AACA,SAAK,gBAAL,GAAwB,KAAxB;;AAEA,SAAK,eAAL,GAAuB,EAAvB;;AAEA,SAAK,WAAL,GAAmB,UAAU,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAV,EAAyC,KAAzC,CAAnB;AACA,SAAK,aAAL;;AAEA,QAAI,CAAC,aAAL,EAAoB;AAClB,sBAAgB,IAAhB;AACA,iBAAW,OAAX,GAAqB,IAArB;AACA,iBAAW,iBAAX,GAA+B,IAA/B;AACD;;AAED,QAAI,OAAO,SAAP,CAAiB,MAArB,EAA6B;AAC3B,WAAK,gBAAL;AACD;AACF;;AAED,eAAa,SAAb,CAAuB,aAAvB,GAAuC,YAAY;AACjD,SAAK,KAAL,GAAa,CAAb;AACA,SAAK,SAAL,GAAiB,IAAI,KAAJ,CAAU,CAAV,CAAjB;AACA,oBAAgB,SAAhB,CAA0B,KAAK,SAA/B;;AAEA,QAAI,KAAJ,EAAW;AACT,WAAK,SAAL,CAAe,CAAf,IAAoB,IAApB;AACA,WAAK,SAAL,CAAe,CAAf,IAAoB,IAApB;AACD;AACF,GATD;;AAWA,eAAa,SAAb,CAAuB,gBAAvB,GAA0C,YAAY;AACpD,QAAI,OAAO,IAAX;AACA,eAAW,MAAX,CAAkB,aAAlB,EAAiC,UAAU,MAAV,EAAkB;AACjD,UAAI,MAAJ,EAAY;AACV,aAAK,UAAL,GAAkB,UAAU,KAA5B;AACD,OAFD,MAEO;AACL,eAAO,KAAK,UAAZ;AACA,aAAK,aAAL;AACD;AACF,KAPD;;AASA,eAAW,GAAX,CAAe,eAAf,EAAgC,YAAY;AAC1C;AACA,UAAI,KAAK,UAAT,EAAqB;AACnB,aAAK,UAAL,GAAkB,UAAU,KAA5B;AACA,aAAK,aAAL;AACD;AACF,KAND;AAOD,GAlBD;;AAoBA,eAAa,SAAb,CAAuB,iBAAvB,GAA2C,UAAU,aAAV,EAAyB;AAClE,QAAI,cAAc,KAAK,YAAL,CAAkB,aAAlB,CAAlB;AACA,QAAI,CAAC,WAAL,EAAkB;AAChB,aAAO,KAAP;AACD;AACD,QAAI,OAAO,IAAX;AACA,QAAI,YAAY,SAAhB,EAA2B;AACzB,UAAI,WAAW,EAAf;AACA,cAAQ,OAAR,CAAgB,YAAY,KAA5B,EAAmC,UAAU,kBAAV,EAA8B;AAC/D,YAAI,mBAAmB,KAAK,iBAAL,CAAuB,kBAAvB,CAAvB;AACA,YAAI,gBAAJ,EAAsB;AACpB,mBAAS,IAAT,CAAc,iBAAiB,MAA/B;AACD;AACF,OALD;AAMA,kBAAY,KAAZ,GAAoB,QAApB;AACD;;AAED,gBAAY,MAAZ,GAAqB,eAAe,UAAf,EAArB;AACA,gBAAY,MAAZ,GAAqB,KAAK,aAAL,CACnB,YAAY,iBAAZ,IACA,YAAY,SAFO,CAArB;AAIA,SAAK,YAAL,CAAkB,YAAY,MAA9B,IAAwC,WAAxC;AACA,WAAO,KAAK,YAAL,CAAkB,aAAlB,CAAP;;AAEA,WAAO,WAAP;AACD,GA1BD;;AA4BA,eAAa,SAAb,CAAuB,aAAvB,GAAuC,UAAU,iBAAV,EAA6B;AAClE,QAAI,QAAQ,KAAK,KAAL,GAAa,CAAzB;;AAEA,QAAI,CAAC,iBAAL,EAAwB;AACtB;AACA,WAAK,KAAL;AACD;;AAED,WAAO,KAAP;AACD,GATD;;AAWA,eAAa,SAAb,CAAuB,WAAvB,GAAqC,UAAU,MAAV,EAAkB,MAAlB,EAA0B,OAA1B,EAAmC;AACtE,QAAI,aAAa,IAAI,eAAJ,CAAoB,EAAC,SAAS,IAAV,EAApB,CAAjB;;AAEA,eAAW,WAAX,CAAuB,MAAvB,EAA+B,MAA/B;;AAEA,QAAI,YAAY,eAAe,UAAf,EAAhB;AACA,QAAI,QAAQ,KAAK,aAAL,EAAZ;AACA,QAAI,UAAU;AACZ,cAAQ,SADI;AAEZ,cAAQ,KAFI;AAGZ,YAAM,WAAW,QAAX;AAHM,KAAd;;AAMA,QAAI,OAAO,KAAP,CAAa,KAAjB,EAAwB;AACtB,cAAQ,GAAR,CAAY,IAAZ,EAAkB,SAAlB,EAA6B,MAA7B,EAAqC,MAArC,EAA6C,SAA7C,EAAwD,KAAxD;AACD;;AAED,WAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,OAA1B,CAAP;AACD,GAlBD;;AAoBA,eAAa,SAAb,CAAuB,cAAvB,GAAwC,UAAU,MAAV,EAAkB,OAAlB,EAA2B;AACjE,cAAU,WAAW,EAArB;;AAEA,QAAI,aAAa,IAAI,eAAJ,CAAoB,EAAC,SAAS,IAAV,EAApB,CAAjB;AACA,eAAW,WAAX,CAAuB,MAAvB,EAA+B,QAA/B;;AAEA,QAAI,YAAY,eAAe,UAAf,EAAhB;AACA,QAAI,QAAQ,KAAK,aAAL,CAAmB,QAAQ,iBAA3B,CAAZ;AACA,QAAI,UAAU;AACZ,cAAQ,SADI;AAEZ,cAAQ,KAFI;AAGZ,YAAM,WAAW,QAAX;AAHM,KAAd;;AAMA,QAAI,OAAO,KAAP,CAAa,KAAjB,EAAwB;AACtB,cAAQ,GAAR,CAAY,IAAZ,EAAkB,YAAlB,EAAgC,MAAhC,EAAwC,SAAxC,EAAmD,KAAnD;AACD;;AAED,WAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,OAA1B,CAAP;AACD,GAnBD;;AAqBA,eAAa,SAAb,CAAuB,WAAvB,GAAqC,UAAU,MAAV,EAAkB,MAAlB,EAA0B,OAA1B,EAAmC;AACtE,QAAI,aAAa,IAAI,eAAJ,CAAoB,OAApB,CAAjB;;AAEA,QAAI,CAAC,KAAK,gBAAV,EAA4B;AAC1B,iBAAW,QAAX,CAAoB,UAApB,EAAgC,iBAAhC;AACA,iBAAW,QAAX,CAAoB,OAAO,MAAP,CAAc,GAAd,CAAkB,KAAtC,EAA6C,OAA7C;AACA,iBAAW,QAAX,CAAoB,UAApB,EAAgC,gBAAhC;AACA,iBAAW,QAAX,CAAoB,OAAO,GAAP,CAAW,EAA/B,EAAmC,QAAnC;AACA,iBAAW,WAAX,CAAuB,UAAU,SAAV,IAAuB,mBAA9C,EAAmE,cAAnE;AACA,iBAAW,WAAX,CAAuB,UAAU,QAAV,IAAsB,kBAA7C,EAAiE,gBAAjE;AACA,iBAAW,WAAX,CAAuB,OAAO,GAAP,CAAW,OAAlC,EAA2C,aAA3C;AACA,iBAAW,WAAX,CAAuB,UAAU,QAAV,IAAsB,IAA7C,EAAmD,WAAnD;AACD;;AAED,QAAI,QAAQ,cAAZ,EAA4B;AAC1B,iBAAW,QAAX,CAAoB,UAApB,EAAgC,gBAAhC;AACA,iBAAW,SAAX,CAAqB,QAAQ,cAA7B,EAA6C,QAA7C;AACD;;AAED,YAAQ,UAAR,GAAqB,WAAW,WAAX,CAAuB,MAAvB,EAA+B,MAA/B,CAArB;;AAEA,QAAI,YAAY,eAAe,UAAf,EAAhB;AACA,QAAI,QAAQ,KAAK,aAAL,EAAZ;AACA,QAAI,UAAU;AACZ,cAAQ,SADI;AAEZ,cAAQ,KAFI;AAGZ,YAAM,WAAW,QAAX,CAAoB,IAApB,CAHM;AAIZ,aAAO;AAJK,KAAd;;AAOA,QAAI,OAAO,KAAP,CAAa,KAAjB,EAAwB;AACtB,cAAQ,GAAR,CAAY,IAAZ,EAAkB,UAAlB,EAA8B,MAA9B,EAAsC,MAAtC,EAA8C,SAA9C,EAAyD,KAAzD,EAAgE,OAAhE;AACD,KAFD,MAEO;AACL,cAAQ,GAAR,CAAY,IAAZ,EAAkB,UAAlB,EAA8B,MAA9B;AACD;;AAED,WAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,OAA1B,CAAP;AACD,GArCD;;AAuCA,eAAa,SAAb,CAAuB,aAAvB,GAAuC,UAAU,KAAV,EAAiB;AACtD,QAAI,UAAU,KAAK,WAAL,EAAd;AACA;AACA,QAAI,KAAK,eAAL,IAAwB,UAAU,KAAK,eAAvC,IACF,KAAK,OADH,IAEF,SAFF,EAEa;AACX,aAAO,KAAP;AACD;AACD,QAAI,OAAO,IAAX;AACA,YAAQ,GAAR,CAAY,IAAZ,EAAkB,IAAlB,CAAuB,UAAU,QAAV,EAAoB;AACzC,UAAI,YACF,YAAY,KAAK,IAAjB,IACA,KAAK,MADL,IAEA,KAAK,UAAL,IAAmB,UAAU,KAAK,UAHhC,CAAJ,EAIK;AACH;AACA;AACD;AACD,WAAK,YAAL;AACD,KAVD;AAWD,GApBD;;AAsBA,eAAa,SAAb,CAAuB,YAAvB,GAAsC,YAAY;AAChD,QAAI,UAAU,KAAd;AACA,QAAI,OAAO,IAAX;;AAEA,SAAK,eAAL,GAAuB,UAAU,OAAjC;AACA;;AAEA,SAAK,WAAL,CAAiB,WAAjB,EAA8B;AAC5B,iBAAW,GADiB;AAE5B,kBAAY,GAFgB;AAG5B,gBAAU;AAHkB,KAA9B,EAIG;AACD,kBAAY,IADX;AAED,gBAAU;AAFT,KAJH,EAOG,IAPH,CAOQ,YAAY;AAClB,aAAO,KAAK,eAAZ;AACA,qBAAe,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAf;AACD,KAVD,EAUG,YAAY;AACb,cAAQ,GAAR,CAAY,kBAAZ;AACD,KAZD;AAaD,GApBD;;AAsBA,eAAa,SAAb,CAAuB,WAAvB,GAAqC,UAAU,OAAV,EAAmB,OAAnB,EAA4B;AAC/D,QAAI,WAAW,GAAG,KAAH,EAAf;;AAEA,SAAK,YAAL,CAAkB,QAAQ,MAA1B,IAAoC,QAAQ,MAAR,CAAe,OAAf,EAAwB,WAAW,EAAnC,EAAuC,EAAC,UAAU,QAAX,EAAvC,CAApC;AACA,SAAK,eAAL,CAAqB,QAAQ,MAA7B,IAAuC,CAAvC;;AAEA,QAAI,CAAC,OAAD,IAAY,CAAC,QAAQ,SAAzB,EAAoC;AAClC,WAAK,cAAL;AACD;AACD,QAAI,QAAQ,QAAR,CAAiB,OAAjB,CAAJ,EAA+B;AAC7B,cAAQ,SAAR,GAAoB,QAAQ,MAA5B;AACD;;AAED,WAAO,SAAS,OAAhB;AACD,GAdD;;AAgBA,eAAa,SAAb,CAAuB,UAAvB,GAAoC,UAAU,SAAV,EAAqB,KAArB,EAA4B;AAC9D,QAAI,QAAQ,QAAQ,UAAU,KAAlB,GAA0B,CAAtC;AACA,QAAI,cAAc,KAAK,YAAL,CAAkB,SAAlB,CAAlB;AACA,QAAI,YAAY,SAAhB,EAA2B;AACzB,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,YAAY,KAAZ,CAAkB,MAAtC,EAA8C,GAA9C,EAAmD;AACjD,aAAK,eAAL,CAAqB,YAAY,KAAZ,CAAkB,CAAlB,CAArB,IAA6C,KAA7C;AACD;AACF,KAJD,MAIO;AACL,WAAK,eAAL,CAAqB,SAArB,IAAkC,KAAlC;AACD;;AAED;;AAEA,SAAK,cAAL,CAAoB,KAApB;AACD,GAdD;;AAgBA,eAAa,SAAb,CAAuB,WAAvB,GAAqC,UAAU,MAAV,EAAkB,KAAlB,EAAyB;AAC5D,QAAI,UAAU,KAAK,YAAnB;AACA,QAAI,IAAI,QAAQ,CAAR,GAAY,CAApB;AACA,QAAI,YAAY,IAAI,UAAJ,CAAe,EAAf,CAAhB;AACA,QAAI,YAAY,IAAI,UAAJ,CAAe,EAAf,CAAhB;AACA,QAAI,YAAY,IAAI,UAAJ,CAAe,EAAf,CAAhB;AACA,QAAI,YAAY,IAAI,UAAJ,CAAe,EAAf,CAAhB;AACA,QAAI,WAAW,EAAf;;AAEA,cAAU,GAAV,CAAc,MAAd,EAAsB,CAAtB;AACA,cAAU,GAAV,CAAc,QAAQ,QAAR,CAAiB,CAAjB,EAAoB,IAAI,EAAxB,CAAd,EAA2C,EAA3C;AACA,aAAS,KAAT,GAAiB,aAAa,QAAb,CAAsB,SAAtB,CAAjB;;AAEA,cAAU,GAAV,CAAc,QAAQ,QAAR,CAAiB,IAAI,EAArB,EAAyB,IAAI,EAA7B,CAAd,EAAgD,CAAhD;AACA,cAAU,GAAV,CAAc,MAAd,EAAsB,EAAtB;AACA,cAAU,GAAV,CAAc,QAAQ,QAAR,CAAiB,IAAI,EAArB,EAAyB,IAAI,EAA7B,CAAd,EAAgD,EAAhD;AACA,aAAS,KAAT,GAAiB,aAAa,QAAb,CAAsB,SAAtB,CAAjB;;AAEA,cAAU,GAAV,CAAc,QAAQ,QAAR,CAAiB,IAAI,EAArB,EAAyB,IAAI,EAA7B,CAAd,EAAgD,CAAhD;AACA,cAAU,GAAV,CAAc,MAAd,EAAsB,EAAtB;AACA,aAAS,KAAT,GAAiB,aAAa,QAAb,CAAsB,SAAtB,CAAjB;;AAEA,cAAU,GAAV,CAAc,MAAd,EAAsB,CAAtB;AACA,cAAU,GAAV,CAAc,QAAQ,QAAR,CAAiB,IAAI,EAArB,EAAyB,IAAI,GAA7B,CAAd,EAAiD,EAAjD;AACA,aAAS,KAAT,GAAiB,aAAa,QAAb,CAAsB,SAAtB,CAAjB;;AAEA,WAAO,GAAG,GAAH,CAAO,QAAP,EAAiB,IAAjB,CAAsB,UAAU,MAAV,EAAkB;AAC7C,UAAI,SAAS,IAAI,UAAJ,CAAe,EAAf,CAAb;AACA,UAAI,QAAQ,IAAI,UAAJ,CAAe,EAAf,CAAZ;AACA,cAAQ,IAAI,UAAJ,CAAe,OAAO,KAAtB,CAAR,EACA,QAAQ,IAAI,UAAJ,CAAe,OAAO,KAAtB,CADR,EAEA,QAAQ,IAAI,UAAJ,CAAe,OAAO,KAAtB,CAFR,EAGA,QAAQ,IAAI,UAAJ,CAAe,OAAO,KAAtB,CAHR;;AAKA,aAAO,GAAP,CAAW,MAAM,QAAN,CAAe,CAAf,EAAkB,CAAlB,CAAX;AACA,aAAO,GAAP,CAAW,MAAM,QAAN,CAAe,CAAf,EAAkB,EAAlB,CAAX,EAAkC,CAAlC;AACA,aAAO,GAAP,CAAW,MAAM,QAAN,CAAe,CAAf,EAAkB,EAAlB,CAAX,EAAkC,EAAlC;;AAEA,YAAM,GAAN,CAAU,MAAM,QAAN,CAAe,CAAf,EAAkB,EAAlB,CAAV;AACA,YAAM,GAAN,CAAU,MAAM,QAAN,CAAe,CAAf,EAAkB,CAAlB,CAAV,EAAgC,EAAhC;AACA,YAAM,GAAN,CAAU,MAAM,QAAN,CAAe,EAAf,EAAmB,EAAnB,CAAV,EAAkC,EAAlC;AACA,YAAM,GAAN,CAAU,MAAM,QAAN,CAAe,CAAf,EAAkB,CAAlB,CAAV,EAAgC,EAAhC;;AAEA,aAAO,CAAC,MAAD,EAAS,KAAT,CAAP;AACD,KAlBM,CAAP;AAmBD,GA7CD;;AA+CA,eAAa,SAAb,CAAuB,eAAvB,GAAyC,UAAU,KAAV,EAAiB;AACxD,eAAW,iBAAX,GAA+B,IAA/B;;AAEA,YAAQ,GAAR,CAAY,IAAZ,EAAkB,kBAAlB,EAAsC,KAAtC;AACA,aAAS,MAAT,CAAgB,KAAK,sBAArB;;AAEA,QAAI,aAAa,IAAI,eAAJ,CAAoB,EAAC,SAAS,IAAV,EAApB,CAAjB;AACA,QAAI,SAAS,CAAC,cAAc,UAAd,CAAD,EAA4B,cAAc,UAAd,CAA5B,CAAb;;AAEA,eAAW,WAAX,CAAuB,MAAvB,EAA+B,EAAC,SAAS,MAAV,EAA/B;;AAEA,QAAI,cAAc;AAChB,cAAQ,eAAe,UAAf,EADQ;AAEhB,cAAQ,KAAK,aAAL,CAAmB,IAAnB,CAFQ;AAGhB,YAAM,WAAW,QAAX;AAHU,KAAlB;;AAMA,QAAI,OAAO,IAAX;AACA,SAAK,oBAAL,CAA0B,WAA1B,EAAuC,EAAC,SAAS,KAAV,EAAvC,EAAyD,IAAzD,CAA8D,UAAU,MAAV,EAAkB;AAC9E,aAAO,WAAW,iBAAlB;AACA,WAAK,aAAL,CAAmB,KAAnB;AACD,KAHD,EAGG,YAAY;AACb,cAAQ,GAAR,CAAY,IAAZ,EAAkB,QAAlB,EAA4B,KAAK,qBAAL,GAA6B,IAAzD;AACA,WAAK,sBAAL,GAA8B,SAAS,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAT,EAA0C,SAAS,KAAK,qBAAL,GAA6B,IAAtC,CAA1C,CAA9B;AACA,WAAK,qBAAL,GAA6B,KAAK,GAAL,CAAS,EAAT,EAAa,KAAK,qBAAL,GAA6B,GAA1C,CAA7B;AACA,eAAS,YAAY;AACnB,eAAO,WAAW,iBAAlB;AACD,OAFD,EAEG,IAFH;AAGD,KAVD;AAWD,GA7BD;;AA+BA,eAAa,SAAb,CAAuB,aAAvB,GAAuC,UAAU,OAAV,EAAmB;AACxD;AACA,QAAI,KAAK,OAAL,KAAiB,SAAjB,IAA8B,KAAK,OAAL,IAAgB,OAAlD,EAA2D;AACzD,aAAO,KAAP;AACD;;AAED,SAAK,OAAL,GAAe,OAAf;AACA,eAAW,OAAX,GAAqB,OAArB;AACA,eAAW,iBAAX,GAA+B,KAA/B;;AAEA,QAAI,KAAK,OAAT,EAAkB;AAChB,eAAS,MAAT,CAAgB,KAAK,cAArB;AACA,aAAO,KAAK,OAAZ;;AAEA,UAAI,KAAK,qBAAL,GAA6B,GAAjC,EAAsC;AACpC,aAAK,qBAAL,GAA6B,CAA7B;AACD;;AAED,WAAK,sBAAL,GAA8B,SAAS,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAT,EAA0C,SAAS,KAAK,qBAAL,GAA6B,IAAtC,CAA1C,CAA9B;AACA,WAAK,qBAAL,GAA6B,KAAK,GAAL,CAAS,EAAT,EAAa,CAAC,IAAI,KAAK,qBAAV,IAAmC,GAAhD,CAA7B;;AAEA,WAAK,UAAL,GAAkB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAlB;;AAEA,QAAE,SAAS,IAAX,EAAiB,EAAjB,CAAoB,cAApB,EAAoC,KAAK,UAAzC;AACD,KAdD,MAcO;AACL,aAAO,KAAK,eAAZ;AACA,WAAK,aAAL;AACA,WAAK,cAAL;;AAEA,UAAI,KAAK,UAAT,EAAqB;AACnB,UAAE,SAAS,IAAX,EAAiB,GAAjB,CAAqB,cAArB,EAAqC,KAAK,UAA1C;AACD;AACD,eAAS,MAAT,CAAgB,KAAK,sBAArB;AACD;AACF,GAlCD;;AAoCA,eAAa,SAAb,CAAuB,sBAAvB,GAAgD,YAAY;AAC1D;AACA,QAAI,KAAK,OAAL,IAAgB,SAApB,EAA+B;AAC7B,cAAQ,GAAR,CAAY,IAAZ,EAAkB,iBAAlB;AACA,aAAO,KAAP;AACD;AACD,WAAO,KAAK,OAAZ;AACA,QAAI,KAAK,WAAL,CAAiB,MAArB,EAA6B;AAC3B,UAAI,YAAY,EAAhB;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,WAAL,CAAiB,MAArC,EAA6C,GAA7C,EAAkD;AAChD,kBAAU,IAAV,CAAe,KAAK,WAAL,CAAiB,CAAjB,CAAf;AACD;AACD;AACA,WAAK,cAAL,CAAoB,EAAC,GAAG,UAAJ,EAAgB,SAAS,SAAzB,EAApB,EAAyD,EAAC,mBAAmB,IAApB,EAA0B,WAAW,IAArC,EAAzD;AACD;;AAED,QAAI,KAAK,cAAL,CAAoB,MAAxB,EAAgC;AAC9B,UAAI,eAAe,EAAnB;AACA,UAAI,aAAa,EAAC,WAAW,IAAZ,EAAkB,mBAAmB,IAArC,EAAjB;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,cAAL,CAAoB,MAAxC,EAAgD,GAAhD,EAAqD;AACnD,qBAAa,IAAb,CAAkB,KAAK,cAAL,CAAoB,CAApB,CAAlB;AACD;AACD;AACA,WAAK,cAAL,CAAoB,EAAC,GAAG,gBAAJ,EAAsB,SAAS,YAA/B,EAApB,EAAkE,UAAlE;AACA,WAAK,aAAL,GAAqB,EAAC,YAAY,WAAW,SAAxB,EAAmC,gBAAgB,YAAnD,EAArB;AACD;;AAED,QAAI,WAAW,EAAf;AAAA,QACE,OADF;AAEA,QAAI,kBAAkB,CAAtB;AACA,QAAI,cAAc,OAAlB;AACA,QAAI,aAAa,KAAjB;AACA,QAAI,cAAc,KAAlB;AACA,QAAI,iBAAiB,KAArB;AACA,QAAI,eAAe,CAAnB;AACA,QAAI,OAAO,IAAX;;AAEA,YAAQ,OAAR,CAAgB,KAAK,eAArB,EAAsC,UAAU,KAAV,EAAiB,SAAjB,EAA4B;AAChE,UAAI,CAAC,KAAD,IAAU,SAAS,WAAvB,EAAoC;AAClC,YAAI,UAAU,KAAK,YAAL,CAAkB,SAAlB,CAAd,EAA4C;AAC1C,cAAI,oBAAoB,CAAC,QAAQ,IAAR,CAAa,UAAb,IAA2B,QAAQ,IAAR,CAAa,MAAzC,IAAmD,EAA3E;AACA,cAAI,CAAC,QAAQ,iBAAT,IACF,cADF,EACkB;AAChB;AACD;AACD,cAAI,CAAC,QAAQ,iBAAT,IACF,eADE,IAEF,kBAAkB,iBAAlB,GAAsC,MAFxC,EAEgD;AAAE;AAChD,6BAAiB,IAAjB;AACA;AACD;AACD,cAAI,QAAQ,eAAZ,EAA6B;AAC3B;AACA,gBAAI,eAAe,CAAnB,EAAsB;AACpB;AACD;AACF;AACD,mBAAS,IAAT,CAAc,OAAd;AACA,6BAAmB,iBAAnB;AACA,cAAI,QAAQ,KAAZ,EAAmB;AACjB,yBAAa,IAAb;AACD,WAFD,MAGK,IAAI,QAAQ,QAAZ,EAAsB;AACzB,0BAAc,IAAd;AACD;AACF,SA1BD,MA0BO;AACL;AACD;AACD,eAAO,KAAK,eAAL,CAAqB,SAArB,CAAP;AACD;AACF,KAjCD;;AAmCA,QAAI,cAAc,CAAC,WAAnB,EAAgC;AAC9B,UAAI,aAAa,IAAI,eAAJ,CAAoB,EAAC,SAAS,IAAV,EAApB,CAAjB;AACA,iBAAW,WAAX,CAAuB,WAAvB,EAAoC;AAClC,mBAAW,GADuB;AAElC,oBAAY,GAFsB;AAGlC,kBAAU;AAHwB,OAApC;AAKA,eAAS,IAAT,CAAc;AACZ,gBAAQ,eAAe,UAAf,EADI;AAEZ,gBAAQ,KAAK,aAAL,EAFI;AAGZ,cAAM,WAAW,QAAX;AAHM,OAAd;AAKD;;AAED,QAAI,CAAC,SAAS,MAAd,EAAsB;AACpB;AACA;AACD;;AAED,QAAI,iBAAiB,EAArB;;AAEA,QAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AACvB,UAAI,YAAY,IAAI,eAAJ,CAAoB,EAAC,SAAS,IAAV,EAAgB,gBAAgB,kBAAkB,EAAlD,EAApB,CAAhB;AACA,gBAAU,QAAV,CAAmB,UAAnB,EAA+B,eAA/B;AACA,gBAAU,QAAV,CAAmB,SAAS,MAA5B,EAAoC,kBAApC;AACA,UAAI,UAAU,EAAd;AACA,UAAI,gBAAgB,EAApB;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACxC,kBAAU,SAAV,CAAoB,SAAS,CAAT,EAAY,MAAhC,EAAwC,eAAe,CAAf,GAAmB,WAA3D;AACA,sBAAc,IAAd,CAAmB,SAAS,CAAT,EAAY,MAA/B;AACA,kBAAU,QAAV,CAAmB,SAAS,CAAT,EAAY,MAA/B,EAAuC,eAAe,CAAf,GAAmB,WAA1D;AACA,kBAAU,QAAV,CAAmB,SAAS,CAAT,EAAY,IAAZ,CAAiB,MAApC,EAA4C,eAAe,CAAf,GAAmB,UAA/D;AACA,kBAAU,aAAV,CAAwB,SAAS,CAAT,EAAY,IAApC,EAA0C,eAAe,CAAf,GAAmB,SAA7D;AACA,YAAI,SAAS,CAAT,EAAY,UAAhB,EAA4B;AAC1B,yBAAe,IAAf,CAAoB,SAAS,CAAT,EAAY,MAAhC;AACD;AACF;;AAED,UAAI,uBAAuB;AACzB,gBAAQ,eAAe,UAAf,EADiB;AAEzB,gBAAQ,KAAK,aAAL,CAAmB,IAAnB,CAFiB;AAGzB,mBAAW,IAHc;AAIzB,eAAO;AAJkB,OAA3B;;AAOA,gBAAU,QAAQ,MAAR,CAAe,EAAC,MAAM,UAAU,QAAV,CAAmB,IAAnB,CAAP,EAAf,EAAiD,oBAAjD,CAAV;;AAEA,WAAK,YAAL,CAAkB,QAAQ,MAA1B,IAAoC,oBAApC;;AAEA,UAAI,OAAO,KAAP,CAAa,KAAjB,EAAwB;AACtB,gBAAQ,GAAR,CAAY,IAAZ,EAAkB,WAAlB,EAA+B,aAA/B,EAA8C,QAAQ,MAAtD,EAA8D,QAAQ,MAAtE;AACD;AACF,KA/BD,MA+BO;AACL,UAAI,QAAQ,UAAZ,EAAwB;AACtB,uBAAe,IAAf,CAAoB,QAAQ,MAA5B;AACD;AACD,WAAK,YAAL,CAAkB,QAAQ,MAA1B,IAAoC,OAApC;AACD;;AAED,SAAK,WAAL,GAAmB,EAAnB;;AAEA,QAAI,OAAO,IAAX;AACA,SAAK,oBAAL,CAA0B,OAA1B,EAAmC,IAAnC,CAAwC,UAAU,MAAV,EAAkB;AACxD,WAAK,aAAL,CAAmB,KAAnB;AACA;AACA,WAAK,aAAL,CAAmB,OAAO,IAA1B,EAAgC,IAAhC,CAAqC,UAAU,QAAV,EAAoB;AACvD,YAAI,OAAO,KAAP,CAAa,KAAjB,EAAwB;AACtB,kBAAQ,GAAR,CAAY,IAAZ,EAAkB,iBAAlB,EAAqC,KAAK,IAA1C,EAAgD,QAAhD;AACD;;AAED,aAAK,cAAL,CAAoB,SAAS,QAA7B,EAAuC,SAAS,SAAhD,EAA2D,SAAS,SAApE;;AAEA,gBAAQ,OAAR,CAAgB,cAAhB,EAAgC,UAAU,KAAV,EAAiB;AAC/C,cAAI,KAAK,YAAL,CAAkB,KAAlB,CAAJ,EAA8B;AAC5B,gBAAI,WAAW,KAAK,YAAL,CAAkB,KAAlB,EAAyB,QAAxC;AACA,mBAAO,KAAK,YAAL,CAAkB,KAAlB,CAAP;AACA,qBAAS,OAAT;AACD;AACF,SAND;;AAQA,aAAK,aAAL;;AAEA,aAAK,qBAAL,GAA6B,KAAK,GAAL,CAAS,GAAT,EAAc,KAAK,IAAL,CAAU,KAAK,qBAAf,CAAd,CAA7B;AACD,OAlBD;AAmBD,KAtBD,EAsBG,UAAU,KAAV,EAAiB;AAClB,cAAQ,GAAR,CAAY,0BAAZ,EAAwC,KAAxC;;AAEA,UAAI,QAAQ,SAAZ,EAAuB;AACrB,gBAAQ,OAAR,CAAgB,QAAQ,KAAxB,EAA+B,UAAU,KAAV,EAAiB;AAC9C,eAAK,eAAL,CAAqB,KAArB,IAA8B,CAA9B;AACD,SAFD;AAGA,eAAO,KAAK,YAAL,CAAkB,QAAQ,MAA1B,CAAP;AACD,OALD,MAKO;AACL,aAAK,eAAL,CAAqB,QAAQ,MAA7B,IAAuC,CAAvC;AACD;;AAED,cAAQ,OAAR,CAAgB,cAAhB,EAAgC,UAAU,KAAV,EAAiB;AAC/C,YAAI,KAAK,YAAL,CAAkB,KAAlB,CAAJ,EAA8B;AAC5B,cAAI,WAAW,KAAK,YAAL,CAAkB,KAAlB,EAAyB,QAAxC;AACA,iBAAO,KAAK,YAAL,CAAkB,KAAlB,CAAP;AACA,iBAAO,KAAK,eAAL,CAAqB,KAArB,CAAP;AACA,mBAAS,MAAT;AACD;AACF,OAPD;;AASA,WAAK,aAAL,CAAmB,IAAnB;AACD,KA5CD;;AA8CA,QAAI,kBAAkB,eAAe,CAArC,EAAwC;AACtC,WAAK,cAAL;AACD;AACF,GAvLD;;AAyLA,eAAa,SAAb,CAAuB,mBAAvB,GAA6C,UAAU,KAAV,EAAiB;AAC5D,QAAI,OAAO,IAAX;;AAEA;AACA,WAAO,aAAa,QAAb,CAAsB,KAAtB,EAA6B,IAA7B,CAAkC,UAAU,SAAV,EAAqB;AAC5D;AACA,UAAI,SAAS,IAAI,UAAJ,CAAe,SAAf,EAA0B,QAA1B,CAAmC,CAAnC,EAAsC,EAAtC,CAAb;AACA,aAAO,KAAK,WAAL,CAAiB,MAAjB,EAAyB,IAAzB,EAA+B,IAA/B,CAAoC,UAAU,KAAV,EAAiB;AAC1D;AACA,eAAO,aAAa,UAAb,CAAwB,KAAxB,EAA+B,MAAM,CAAN,CAA/B,EAAyC,MAAM,CAAN,CAAzC,EAAmD,IAAnD,CAAwD,UAAU,cAAV,EAA0B;AACvF;AACA,iBAAO;AACL,mBAAO,cADF;AAEL,oBAAQ;AAFH,WAAP;AAID,SANM,CAAP;AAOD,OATM,CAAP;AAUD,KAbM,CAAP;AAcD,GAlBD;;AAoBA,eAAa,SAAb,CAAuB,mBAAvB,GAA6C,UAAU,MAAV,EAAkB,aAAlB,EAAiC;AAC5E;AACA,WAAO,KAAK,WAAL,CAAiB,MAAjB,EAAyB,KAAzB,EAAgC,IAAhC,CAAqC,UAAU,KAAV,EAAiB;AAC3D;AACA,aAAO,aAAa,UAAb,CAAwB,aAAxB,EAAuC,MAAM,CAAN,CAAvC,EAAiD,MAAM,CAAN,CAAjD,CAAP;AACD,KAHM,CAAP;AAID,GAND;;AAQA,eAAa,SAAb,CAAuB,oBAAvB,GAA8C,UAAU,OAAV,EAAmB,OAAnB,EAA4B;AACxE,QAAI,OAAO,IAAX;AACA,cAAU,WAAW,EAArB;AACA;AACA;AACA,QAAI,OAAO,IAAI,eAAJ,CAAoB,EAAC,gBAAgB,QAAQ,IAAR,CAAa,MAAb,GAAsB,EAAvC,EAApB,CAAX;;AAEA,SAAK,aAAL,CAAmB,KAAK,UAAxB,EAAoC,EAApC,EAAwC,MAAxC;AACA,SAAK,aAAL,CAAmB,KAAK,SAAxB,EAAmC,EAAnC,EAAuC,YAAvC;;AAEA,SAAK,SAAL,CAAe,QAAQ,MAAvB,EAA+B,YAA/B;AACA,SAAK,QAAL,CAAc,QAAQ,MAAtB,EAA8B,QAA9B;;AAEA,SAAK,QAAL,CAAc,QAAQ,IAAR,CAAa,MAA3B,EAAmC,qBAAnC;AACA,SAAK,aAAL,CAAmB,QAAQ,IAA3B,EAAiC,cAAjC;;AAEA,WAAO,KAAK,mBAAL,CAAyB,KAAK,SAAL,EAAzB,EAA2C,IAA3C,CAAgD,UAAU,eAAV,EAA2B;AAChF;AACA,UAAI,UAAU,IAAI,eAAJ,CAAoB,EAAC,gBAAgB,gBAAgB,KAAhB,CAAsB,UAAtB,GAAmC,GAApD,EAApB,CAAd;AACA,cAAQ,aAAR,CAAsB,KAAK,SAA3B,EAAsC,EAAtC,EAA0C,aAA1C;AACA,cAAQ,aAAR,CAAsB,gBAAgB,MAAtC,EAA8C,GAA9C,EAAmD,SAAnD;AACA,cAAQ,aAAR,CAAsB,gBAAgB,KAAtC,EAA6C,gBAA7C;;AAEA,UAAI,cAAc,gBAAgB,QAAQ,SAAR,EAAhB,GAAsC,QAAQ,QAAR,EAAxD;;AAEA,UAAI,cAAJ;AACA,UAAI,MAAM,kBAAkB,YAAlB,CAA+B,KAAK,IAApC,EAA0C,KAAK,MAA/C,CAAV;AACA,UAAI,YAAY,EAAC,MAAM,GAAP,EAAY,MAAM,sBAAlB,EAA0C,KAAK,GAA/C,EAAhB;;AAEA,UAAI;AACF,kBAAU,QAAQ,MAAR,CAAe,WAAW,EAA1B,EAA8B;AACtC,wBAAc,aADwB;AAEtC,4BAAkB;AAFoB,SAA9B,CAAV;AAIA,yBAAiB,MAAM,IAAN,CAAW,GAAX,EAAgB,WAAhB,EAA6B,OAA7B,CAAjB;AACD,OAND,CAME,OAAO,CAAP,EAAU;AACV,yBAAiB,GAAG,MAAH,CAAU,CAAV,CAAjB;AACD;AACD,aAAO,eAAe,IAAf,CACL,UAAU,MAAV,EAAkB;AAChB,YAAI,CAAC,OAAO,IAAR,IAAgB,CAAC,OAAO,IAAP,CAAY,UAAjC,EAA6C;AAC3C,iBAAO,GAAG,MAAH,CAAU,SAAV,CAAP;AACD;AACD,eAAO,MAAP;AACD,OANI,EAOL,UAAU,KAAV,EAAiB;AACf,YAAI,MAAM,MAAN,IAAgB,GAAhB,IACF,CAAC,MAAM,IAAN,IAAc,EAAf,EAAmB,OAAnB,CAA2B,cAA3B,KAA8C,CAAC,CADjD,EACoD;AAClD,kBAAQ,MAAR,CACE,OAAO,KAAK,IAAZ,GAAmB,cADrB,EAEE,OAAO,KAAK,IAAZ,GAAmB,WAFrB,EAGE,IAHF,CAGO,YAAY;AACjB,8BAAkB,MAAlB;AACD,WALD;AAMD;AACD,YAAI,CAAC,MAAM,OAAP,IAAkB,CAAC,MAAM,IAA7B,EAAmC;AACjC,kBAAQ,QAAQ,MAAR,CAAe,SAAf,EAA0B,EAAC,MAAM,qBAAP,EAA8B,eAAe,KAA7C,EAA1B,CAAR;AACD;AACD,eAAO,GAAG,MAAH,CAAU,KAAV,CAAP;AACD,OArBI,CAAP;AAuBD,KA7CM,CAAP;AA8CD,GA9DD;;AAgEA,eAAa,SAAb,CAAuB,aAAvB,GAAuC,UAAU,cAAV,EAA0B;AAC/D;AACA,QAAI,OAAO,IAAX;;AAEA,QAAI,eAAe,IAAI,iBAAJ,CAAsB,cAAtB,CAAnB;;AAEA,QAAI,YAAY,aAAa,aAAb,CAA2B,EAA3B,EAA+B,KAA/B,EAAsC,aAAtC,CAAhB;AACA,QAAI,CAAC,SAAS,SAAT,EAAoB,KAAK,SAAzB,CAAL,EAA0C;AACxC,YAAM,IAAI,KAAJ,CAAU,iCAAiC,WAAW,SAAX,CAA3C,CAAN;AACD;AACD,QAAI,SAAS,aAAa,aAAb,CAA2B,GAA3B,EAAgC,IAAhC,EAAsC,SAAtC,CAAb;AACA,QAAI,gBAAgB,aAAa,aAAb,CAA2B,eAAe,UAAf,GAA4B,aAAa,SAAb,EAAvD,EAAiF,IAAjF,EAAuF,gBAAvF,CAApB;;AAEA,WAAO,KAAK,mBAAL,CAAyB,MAAzB,EAAiC,aAAjC,EAAgD,IAAhD,CAAqD,UAAU,eAAV,EAA2B;AACrF;AACA,UAAI,eAAe,IAAI,iBAAJ,CAAsB,eAAtB,EAAuC,EAAC,SAAS,IAAV,EAAvC,CAAnB;;AAEA,UAAI,OAAO,aAAa,aAAb,CAA2B,EAA3B,EAA+B,KAA/B,EAAsC,MAAtC,CAAX;AACA,UAAI,YAAY,aAAa,aAAb,CAA2B,EAA3B,EAA+B,KAA/B,EAAsC,YAAtC,CAAhB;AACA,UAAI,YAAY,aAAa,SAAb,CAAuB,YAAvB,CAAhB;;AAEA,UAAI,QAAQ,aAAa,QAAb,CAAsB,QAAtB,CAAZ;;AAEA,UAAI,cAAc,aAAa,aAAb,CAA2B,KAA3B,EAAkC,IAAlC,EAAwC,cAAxC,CAAlB;;AAEA;AACA,UAAI,WAAW,oBAAoB,eAApB,EAAqC,QAArC,CAA8C,CAA9C,EAAiD,aAAa,SAAb,EAAjD,CAAf;;AAEA,aAAO,aAAa,QAAb,CAAsB,QAAtB,EAAgC,IAAhC,CAAqC,UAAU,QAAV,EAAoB;AAC9D,YAAI,CAAC,SAAS,MAAT,EAAiB,qBAAqB,QAArB,EAA+B,KAA/B,CAAqC,CAAC,EAAtC,CAAjB,CAAL,EAAkE;AAChE,kBAAQ,IAAR,CAAa,MAAb,EAAqB,qBAAqB,QAArB,CAArB;AACA,gBAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,YAAI,SAAS,mBAAmB,WAAnB,CAAb;AACA,YAAI,sBAAsB;AACxB,mBAAS,IADe;AAExB,oBAAU;AACR,wBAAY,oBAAU,MAAV,EAAkB,KAAlB,EAAyB;AACnC,qBAAO,MAAP,GAAgB,KAAK,SAAL,CAAe,QAAQ,UAAvB,CAAhB;AACA,qBAAO,KAAP,GAAe,KAAK,QAAL,CAAc,QAAQ,SAAtB,CAAf;AACA,qBAAO,KAAP,GAAe,KAAK,QAAL,CAAc,QAAQ,SAAtB,CAAf;;AAEA,kBAAI,SAAS,KAAK,SAAL,EAAb;;AAEA,kBAAI;AACF,uBAAO,IAAP,GAAc,KAAK,WAAL,CAAiB,QAAjB,EAA2B,QAAQ,QAAnC,CAAd;AACD,eAFD,CAEE,OAAO,CAAP,EAAU;AACV,wBAAQ,KAAR,CAAc,IAAd,EAAoB,aAApB,EAAmC,EAAE,OAArC,EAA8C,EAAE,KAAhD;AACA,uBAAO,IAAP,GAAc,EAAC,GAAG,aAAJ,EAAmB,OAAO,CAA1B,EAAd;AACD;AACD,kBAAI,KAAK,MAAL,IAAe,SAAS,OAAO,KAAnC,EAA0C;AACxC;AACA;AACA,qBAAK,MAAL,GAAc,SAAS,OAAO,KAA9B;AACD;AACH;AACC,aApBO;AAqBR,2BAAe,uBAAU,MAAV,EAAkB,KAAlB,EAAyB;AACtC,qBAAO,UAAP,GAAoB,KAAK,SAAL,CAAe,QAAQ,cAAvB,CAApB;;AAEA,kBAAI,cAAc,KAAK,YAAL,CAAkB,OAAO,UAAzB,CAAlB;AACA,kBAAI,OAAO,eAAe,YAAY,UAA3B,IAAyC,QAApD;;AAEA,kBAAI,OAAO,UAAP,IAAqB,CAAC,WAA1B,EAAuC;AACrC;AACA;AACD;AACD,qBAAO,MAAP,GAAgB,KAAK,WAAL,CAAiB,IAAjB,EAAuB,QAAQ,UAA/B,CAAhB;AACF;AACC;AAjCO;AAFc,SAA1B;AAsCA,YAAI,eAAe,IAAI,iBAAJ,CAAsB,MAAtB,EAA8B,mBAA9B,CAAnB;AACA,YAAI,WAAW,aAAa,WAAb,CAAyB,EAAzB,EAA6B,OAA7B,CAAf;;AAEA,eAAO;AACL,oBAAU,QADL;AAEL,qBAAW,SAFN;AAGL,qBAAW,SAHN;AAIL,iBAAO;AAJF,SAAP;AAMD,OAtDM,CAAP;AAuDD,KAtEM,CAAP;AAuED,GApFD;;AAsFA,eAAa,SAAb,CAAuB,eAAvB,GAAyC,UAAU,aAAV,EAAyB;AAChE,QAAI,aAAa,YAAY,aAAZ,CAAjB;;AAEA,QAAI,WAAW,EAAf;AACA,aAAS,OAAO,KAAK,IAAZ,GAAmB,cAA5B,IAA8C,WAAW,UAAX,CAA9C;AACA,YAAQ,GAAR,CAAY,QAAZ;;AAEA,SAAK,UAAL,GAAkB,UAAlB;AACA,WAAO,IAAP;AACD,GATD;;AAWA,eAAa,SAAb,CAAuB,cAAvB,GAAwC,UAAU,KAAV,EAAiB;AACvD,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,eAAL,CAAqB,gBAArB;AACD;AACD,QAAI,UAAU,UAAU,KAAxB;;AAEA,QAAI,SAAS,KAAK,OAAd,IAAyB,KAAK,OAAL,IAAgB,OAA7C,EAAsD;AACpD,aAAO,KAAP;AACD;;AAED;AACA;;AAEA,aAAS,MAAT,CAAgB,KAAK,cAArB;AACA,QAAI,QAAQ,CAAZ,EAAe;AACb,WAAK,cAAL,GAAsB,SAAS,KAAK,sBAAL,CAA4B,IAA5B,CAAiC,IAAjC,CAAT,EAAiD,SAAS,CAA1D,CAAtB;AACD,KAFD,MAEO;AACL,qBAAe,KAAK,sBAAL,CAA4B,IAA5B,CAAiC,IAAjC,CAAf;AACD;;AAED,SAAK,OAAL,GAAe,OAAf;AACD,GArBD;;AAuBA,eAAa,SAAb,CAAuB,UAAvB,GAAoC,UAAU,KAAV,EAAiB;AACnD;AACA,SAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAtB;AACA,SAAK,cAAL,CAAoB,KAApB;AACD,GAJD;;AAMA,eAAa,SAAb,CAAuB,gBAAvB,GAA0C,UAAU,KAAV,EAAiB;AACzD,YAAQ,GAAR,CAAY,IAAZ,EAAkB,YAAlB,EAAgC,KAAhC;AACA,SAAK,cAAL,CAAoB,IAApB,CAAyB,KAAzB;AACA,SAAK,cAAL,CAAoB,GAApB;AACD,GAJD;;AAMA,eAAa,SAAb,CAAuB,WAAvB,GAAqC,YAAY;AAC/C,QAAI,OAAO,IAAX;AACA,QAAI,WAAW,KAAf;AACA;AACA,YAAQ,OAAR,CAAgB,KAAK,YAArB,EAAmC,UAAU,OAAV,EAAmB,KAAnB,EAA0B;AAC3D;AACA,UAAI,QAAQ,iBAAR,IAA6B,KAAK,eAAL,CAAqB,KAArB,MAAgC,SAAjE,EAA4E;AAC1E;AACA,eAAO,KAAK,YAAL,CAAkB,KAAlB,CAAP;AACD,OAHD,MAIK,IAAI,QAAQ,SAAZ,EAAuB;AAC1B,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,KAAR,CAAc,MAAlC,EAA0C,GAA1C,EAA+C;AAC7C,cAAI,KAAK,YAAL,CAAkB,QAAQ,KAAR,CAAc,CAAd,CAAlB,MAAwC,SAA5C,EAAuD;AACrD;AACA,uBAAW,IAAX;AACA;AACD;AACF;AACD;AACA,eAAO,KAAK,YAAL,CAAkB,KAAlB,CAAP;AACD,OAVI,MAUE;AACL,mBAAW,IAAX;AACD;AACF,KAnBD;;AAqBA,WAAO,CAAC,QAAR;AACD,GA1BD;;AA4BA,eAAa,SAAb,CAAuB,iBAAvB,GAA2C,UAAU,SAAV,EAAqB;AAC9D,QAAI,cAAc,KAAK,YAAL,CAAkB,SAAlB,CAAlB;AACA,QAAI,eAAe,CAAC,YAAY,KAAhC,EAAuC;AACrC,aAAO,YAAY,IAAnB;AACA,kBAAY,KAAZ,GAAoB,IAApB;;AAEA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GAVD;;AAYA,eAAa,SAAb,CAAuB,YAAvB,GAAsC,UAAU,QAAV,EAAoB;AACxD,QAAI,UAAU,CAAC,SAAS,aAAT,IAA0B,EAA3B,EAA+B,KAA/B,CAAqC,0BAArC,KAAoE,EAAlF;AACA,aAAS,UAAT,GAAsB,UAAU,SAAS,UAAnB,CAAtB;;AAEA,WAAO;AACL,YAAM,CAAC,SAAS,UAAV,IAAwB,SAAS,UAAT,IAAuB,CAA/C,GAAmD,GAAnD,GAAyD,SAAS,UADnE;AAEL,YAAM,QAAQ,CAAR,KAAc,SAFf;AAGL,mBAAa,QAAQ,CAAR,KAAe,UAAU,SAAS,UAAnB,GAAgC,GAAhC,GAAsC,SAAS,aAHtE;AAIL,qBAAe;AAJV,KAAP;AAMD,GAVD;;AAYA,eAAa,SAAb,CAAuB,cAAvB,GAAwC,UAAU,OAAV,EAAmB,SAAnB,EAA8B,SAA9B,EAAyC;AAC/E;AACA,YAAQ,QAAQ,CAAhB;AACE,WAAK,eAAL;AACE,YAAI,MAAM,QAAQ,QAAR,CAAiB,MAA3B;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,GAApB,EAAyB,GAAzB,EAA8B;AAC5B,eAAK,cAAL,CAAoB,QAAQ,QAAR,CAAiB,CAAjB,CAApB,EAAyC,SAAzC,EAAoD,SAApD;AACD;AACD;;AAEF,WAAK,iBAAL;AACE,gBAAQ,GAAR,CAAY,IAAZ,EAAkB,iBAAlB,EAAqC,OAArC;AACA,YAAI,cAAc,KAAK,YAAL,CAAkB,QAAQ,UAA1B,CAAlB;AACA,YAAI,CAAC,WAAD,IAAgB,YAAY,MAAZ,IAAsB,QAAQ,aAAlD,EAAiE;AAC/D,kBAAQ,GAAR,CAAY,QAAQ,UAApB,EAAgC,QAAQ,aAAxC;AACA,gBAAM,IAAI,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,aAAK,eAAL,CAAqB,QAAQ,eAA7B;AACA,aAAK,UAAL,CAAgB,QAAQ,UAAxB;AACA,aAAK,UAAL,CAAgB,SAAhB;AACA;;AAEF,WAAK,sBAAL;AACE,gBAAQ,GAAR,CAAY,IAAZ,EAAkB,sBAAlB,EAA0C,OAA1C;AACA,YAAI,cAAc,KAAK,YAAL,CAAkB,QAAQ,UAA1B,CAAlB;AACA,YAAI,CAAC,WAAD,IAAgB,YAAY,MAAZ,IAAsB,QAAQ,aAAlD,EAAiE;AAC/D,kBAAQ,GAAR,CAAY,QAAQ,UAApB,EAAgC,QAAQ,aAAxC;AACA,gBAAM,IAAI,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,YAAI,QAAQ,UAAR,IAAsB,EAAtB,IAA4B,QAAQ,UAAR,IAAsB,EAAtD,EAA0D;AACxD,cAAI,eAAe,eAAf,CACA,aAAa,SAAb,EAAwB,UAAxB,CAAmC,EAAnC,EAAuC,QAAvC,CAAgD,EAAhD,CADA,CAAJ,EAEK;AACH,oBAAQ,GAAR,CAAY,IAAZ,EAAkB,gBAAlB;AACA,iBAAK,aAAL;AACD;AACD,cAAI,aAAa,KAAK,iBAAL,CAAuB,QAAQ,UAA/B,CAAjB;AACA,eAAK,UAAL,CAAgB,WAAW,MAA3B;AACA,eAAK,UAAL,CAAgB,SAAhB;AACD;AACD;;AAEF,WAAK,SAAL;AACE,aAAK,cAAL,CAAoB,IAApB,CAAyB,QAAQ,MAAjC;AACA,aAAK,cAAL,CAAoB,QAAQ,IAA5B,EAAkC,QAAQ,MAA1C,EAAkD,SAAlD;AACA;;AAEF,WAAK,qBAAL;AACE,aAAK,UAAL,CAAgB,SAAhB;;AAEA,aAAK,iBAAL,CAAuB,QAAQ,YAA/B;AACA,aAAK,eAAL,CAAqB,QAAQ,WAA7B;;AAEA,YAAI,OAAO,IAAX;AACA,gBAAQ,GAAR,CAAY,IAAZ,EAAkB,IAAlB,CAAuB,UAAU,QAAV,EAAoB;AACzC,cAAI,YAAY,KAAK,IAAjB,IAAyB,CAAC,KAAK,MAA/B,IAAyC,gBAA7C,EAA+D;AAC7D,6BAAiB,OAAjB,EAA0B,IAA1B;AACD;AACF,SAJD;AAKA;;AAEF,WAAK,UAAL;AACE,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,OAAR,CAAgB,MAApC,EAA4C,GAA5C,EAAiD;AAC/C,eAAK,iBAAL,CAAuB,QAAQ,OAAR,CAAgB,CAAhB,CAAvB;AACD;AACD;;AAEF,WAAK,mBAAL;AACE,YAAI,CAAC,KAAK,YAAL,CAAkB,QAAQ,MAA1B,CAAL,EAAwC;AACtC,eAAK,UAAL,CAAgB,QAAQ,aAAxB;AACA;AACD;AACH,WAAK,uBAAL;AACE;AACA,aAAK,gBAAL,CAAsB,QAAQ,aAA9B;AACA;;AAEF,WAAK,iBAAL;AACE,aAAK,UAAL,CAAgB,QAAQ,aAAxB;AACA,YAAI,KAAK,aAAL,IAAsB,KAAK,aAAL,CAAmB,UAAnB,IAAiC,QAAQ,UAA/D,IAA6E,KAAK,cAAL,CAAoB,MAArG,EAA6G;AAC3G,cAAI,CAAJ,EAAO,QAAP,EAAiB,GAAjB;AACA,eAAK,IAAI,CAAT,EAAY,IAAI,KAAK,aAAL,CAAmB,cAAnB,CAAkC,MAAlD,EAA0D,GAA1D,EAA+D;AAC7D,uBAAW,KAAK,aAAL,CAAmB,cAAnB,CAAkC,CAAlC,CAAX;AACA,kBAAM,KAAK,cAAL,CAAoB,OAApB,CAA4B,QAA5B,CAAN;AACA,gBAAI,OAAO,CAAC,CAAZ,EAAe;AACb,mBAAK,cAAL,CAAoB,MAApB,CAA2B,GAA3B,EAAgC,CAAhC;AACD;AACF;AACF;AACD;;AAEF,WAAK,YAAL;AACE,aAAK,UAAL,CAAgB,SAAhB;;AAEA,YAAI,gBAAgB,QAAQ,UAA5B;AACA,YAAI,cAAc,KAAK,YAAL,CAAkB,aAAlB,CAAlB;;AAEA,aAAK,iBAAL,CAAuB,aAAvB;AACA,YAAI,WAAJ,EAAiB;AACf,cAAI,WAAW,YAAY,QAA3B;AACA,cAAI,QAAQ,MAAR,CAAe,CAAf,IAAoB,WAAxB,EAAqC;AACnC,gBAAI,QAAQ,KAAK,YAAL,CAAkB,QAAQ,MAA1B,CAAZ;AACA,oBAAQ,GAAR,CAAY,IAAZ,EAAkB,WAAlB,EAA+B,KAA/B;AACA,gBAAI,QAAJ,EAAc;AACZ,uBAAS,MAAT,CAAgB,KAAhB;AACD;AACF,WAND,MAMO;AACL,gBAAI,QAAJ,EAAc;AACZ,kBAAI,OAAO,KAAP,CAAa,KAAjB,EAAwB;AACtB,wBAAQ,GAAR,CAAY,IAAZ,EAAkB,cAAlB,EAAkC,QAAQ,MAA1C;AACD,eAFD,MAEO;AACL,oBAAI,OAAO,QAAQ,MAAR,CAAe,CAA1B;AACA,oBAAI,CAAC,IAAL,EAAW;AACT,sBAAI,QAAQ,MAAR,CAAe,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,2BAAO,QAAQ,QAAQ,MAAR,CAAe,MAAvB,GAAgC,KAAvC;AACD,mBAFD,MAEO;AACL,2BAAO,QAAQ,MAAf;AACD;AACF;AACD,wBAAQ,GAAR,CAAY,IAAZ,EAAkB,cAAlB,EAAkC,IAAlC;AACD;AACD,0BAAY,QAAZ,CAAqB,OAArB,CAA6B,QAAQ,MAArC;AACD;AACD,gBAAI,YAAY,KAAhB,EAAuB;AACrB,mBAAK,gBAAL,GAAwB,IAAxB;AACD;AACF;;AAED,iBAAO,KAAK,YAAL,CAAkB,aAAlB,CAAP;AACD;AACD;;AAEF;AACE,aAAK,UAAL,CAAgB,SAAhB;;AAEA;AACA,YAAI,gBAAJ,EAAsB;AACpB,2BAAiB,OAAjB,EAA0B,IAA1B;AACD;AACD;;AA3IJ;AA8ID,GAhJD;;AAkJA,WAAS,QAAT,GAAqB;AACnB,QAAI,SAAJ,EAAe;AACb,kBAAY,KAAZ;AACA,uBAAiB,EAAC,GAAG,qBAAJ,EAAjB,EAA6C,IAA7C;AACD;AACF;;AAED,WAAS,OAAT,GAAoB;AAClB,gBAAY,IAAZ;AACD;;AAED,SAAO;AACL,kBAAc,sBAAU,IAAV,EAAgB,OAAhB,EAAyB,UAAzB,EAAqC,OAArC,EAA8C;AAC1D,aAAO,IAAI,YAAJ,CAAiB,IAAjB,EAAuB,OAAvB,EAAgC,UAAhC,EAA4C,OAA5C,CAAP;AACD,KAHI;AAIL,yBAAqB,6BAAU,QAAV,EAAoB;AACvC,yBAAmB,QAAnB;AACD,KANI;AAOL,aAAS,OAPJ;AAQL,cAAU;AARL,GAAP;AAUD,CAtiDH","file":"mtproto-compiled.js","sourcesContent":["/*!\n * Webogram v0.5.5 - messaging web application for MTProto\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nangular.module('izhukov.mtproto', ['izhukov.utils'])\n\n  .factory('MtpDcConfigurator', function () {\n    var sslSubdomains = ['pluto', 'venus', 'aurora', 'vesta', 'flora']\n\n    var dcOptions = Config.Modes.test\n      ? [\n        {id: 1, host: '149.154.175.10',  port: 80},\n        {id: 2, host: '149.154.167.40',  port: 80},\n        {id: 3, host: '149.154.175.117', port: 80}\n      ]\n      : [\n        {id: 1, host: '149.154.175.50',  port: 80},\n        {id: 2, host: '149.154.167.51',  port: 80},\n        {id: 3, host: '149.154.175.100', port: 80},\n        {id: 4, host: '149.154.167.91',  port: 80},\n        {id: 5, host: '149.154.171.5',   port: 80}\n      ]\n\n    var chosenServers = {}\n\n    function chooseServer (dcID, upload) {\n      if (chosenServers[dcID] === undefined) {\n        var chosenServer = false,\n          i, dcOption\n\n        if (Config.Modes.ssl || !Config.Modes.http) {\n          var subdomain = sslSubdomains[dcID - 1] + (upload ? '-1' : '')\n          var path = Config.Modes.test ? 'apiw_test1' : 'apiw1'\n          chosenServer = 'https://' + subdomain + '.web.telegram.org/' + path\n          return chosenServer\n        }\n\n        for (i = 0; i < dcOptions.length; i++) {\n          dcOption = dcOptions[i]\n          if (dcOption.id == dcID) {\n            chosenServer = 'http://' + dcOption.host + (dcOption.port != 80 ? ':' + dcOption.port : '') + '/apiw1'\n            break\n          }\n        }\n        chosenServers[dcID] = chosenServer\n      }\n\n      return chosenServers[dcID]\n    }\n\n    return {\n      chooseServer: chooseServer\n    }\n  })\n\n  .factory('MtpRsaKeysManager', function () {\n\n    /**\n    *  Server public key, obtained from here: https://core.telegram.org/api/obtaining_api_id\n    *\n    * -----BEGIN RSA PUBLIC KEY-----\n    * MIIBCgKCAQEAwVACPi9w23mF3tBkdZz+zwrzKOaaQdr01vAbU4E1pvkfj4sqDsm6\n    * lyDONS789sVoD/xCS9Y0hkkC3gtL1tSfTlgCMOOul9lcixlEKzwKENj1Yz/s7daS\n    * an9tqw3bfUV/nqgbhGX81v/+7RFAEd+RwFnK7a+XYl9sluzHRyVVaTTveB2GazTw\n    * Efzk2DWgkBluml8OREmvfraX3bkHZJTKX4EQSjBbbdJ2ZXIsRrYOXfaA+xayEGB+\n    * 8hdlLmAjbCVfaigxX0CDqWeR1yFL9kwd9P0NsZRPsmoqVwMbMu7mStFai6aIhc3n\n    * Slv8kg9qv1m6XHVQY3PnEw+QQtqSIXklHwIDAQAB\n    * -----END RSA PUBLIC KEY-----\n    */\n\n    var publisKeysHex = [{\n      modulus: 'c150023e2f70db7985ded064759cfecf0af328e69a41daf4d6f01b538135a6f91f8f8b2a0ec9ba9720ce352efcf6c5680ffc424bd634864902de0b4bd6d49f4e580230e3ae97d95c8b19442b3c0a10d8f5633fecedd6926a7f6dab0ddb7d457f9ea81b8465fcd6fffeed114011df91c059caedaf97625f6c96ecc74725556934ef781d866b34f011fce4d835a090196e9a5f0e4449af7eb697ddb9076494ca5f81104a305b6dd27665722c46b60e5df680fb16b210607ef217652e60236c255f6a28315f4083a96791d7214bf64c1df4fd0db1944fb26a2a57031b32eee64ad15a8ba68885cde74a5bfc920f6abf59ba5c75506373e7130f9042da922179251f',\n      exponent: '010001'\n    }]\n\n    var publicKeysParsed = {}\n    var prepared = false\n\n    function prepareRsaKeys () {\n      if (prepared) {\n        return\n      }\n\n      for (var i = 0; i < publisKeysHex.length; i++) {\n        var keyParsed = publisKeysHex[i]\n\n        var RSAPublicKey = new TLSerialization()\n        RSAPublicKey.storeBytes(bytesFromHex(keyParsed.modulus), 'n')\n        RSAPublicKey.storeBytes(bytesFromHex(keyParsed.exponent), 'e')\n\n        var buffer = RSAPublicKey.getBuffer()\n\n        var fingerprintBytes = sha1BytesSync(buffer).slice(-8)\n        fingerprintBytes.reverse()\n\n        publicKeysParsed[bytesToHex(fingerprintBytes)] = {\n          modulus: keyParsed.modulus,\n          exponent: keyParsed.exponent\n        }\n      }\n\n      prepared = true\n    }\n\n    function selectRsaKeyByFingerPrint (fingerprints) {\n      prepareRsaKeys()\n\n      var fingerprintHex, foundKey, i\n      for (i = 0; i < fingerprints.length; i++) {\n        fingerprintHex = bigStringInt(fingerprints[i]).toString(16)\n        if (foundKey = publicKeysParsed[fingerprintHex]) {\n          return angular.extend({fingerprint: fingerprints[i]}, foundKey)\n        }\n      }\n\n      return false\n    }\n\n    return {\n      prepare: prepareRsaKeys,\n      select: selectRsaKeyByFingerPrint\n    }\n  })\n\n  .service('MtpSecureRandom', function ($window) {\n    $($window).on('click keydown', rng_seed_time)\n    return new SecureRandom()\n  })\n\n  .factory('MtpTimeManager', function (Storage) {\n    var lastMessageID = [0, 0]\n    var timeOffset = 0\n\n    Storage.get('server_time_offset').then(function (to) {\n      if (to) {\n        timeOffset = to\n      }\n    })\n\n    function generateMessageID () {\n      var timeTicks = tsNow(),\n        timeSec = Math.floor(timeTicks / 1000) + timeOffset,\n        timeMSec = timeTicks % 1000,\n        random = nextRandomInt(0xFFFF)\n\n      var messageID = [timeSec, (timeMSec << 21) | (random << 3) | 4]\n      if (lastMessageID[0] > messageID[0] ||\n        lastMessageID[0] == messageID[0] && lastMessageID[1] >= messageID[1]) {\n        messageID = [lastMessageID[0], lastMessageID[1] + 4]\n      }\n\n      lastMessageID = messageID\n\n      // console.log('generated msg id', messageID, timeOffset)\n\n      return longFromInts(messageID[0], messageID[1])\n    }\n\n    function applyServerTime (serverTime, localTime) {\n      var newTimeOffset = serverTime - Math.floor((localTime || tsNow()) / 1000)\n      var changed = Math.abs(timeOffset - newTimeOffset) > 10\n      Storage.set({server_time_offset: newTimeOffset})\n\n      lastMessageID = [0, 0]\n      timeOffset = newTimeOffset\n      console.log(dT(), 'Apply server time', serverTime, localTime, newTimeOffset, changed)\n\n      return changed\n    }\n\n    return {\n      generateID: generateMessageID,\n      applyServerTime: applyServerTime\n    }\n  })\n\n  .factory('MtpAuthorizer', function (MtpDcConfigurator, MtpRsaKeysManager, MtpSecureRandom, MtpTimeManager, CryptoWorker, $http, $q, $timeout) {\n    var chromeMatches = navigator.userAgent.match(/Chrome\\/(\\d+(\\.\\d+)?)/)\n    var chromeVersion = chromeMatches && parseFloat(chromeMatches[1]) || false\n    var xhrSendBuffer = !('ArrayBufferView' in window) && (!chromeVersion || chromeVersion < 30)\n\n    delete $http.defaults.headers.post['Content-Type']\n    delete $http.defaults.headers.common['Accept']\n\n    function mtpSendPlainRequest (dcID, requestBuffer) {\n      var requestLength = requestBuffer.byteLength,\n        requestArray = new Int32Array(requestBuffer)\n\n      var header = new TLSerialization()\n      header.storeLongP(0, 0, 'auth_key_id') // Auth key\n      header.storeLong(MtpTimeManager.generateID(), 'msg_id') // Msg_id\n      header.storeInt(requestLength, 'request_length')\n\n      var headerBuffer = header.getBuffer(),\n        headerArray = new Int32Array(headerBuffer)\n      var headerLength = headerBuffer.byteLength\n\n      var resultBuffer = new ArrayBuffer(headerLength + requestLength),\n        resultArray = new Int32Array(resultBuffer)\n\n      resultArray.set(headerArray)\n      resultArray.set(requestArray, headerArray.length)\n\n      var requestData = xhrSendBuffer ? resultBuffer : resultArray,\n        requestPromise\n      var url = MtpDcConfigurator.chooseServer(dcID)\n      var baseError = {code: 406, type: 'NETWORK_BAD_RESPONSE', url: url}\n      try {\n        requestPromise = $http.post(url, requestData, {\n          responseType: 'arraybuffer',\n          transformRequest: null\n        })\n      } catch (e) {\n        requestPromise = $q.reject(angular.extend(baseError, {originalError: e}))\n      }\n      return requestPromise.then(\n        function (result) {\n          if (!result.data || !result.data.byteLength) {\n            return $q.reject(baseError)\n          }\n\n          try {\n            var deserializer = new TLDeserialization(result.data, {mtproto: true})\n            var auth_key_id = deserializer.fetchLong('auth_key_id')\n            var msg_id = deserializer.fetchLong('msg_id')\n            var msg_len = deserializer.fetchInt('msg_len')\n          } catch (e) {\n            return $q.reject(angular.extend(baseError, {originalError: e}))\n          }\n\n          return deserializer\n        },\n        function (error) {\n          if (!error.message && !error.type) {\n            error = angular.extend(baseError, {originalError: error})\n          }\n          return $q.reject(error)\n        }\n      )\n    }\n\n    function mtpSendReqPQ (auth) {\n      var deferred = auth.deferred\n\n      var request = new TLSerialization({mtproto: true})\n\n      request.storeMethod('req_pq', {nonce: auth.nonce})\n\n      console.log(dT(), 'Send req_pq', bytesToHex(auth.nonce))\n      mtpSendPlainRequest(auth.dcID, request.getBuffer()).then(function (deserializer) {\n        var response = deserializer.fetchObject('ResPQ')\n\n        if (response._ != 'resPQ') {\n          throw new Error('resPQ response invalid: ' + response._)\n        }\n\n        if (!bytesCmp(auth.nonce, response.nonce)) {\n          throw new Error('resPQ nonce mismatch')\n        }\n\n        auth.serverNonce = response.server_nonce\n        auth.pq = response.pq\n        auth.fingerprints = response.server_public_key_fingerprints\n\n        console.log(dT(), 'Got ResPQ', bytesToHex(auth.serverNonce), bytesToHex(auth.pq), auth.fingerprints)\n\n        auth.publicKey = MtpRsaKeysManager.select(auth.fingerprints)\n\n        if (!auth.publicKey) {\n          throw new Error('No public key found')\n        }\n\n        console.log(dT(), 'PQ factorization start', auth.pq)\n        CryptoWorker.factorize(auth.pq).then(function (pAndQ) {\n          auth.p = pAndQ[0]\n          auth.q = pAndQ[1]\n          console.log(dT(), 'PQ factorization done', pAndQ[2])\n          mtpSendReqDhParams(auth)\n        }, function (error) {\n          console.log('Worker error', error, error.stack)\n          deferred.reject(error)\n        })\n      }, function (error) {\n        console.error(dT(), 'req_pq error', error.message)\n        deferred.reject(error)\n      })\n\n      $timeout(function () {\n        MtpRsaKeysManager.prepare()\n      })\n    }\n\n    function mtpSendReqDhParams (auth) {\n      var deferred = auth.deferred\n\n      auth.newNonce = new Array(32)\n      MtpSecureRandom.nextBytes(auth.newNonce)\n\n      var data = new TLSerialization({mtproto: true})\n      data.storeObject({\n        _: 'p_q_inner_data',\n        pq: auth.pq,\n        p: auth.p,\n        q: auth.q,\n        nonce: auth.nonce,\n        server_nonce: auth.serverNonce,\n        new_nonce: auth.newNonce\n      }, 'P_Q_inner_data', 'DECRYPTED_DATA')\n\n      var dataWithHash = sha1BytesSync(data.getBuffer()).concat(data.getBytes())\n\n      var request = new TLSerialization({mtproto: true})\n      request.storeMethod('req_DH_params', {\n        nonce: auth.nonce,\n        server_nonce: auth.serverNonce,\n        p: auth.p,\n        q: auth.q,\n        public_key_fingerprint: auth.publicKey.fingerprint,\n        encrypted_data: rsaEncrypt(auth.publicKey, dataWithHash)\n      })\n\n      console.log(dT(), 'Send req_DH_params')\n      mtpSendPlainRequest(auth.dcID, request.getBuffer()).then(function (deserializer) {\n        var response = deserializer.fetchObject('Server_DH_Params', 'RESPONSE')\n\n        if (response._ != 'server_DH_params_fail' && response._ != 'server_DH_params_ok') {\n          deferred.reject(new Error('Server_DH_Params response invalid: ' + response._))\n          return false\n        }\n\n        if (!bytesCmp(auth.nonce, response.nonce)) {\n          deferred.reject(new Error('Server_DH_Params nonce mismatch'))\n          return false\n        }\n\n        if (!bytesCmp(auth.serverNonce, response.server_nonce)) {\n          deferred.reject(new Error('Server_DH_Params server_nonce mismatch'))\n          return false\n        }\n\n        if (response._ == 'server_DH_params_fail') {\n          var newNonceHash = sha1BytesSync(auth.newNonce).slice(-16)\n          if (!bytesCmp(newNonceHash, response.new_nonce_hash)) {\n            deferred.reject(new Error('server_DH_params_fail new_nonce_hash mismatch'))\n            return false\n          }\n          deferred.reject(new Error('server_DH_params_fail'))\n          return false\n        }\n\n        try {\n          mtpDecryptServerDhDataAnswer(auth, response.encrypted_answer)\n        } catch (e) {\n          deferred.reject(e)\n          return false\n        }\n\n        mtpSendSetClientDhParams(auth)\n      }, function (error) {\n        deferred.reject(error)\n      })\n    }\n\n    function mtpDecryptServerDhDataAnswer (auth, encryptedAnswer) {\n      auth.localTime = tsNow()\n\n      auth.tmpAesKey = sha1BytesSync(auth.newNonce.concat(auth.serverNonce)).concat(sha1BytesSync(auth.serverNonce.concat(auth.newNonce)).slice(0, 12))\n      auth.tmpAesIv = sha1BytesSync(auth.serverNonce.concat(auth.newNonce)).slice(12).concat(sha1BytesSync([].concat(auth.newNonce, auth.newNonce)), auth.newNonce.slice(0, 4))\n\n      var answerWithHash = aesDecryptSync(encryptedAnswer, auth.tmpAesKey, auth.tmpAesIv)\n\n      var hash = answerWithHash.slice(0, 20)\n      var answerWithPadding = answerWithHash.slice(20)\n      var buffer = bytesToArrayBuffer(answerWithPadding)\n\n      var deserializer = new TLDeserialization(buffer, {mtproto: true})\n      var response = deserializer.fetchObject('Server_DH_inner_data')\n\n      if (response._ != 'server_DH_inner_data') {\n        throw new Error('server_DH_inner_data response invalid: ' + constructor)\n      }\n\n      if (!bytesCmp(auth.nonce, response.nonce)) {\n        throw new Error('server_DH_inner_data nonce mismatch')\n      }\n\n      if (!bytesCmp(auth.serverNonce, response.server_nonce)) {\n        throw new Error('server_DH_inner_data serverNonce mismatch')\n      }\n\n      console.log(dT(), 'Done decrypting answer')\n      auth.g = response.g\n      auth.dhPrime = response.dh_prime\n      auth.gA = response.g_a\n      auth.serverTime = response.server_time\n      auth.retry = 0\n\n      var offset = deserializer.getOffset()\n\n      if (!bytesCmp(hash, sha1BytesSync(answerWithPadding.slice(0, offset)))) {\n        throw new Error('server_DH_inner_data SHA1-hash mismatch')\n      }\n\n      MtpTimeManager.applyServerTime(auth.serverTime, auth.localTime)\n    }\n\n    function mtpSendSetClientDhParams (auth) {\n      var deferred = auth.deferred\n      var gBytes = bytesFromHex(auth.g.toString(16))\n\n      auth.b = new Array(256)\n      MtpSecureRandom.nextBytes(auth.b)\n\n      CryptoWorker.modPow(gBytes, auth.b, auth.dhPrime).then(function (gB) {\n        var data = new TLSerialization({mtproto: true})\n        data.storeObject({\n          _: 'client_DH_inner_data',\n          nonce: auth.nonce,\n          server_nonce: auth.serverNonce,\n          retry_id: [0, auth.retry++],\n          g_b: gB\n        }, 'Client_DH_Inner_Data')\n\n        var dataWithHash = sha1BytesSync(data.getBuffer()).concat(data.getBytes())\n\n        var encryptedData = aesEncryptSync(dataWithHash, auth.tmpAesKey, auth.tmpAesIv)\n\n        var request = new TLSerialization({mtproto: true})\n        request.storeMethod('set_client_DH_params', {\n          nonce: auth.nonce,\n          server_nonce: auth.serverNonce,\n          encrypted_data: encryptedData\n        })\n\n        console.log(dT(), 'Send set_client_DH_params')\n        mtpSendPlainRequest(auth.dcID, request.getBuffer()).then(function (deserializer) {\n          var response = deserializer.fetchObject('Set_client_DH_params_answer')\n\n          if (response._ != 'dh_gen_ok' && response._ != 'dh_gen_retry' && response._ != 'dh_gen_fail') {\n            deferred.reject(new Error('Set_client_DH_params_answer response invalid: ' + response._))\n            return false\n          }\n\n          if (!bytesCmp(auth.nonce, response.nonce)) {\n            deferred.reject(new Error('Set_client_DH_params_answer nonce mismatch'))\n            return false\n          }\n\n          if (!bytesCmp(auth.serverNonce, response.server_nonce)) {\n            deferred.reject(new Error('Set_client_DH_params_answer server_nonce mismatch'))\n            return false\n          }\n\n          CryptoWorker.modPow(auth.gA, auth.b, auth.dhPrime).then(function (authKey) {\n            var authKeyHash = sha1BytesSync(authKey),\n              authKeyAux = authKeyHash.slice(0, 8),\n              authKeyID = authKeyHash.slice(-8)\n\n            console.log(dT(), 'Got Set_client_DH_params_answer', response._)\n            switch (response._) {\n              case 'dh_gen_ok':\n                var newNonceHash1 = sha1BytesSync(auth.newNonce.concat([1], authKeyAux)).slice(-16)\n\n                if (!bytesCmp(newNonceHash1, response.new_nonce_hash1)) {\n                  deferred.reject(new Error('Set_client_DH_params_answer new_nonce_hash1 mismatch'))\n                  return false\n                }\n\n                var serverSalt = bytesXor(auth.newNonce.slice(0, 8), auth.serverNonce.slice(0, 8))\n                // console.log('Auth successfull!', authKeyID, authKey, serverSalt)\n\n                auth.authKeyID = authKeyID\n                auth.authKey = authKey\n                auth.serverSalt = serverSalt\n\n                deferred.resolve(auth)\n                break\n\n              case 'dh_gen_retry':\n                var newNonceHash2 = sha1BytesSync(auth.newNonce.concat([2], authKeyAux)).slice(-16)\n                if (!bytesCmp(newNonceHash2, response.new_nonce_hash2)) {\n                  deferred.reject(new Error('Set_client_DH_params_answer new_nonce_hash2 mismatch'))\n                  return false\n                }\n\n                return mtpSendSetClientDhParams(auth)\n\n              case 'dh_gen_fail':\n                var newNonceHash3 = sha1BytesSync(auth.newNonce.concat([3], authKeyAux)).slice(-16)\n                if (!bytesCmp(newNonceHash3, response.new_nonce_hash3)) {\n                  deferred.reject(new Error('Set_client_DH_params_answer new_nonce_hash3 mismatch'))\n                  return false\n                }\n\n                deferred.reject(new Error('Set_client_DH_params_answer fail'))\n                return false\n            }\n          }, function (error) {\n            deferred.reject(error)\n          })\n        }, function (error) {\n          deferred.reject(error)\n        })\n      }, function (error) {\n        deferred.reject(error)\n      })\n    }\n\n    var cached = {}\n\n    function mtpAuth (dcID) {\n      if (cached[dcID] !== undefined) {\n        return cached[dcID]\n      }\n\n      var nonce = []\n      for (var i = 0; i < 16; i++) {\n        nonce.push(nextRandomInt(0xFF))\n      }\n\n      if (!MtpDcConfigurator.chooseServer(dcID)) {\n        return $q.reject(new Error('No server found for dc ' + dcID))\n      }\n\n      var auth = {\n        dcID: dcID,\n        nonce: nonce,\n        deferred: $q.defer()\n      }\n\n      $timeout(function () {\n        mtpSendReqPQ(auth)\n      })\n\n      cached[dcID] = auth.deferred.promise\n\n      cached[dcID]['catch'](function () {\n        delete cached[dcID]\n      })\n\n      return cached[dcID]\n    }\n\n    return {\n      auth: mtpAuth\n    }\n  })\n\n  .factory('MtpNetworkerFactory', function (MtpDcConfigurator, MtpTimeManager, MtpSecureRandom, Storage, CryptoWorker, AppRuntimeManager, $http, $q, $timeout, $interval, $rootScope) {\n    var updatesProcessor\n    var iii = 0,\n      offline\n    var offlineInited = false\n    var akStopped = false\n    var chromeMatches = navigator.userAgent.match(/Chrome\\/(\\d+(\\.\\d+)?)/)\n    var chromeVersion = chromeMatches && parseFloat(chromeMatches[1]) || false\n    var xhrSendBuffer = !('ArrayBufferView' in window) && (!chromeVersion || chromeVersion < 30)\n\n    delete $http.defaults.headers.post['Content-Type']\n    delete $http.defaults.headers.common['Accept']\n\n    $rootScope.retryOnline = function () {\n      $(document.body).trigger('online')\n    }\n\n    function MtpNetworker (dcID, authKey, serverSalt, options) {\n      options = options || {}\n\n      this.dcID = dcID\n      this.iii = iii++\n\n      this.authKey = authKey\n      this.authKeyUint8 = convertToUint8Array(authKey)\n      this.authKeyBuffer = convertToArrayBuffer(authKey)\n      this.authKeyID = sha1BytesSync(authKey).slice(-8)\n\n      this.serverSalt = serverSalt\n\n      this.upload = options.fileUpload || options.fileDownload || false\n\n      this.updateSession()\n\n      this.currentRequests = 0\n      this.checkConnectionPeriod = 0\n\n      this.sentMessages = {}\n      this.serverMessages = []\n      this.clientMessages = []\n\n      this.pendingMessages = {}\n      this.pendingAcks = []\n      this.pendingResends = []\n      this.connectionInited = false\n\n      this.pendingTimeouts = []\n\n      this.longPollInt = $interval(this.checkLongPoll.bind(this), 10000)\n      this.checkLongPoll()\n\n      if (!offlineInited) {\n        offlineInited = true\n        $rootScope.offline = true\n        $rootScope.offlineConnecting = true\n      }\n\n      if (Config.Navigator.mobile) {\n        this.setupMobileSleep()\n      }\n    }\n\n    MtpNetworker.prototype.updateSession = function () {\n      this.seqNo = 0\n      this.sessionID = new Array(8)\n      MtpSecureRandom.nextBytes(this.sessionID)\n\n      if (false) {\n        this.sessionID[0] = 0xAB\n        this.sessionID[1] = 0xCD\n      }\n    }\n\n    MtpNetworker.prototype.setupMobileSleep = function () {\n      var self = this\n      $rootScope.$watch('idle.isIDLE', function (isIDLE) {\n        if (isIDLE) {\n          self.sleepAfter = tsNow() + 30000\n        } else {\n          delete self.sleepAfter\n          self.checkLongPoll()\n        }\n      })\n\n      $rootScope.$on('push_received', function () {\n        // console.log(dT(), 'push recieved', self.sleepAfter)\n        if (self.sleepAfter) {\n          self.sleepAfter = tsNow() + 30000\n          self.checkLongPoll()\n        }\n      })\n    }\n\n    MtpNetworker.prototype.updateSentMessage = function (sentMessageID) {\n      var sentMessage = this.sentMessages[sentMessageID]\n      if (!sentMessage) {\n        return false\n      }\n      var self = this\n      if (sentMessage.container) {\n        var newInner = []\n        angular.forEach(sentMessage.inner, function (innerSentMessageID) {\n          var innerSentMessage = self.updateSentMessage(innerSentMessageID)\n          if (innerSentMessage) {\n            newInner.push(innerSentMessage.msg_id)\n          }\n        })\n        sentMessage.inner = newInner\n      }\n\n      sentMessage.msg_id = MtpTimeManager.generateID()\n      sentMessage.seq_no = this.generateSeqNo(\n        sentMessage.notContentRelated ||\n        sentMessage.container\n      )\n      this.sentMessages[sentMessage.msg_id] = sentMessage\n      delete self.sentMessages[sentMessageID]\n\n      return sentMessage\n    }\n\n    MtpNetworker.prototype.generateSeqNo = function (notContentRelated) {\n      var seqNo = this.seqNo * 2\n\n      if (!notContentRelated) {\n        seqNo++\n        this.seqNo++\n      }\n\n      return seqNo\n    }\n\n    MtpNetworker.prototype.wrapMtpCall = function (method, params, options) {\n      var serializer = new TLSerialization({mtproto: true})\n\n      serializer.storeMethod(method, params)\n\n      var messageID = MtpTimeManager.generateID()\n      var seqNo = this.generateSeqNo()\n      var message = {\n        msg_id: messageID,\n        seq_no: seqNo,\n        body: serializer.getBytes()\n      }\n\n      if (Config.Modes.debug) {\n        console.log(dT(), 'MT call', method, params, messageID, seqNo)\n      }\n\n      return this.pushMessage(message, options)\n    }\n\n    MtpNetworker.prototype.wrapMtpMessage = function (object, options) {\n      options = options || {}\n\n      var serializer = new TLSerialization({mtproto: true})\n      serializer.storeObject(object, 'Object')\n\n      var messageID = MtpTimeManager.generateID()\n      var seqNo = this.generateSeqNo(options.notContentRelated)\n      var message = {\n        msg_id: messageID,\n        seq_no: seqNo,\n        body: serializer.getBytes()\n      }\n\n      if (Config.Modes.debug) {\n        console.log(dT(), 'MT message', object, messageID, seqNo)\n      }\n\n      return this.pushMessage(message, options)\n    }\n\n    MtpNetworker.prototype.wrapApiCall = function (method, params, options) {\n      var serializer = new TLSerialization(options)\n\n      if (!this.connectionInited) {\n        serializer.storeInt(0xda9b0d0d, 'invokeWithLayer')\n        serializer.storeInt(Config.Schema.API.layer, 'layer')\n        serializer.storeInt(0x69796de9, 'initConnection')\n        serializer.storeInt(Config.App.id, 'api_id')\n        serializer.storeString(navigator.userAgent || 'Unknown UserAgent', 'device_model')\n        serializer.storeString(navigator.platform || 'Unknown Platform', 'system_version')\n        serializer.storeString(Config.App.version, 'app_version')\n        serializer.storeString(navigator.language || 'en', 'lang_code')\n      }\n\n      if (options.afterMessageID) {\n        serializer.storeInt(0xcb9f372d, 'invokeAfterMsg')\n        serializer.storeLong(options.afterMessageID, 'msg_id')\n      }\n\n      options.resultType = serializer.storeMethod(method, params)\n\n      var messageID = MtpTimeManager.generateID()\n      var seqNo = this.generateSeqNo()\n      var message = {\n        msg_id: messageID,\n        seq_no: seqNo,\n        body: serializer.getBytes(true),\n        isAPI: true\n      }\n\n      if (Config.Modes.debug) {\n        console.log(dT(), 'Api call', method, params, messageID, seqNo, options)\n      } else {\n        console.log(dT(), 'Api call', method)\n      }\n\n      return this.pushMessage(message, options)\n    }\n\n    MtpNetworker.prototype.checkLongPoll = function (force) {\n      var isClean = this.cleanupSent()\n      // console.log('Check lp', this.longPollPending, tsNow(), this.dcID, isClean)\n      if (this.longPollPending && tsNow() < this.longPollPending ||\n        this.offline ||\n        akStopped) {\n        return false\n      }\n      var self = this\n      Storage.get('dc').then(function (baseDcID) {\n        if (isClean && (\n          baseDcID != self.dcID ||\n          self.upload ||\n          self.sleepAfter && tsNow() > self.sleepAfter\n          )) {\n          // console.warn(dT(), 'Send long-poll for DC is delayed', self.dcID, self.sleepAfter)\n          return\n        }\n        self.sendLongPoll()\n      })\n    }\n\n    MtpNetworker.prototype.sendLongPoll = function () {\n      var maxWait = 25000\n      var self = this\n\n      this.longPollPending = tsNow() + maxWait\n      // console.log('Set lp', this.longPollPending, tsNow())\n\n      this.wrapMtpCall('http_wait', {\n        max_delay: 500,\n        wait_after: 150,\n        max_wait: maxWait\n      }, {\n        noResponse: true,\n        longPoll: true\n      }).then(function () {\n        delete self.longPollPending\n        setZeroTimeout(self.checkLongPoll.bind(self))\n      }, function () {\n        console.log('Long-poll failed')\n      })\n    }\n\n    MtpNetworker.prototype.pushMessage = function (message, options) {\n      var deferred = $q.defer()\n\n      this.sentMessages[message.msg_id] = angular.extend(message, options || {}, {deferred: deferred})\n      this.pendingMessages[message.msg_id] = 0\n\n      if (!options || !options.noShedule) {\n        this.sheduleRequest()\n      }\n      if (angular.isObject(options)) {\n        options.messageID = message.msg_id\n      }\n\n      return deferred.promise\n    }\n\n    MtpNetworker.prototype.pushResend = function (messageID, delay) {\n      var value = delay ? tsNow() + delay : 0\n      var sentMessage = this.sentMessages[messageID]\n      if (sentMessage.container) {\n        for (var i = 0; i < sentMessage.inner.length; i++) {\n          this.pendingMessages[sentMessage.inner[i]] = value\n        }\n      } else {\n        this.pendingMessages[messageID] = value\n      }\n\n      // console.log('Resend due', messageID, this.pendingMessages)\n\n      this.sheduleRequest(delay)\n    }\n\n    MtpNetworker.prototype.getMsgKeyIv = function (msgKey, isOut) {\n      var authKey = this.authKeyUint8\n      var x = isOut ? 0 : 8\n      var sha1aText = new Uint8Array(48)\n      var sha1bText = new Uint8Array(48)\n      var sha1cText = new Uint8Array(48)\n      var sha1dText = new Uint8Array(48)\n      var promises = {}\n\n      sha1aText.set(msgKey, 0)\n      sha1aText.set(authKey.subarray(x, x + 32), 16)\n      promises.sha1a = CryptoWorker.sha1Hash(sha1aText)\n\n      sha1bText.set(authKey.subarray(x + 32, x + 48), 0)\n      sha1bText.set(msgKey, 16)\n      sha1bText.set(authKey.subarray(x + 48, x + 64), 32)\n      promises.sha1b = CryptoWorker.sha1Hash(sha1bText)\n\n      sha1cText.set(authKey.subarray(x + 64, x + 96), 0)\n      sha1cText.set(msgKey, 32)\n      promises.sha1c = CryptoWorker.sha1Hash(sha1cText)\n\n      sha1dText.set(msgKey, 0)\n      sha1dText.set(authKey.subarray(x + 96, x + 128), 16)\n      promises.sha1d = CryptoWorker.sha1Hash(sha1dText)\n\n      return $q.all(promises).then(function (result) {\n        var aesKey = new Uint8Array(32)\n        var aesIv = new Uint8Array(32)\n        sha1a = new Uint8Array(result.sha1a),\n        sha1b = new Uint8Array(result.sha1b),\n        sha1c = new Uint8Array(result.sha1c),\n        sha1d = new Uint8Array(result.sha1d)\n\n        aesKey.set(sha1a.subarray(0, 8))\n        aesKey.set(sha1b.subarray(8, 20), 8)\n        aesKey.set(sha1c.subarray(4, 16), 20)\n\n        aesIv.set(sha1a.subarray(8, 20))\n        aesIv.set(sha1b.subarray(0, 8), 12)\n        aesIv.set(sha1c.subarray(16, 20), 20)\n        aesIv.set(sha1d.subarray(0, 8), 24)\n\n        return [aesKey, aesIv]\n      })\n    }\n\n    MtpNetworker.prototype.checkConnection = function (event) {\n      $rootScope.offlineConnecting = true\n\n      console.log(dT(), 'Check connection', event)\n      $timeout.cancel(this.checkConnectionPromise)\n\n      var serializer = new TLSerialization({mtproto: true})\n      var pingID = [nextRandomInt(0xFFFFFFFF), nextRandomInt(0xFFFFFFFF)]\n\n      serializer.storeMethod('ping', {ping_id: pingID})\n\n      var pingMessage = {\n        msg_id: MtpTimeManager.generateID(),\n        seq_no: this.generateSeqNo(true),\n        body: serializer.getBytes()\n      }\n\n      var self = this\n      this.sendEncryptedRequest(pingMessage, {timeout: 15000}).then(function (result) {\n        delete $rootScope.offlineConnecting\n        self.toggleOffline(false)\n      }, function () {\n        console.log(dT(), 'Delay ', self.checkConnectionPeriod * 1000)\n        self.checkConnectionPromise = $timeout(self.checkConnection.bind(self), parseInt(self.checkConnectionPeriod * 1000))\n        self.checkConnectionPeriod = Math.min(60, self.checkConnectionPeriod * 1.5)\n        $timeout(function () {\n          delete $rootScope.offlineConnecting\n        }, 1000)\n      })\n    }\n\n    MtpNetworker.prototype.toggleOffline = function (enabled) {\n      // console.log('toggle ', enabled, this.dcID, this.iii)\n      if (this.offline !== undefined && this.offline == enabled) {\n        return false\n      }\n\n      this.offline = enabled\n      $rootScope.offline = enabled\n      $rootScope.offlineConnecting = false\n\n      if (this.offline) {\n        $timeout.cancel(this.nextReqPromise)\n        delete this.nextReq\n\n        if (this.checkConnectionPeriod < 1.5) {\n          this.checkConnectionPeriod = 0\n        }\n\n        this.checkConnectionPromise = $timeout(this.checkConnection.bind(this), parseInt(this.checkConnectionPeriod * 1000))\n        this.checkConnectionPeriod = Math.min(30, (1 + this.checkConnectionPeriod) * 1.5)\n\n        this.onOnlineCb = this.checkConnection.bind(this)\n\n        $(document.body).on('online focus', this.onOnlineCb)\n      } else {\n        delete this.longPollPending\n        this.checkLongPoll()\n        this.sheduleRequest()\n\n        if (this.onOnlineCb) {\n          $(document.body).off('online focus', this.onOnlineCb)\n        }\n        $timeout.cancel(this.checkConnectionPromise)\n      }\n    }\n\n    MtpNetworker.prototype.performSheduledRequest = function () {\n      // console.log(dT(), 'sheduled', this.dcID, this.iii)\n      if (this.offline || akStopped) {\n        console.log(dT(), 'Cancel sheduled')\n        return false\n      }\n      delete this.nextReq\n      if (this.pendingAcks.length) {\n        var ackMsgIDs = []\n        for (var i = 0; i < this.pendingAcks.length; i++) {\n          ackMsgIDs.push(this.pendingAcks[i])\n        }\n        // console.log('acking messages', ackMsgIDs)\n        this.wrapMtpMessage({_: 'msgs_ack', msg_ids: ackMsgIDs}, {notContentRelated: true, noShedule: true})\n      }\n\n      if (this.pendingResends.length) {\n        var resendMsgIDs = []\n        var resendOpts = {noShedule: true, notContentRelated: true}\n        for (var i = 0; i < this.pendingResends.length; i++) {\n          resendMsgIDs.push(this.pendingResends[i])\n        }\n        // console.log('resendReq messages', resendMsgIDs)\n        this.wrapMtpMessage({_: 'msg_resend_req', msg_ids: resendMsgIDs}, resendOpts)\n        this.lastResendReq = {req_msg_id: resendOpts.messageID, resend_msg_ids: resendMsgIDs}\n      }\n\n      var messages = [],\n        message\n      var messagesByteLen = 0\n      var currentTime = tsNow()\n      var hasApiCall = false\n      var hasHttpWait = false\n      var lengthOverflow = false\n      var singlesCount = 0\n      var self = this\n\n      angular.forEach(this.pendingMessages, function (value, messageID) {\n        if (!value || value >= currentTime) {\n          if (message = self.sentMessages[messageID]) {\n            var messageByteLength = (message.body.byteLength || message.body.length) + 32\n            if (!message.notContentRelated &&\n              lengthOverflow) {\n              return\n            }\n            if (!message.notContentRelated &&\n              messagesByteLen &&\n              messagesByteLen + messageByteLength > 655360) { // 640 Kb\n              lengthOverflow = true\n              return\n            }\n            if (message.singleInRequest) {\n              singlesCount++\n              if (singlesCount > 1) {\n                return\n              }\n            }\n            messages.push(message)\n            messagesByteLen += messageByteLength\n            if (message.isAPI) {\n              hasApiCall = true\n            }\n            else if (message.longPoll) {\n              hasHttpWait = true\n            }\n          } else {\n            // console.log(message, messageID)\n          }\n          delete self.pendingMessages[messageID]\n        }\n      })\n\n      if (hasApiCall && !hasHttpWait) {\n        var serializer = new TLSerialization({mtproto: true})\n        serializer.storeMethod('http_wait', {\n          max_delay: 500,\n          wait_after: 150,\n          max_wait: 3000\n        })\n        messages.push({\n          msg_id: MtpTimeManager.generateID(),\n          seq_no: this.generateSeqNo(),\n          body: serializer.getBytes()\n        })\n      }\n\n      if (!messages.length) {\n        // console.log('no sheduled messages')\n        return\n      }\n\n      var noResponseMsgs = []\n\n      if (messages.length > 1) {\n        var container = new TLSerialization({mtproto: true, startMaxLength: messagesByteLen + 64})\n        container.storeInt(0x73f1f8dc, 'CONTAINER[id]')\n        container.storeInt(messages.length, 'CONTAINER[count]')\n        var onloads = []\n        var innerMessages = []\n        for (var i = 0; i < messages.length; i++) {\n          container.storeLong(messages[i].msg_id, 'CONTAINER[' + i + '][msg_id]')\n          innerMessages.push(messages[i].msg_id)\n          container.storeInt(messages[i].seq_no, 'CONTAINER[' + i + '][seq_no]')\n          container.storeInt(messages[i].body.length, 'CONTAINER[' + i + '][bytes]')\n          container.storeRawBytes(messages[i].body, 'CONTAINER[' + i + '][body]')\n          if (messages[i].noResponse) {\n            noResponseMsgs.push(messages[i].msg_id)\n          }\n        }\n\n        var containerSentMessage = {\n          msg_id: MtpTimeManager.generateID(),\n          seq_no: this.generateSeqNo(true),\n          container: true,\n          inner: innerMessages\n        }\n\n        message = angular.extend({body: container.getBytes(true)}, containerSentMessage)\n\n        this.sentMessages[message.msg_id] = containerSentMessage\n\n        if (Config.Modes.debug) {\n          console.log(dT(), 'Container', innerMessages, message.msg_id, message.seq_no)\n        }\n      } else {\n        if (message.noResponse) {\n          noResponseMsgs.push(message.msg_id)\n        }\n        this.sentMessages[message.msg_id] = message\n      }\n\n      this.pendingAcks = []\n\n      var self = this\n      this.sendEncryptedRequest(message).then(function (result) {\n        self.toggleOffline(false)\n        // console.log('parse for', message)\n        self.parseResponse(result.data).then(function (response) {\n          if (Config.Modes.debug) {\n            console.log(dT(), 'Server response', self.dcID, response)\n          }\n\n          self.processMessage(response.response, response.messageID, response.sessionID)\n\n          angular.forEach(noResponseMsgs, function (msgID) {\n            if (self.sentMessages[msgID]) {\n              var deferred = self.sentMessages[msgID].deferred\n              delete self.sentMessages[msgID]\n              deferred.resolve()\n            }\n          })\n\n          self.checkLongPoll()\n\n          this.checkConnectionPeriod = Math.max(1.1, Math.sqrt(this.checkConnectionPeriod))\n        })\n      }, function (error) {\n        console.log('Encrypted request failed', error)\n\n        if (message.container) {\n          angular.forEach(message.inner, function (msgID) {\n            self.pendingMessages[msgID] = 0\n          })\n          delete self.sentMessages[message.msg_id]\n        } else {\n          self.pendingMessages[message.msg_id] = 0\n        }\n\n        angular.forEach(noResponseMsgs, function (msgID) {\n          if (self.sentMessages[msgID]) {\n            var deferred = self.sentMessages[msgID].deferred\n            delete self.sentMessages[msgID]\n            delete self.pendingMessages[msgID]\n            deferred.reject()\n          }\n        })\n\n        self.toggleOffline(true)\n      })\n\n      if (lengthOverflow || singlesCount > 1) {\n        this.sheduleRequest()\n      }\n    }\n\n    MtpNetworker.prototype.getEncryptedMessage = function (bytes) {\n      var self = this\n\n      // console.log(dT(), 'Start encrypt', bytes.byteLength)\n      return CryptoWorker.sha1Hash(bytes).then(function (bytesHash) {\n        // console.log(dT(), 'after hash')\n        var msgKey = new Uint8Array(bytesHash).subarray(4, 20)\n        return self.getMsgKeyIv(msgKey, true).then(function (keyIv) {\n          // console.log(dT(), 'after msg key iv')\n          return CryptoWorker.aesEncrypt(bytes, keyIv[0], keyIv[1]).then(function (encryptedBytes) {\n            // console.log(dT(), 'Finish encrypt')\n            return {\n              bytes: encryptedBytes,\n              msgKey: msgKey\n            }\n          })\n        })\n      })\n    }\n\n    MtpNetworker.prototype.getDecryptedMessage = function (msgKey, encryptedData) {\n      // console.log(dT(), 'get decrypted start')\n      return this.getMsgKeyIv(msgKey, false).then(function (keyIv) {\n        // console.log(dT(), 'after msg key iv')\n        return CryptoWorker.aesDecrypt(encryptedData, keyIv[0], keyIv[1])\n      })\n    }\n\n    MtpNetworker.prototype.sendEncryptedRequest = function (message, options) {\n      var self = this\n      options = options || {}\n      // console.log(dT(), 'Send encrypted'/*, message*/)\n      // console.trace()\n      var data = new TLSerialization({startMaxLength: message.body.length + 64})\n\n      data.storeIntBytes(this.serverSalt, 64, 'salt')\n      data.storeIntBytes(this.sessionID, 64, 'session_id')\n\n      data.storeLong(message.msg_id, 'message_id')\n      data.storeInt(message.seq_no, 'seq_no')\n\n      data.storeInt(message.body.length, 'message_data_length')\n      data.storeRawBytes(message.body, 'message_data')\n\n      return this.getEncryptedMessage(data.getBuffer()).then(function (encryptedResult) {\n        // console.log(dT(), 'Got encrypted out message'/*, encryptedResult*/)\n        var request = new TLSerialization({startMaxLength: encryptedResult.bytes.byteLength + 256})\n        request.storeIntBytes(self.authKeyID, 64, 'auth_key_id')\n        request.storeIntBytes(encryptedResult.msgKey, 128, 'msg_key')\n        request.storeRawBytes(encryptedResult.bytes, 'encrypted_data')\n\n        var requestData = xhrSendBuffer ? request.getBuffer() : request.getArray()\n\n        var requestPromise\n        var url = MtpDcConfigurator.chooseServer(self.dcID, self.upload)\n        var baseError = {code: 406, type: 'NETWORK_BAD_RESPONSE', url: url}\n\n        try {\n          options = angular.extend(options || {}, {\n            responseType: 'arraybuffer',\n            transformRequest: null\n          })\n          requestPromise = $http.post(url, requestData, options)\n        } catch (e) {\n          requestPromise = $q.reject(e)\n        }\n        return requestPromise.then(\n          function (result) {\n            if (!result.data || !result.data.byteLength) {\n              return $q.reject(baseError)\n            }\n            return result\n          },\n          function (error) {\n            if (error.status == 404 &&\n              (error.data || '').indexOf('nginx/0.3.33') != -1) {\n              Storage.remove(\n                'dc' + self.dcID + '_server_salt',\n                'dc' + self.dcID + '_auth_key'\n              ).then(function () {\n                AppRuntimeManager.reload()\n              })\n            }\n            if (!error.message && !error.type) {\n              error = angular.extend(baseError, {type: 'NETWORK_BAD_REQUEST', originalError: error})\n            }\n            return $q.reject(error)\n          }\n        )\n      })\n    }\n\n    MtpNetworker.prototype.parseResponse = function (responseBuffer) {\n      // console.log(dT(), 'Start parsing response')\n      var self = this\n\n      var deserializer = new TLDeserialization(responseBuffer)\n\n      var authKeyID = deserializer.fetchIntBytes(64, false, 'auth_key_id')\n      if (!bytesCmp(authKeyID, this.authKeyID)) {\n        throw new Error('Invalid server auth_key_id: ' + bytesToHex(authKeyID))\n      }\n      var msgKey = deserializer.fetchIntBytes(128, true, 'msg_key')\n      var encryptedData = deserializer.fetchRawBytes(responseBuffer.byteLength - deserializer.getOffset(), true, 'encrypted_data')\n\n      return this.getDecryptedMessage(msgKey, encryptedData).then(function (dataWithPadding) {\n        // console.log(dT(), 'after decrypt')\n        var deserializer = new TLDeserialization(dataWithPadding, {mtproto: true})\n\n        var salt = deserializer.fetchIntBytes(64, false, 'salt')\n        var sessionID = deserializer.fetchIntBytes(64, false, 'session_id')\n        var messageID = deserializer.fetchLong('message_id')\n\n        var seqNo = deserializer.fetchInt('seq_no')\n\n        var messageBody = deserializer.fetchRawBytes(false, true, 'message_data')\n\n        // console.log(dT(), 'before hash')\n        var hashData = convertToUint8Array(dataWithPadding).subarray(0, deserializer.getOffset())\n\n        return CryptoWorker.sha1Hash(hashData).then(function (dataHash) {\n          if (!bytesCmp(msgKey, bytesFromArrayBuffer(dataHash).slice(-16))) {\n            console.warn(msgKey, bytesFromArrayBuffer(dataHash))\n            throw new Error('server msgKey mismatch')\n          }\n\n          var buffer = bytesToArrayBuffer(messageBody)\n          var deserializerOptions = {\n            mtproto: true,\n            override: {\n              mt_message: function (result, field) {\n                result.msg_id = this.fetchLong(field + '[msg_id]')\n                result.seqno = this.fetchInt(field + '[seqno]')\n                result.bytes = this.fetchInt(field + '[bytes]')\n\n                var offset = this.getOffset()\n\n                try {\n                  result.body = this.fetchObject('Object', field + '[body]')\n                } catch (e) {\n                  console.error(dT(), 'parse error', e.message, e.stack)\n                  result.body = {_: 'parse_error', error: e}\n                }\n                if (this.offset != offset + result.bytes) {\n                  // console.warn(dT(), 'set offset', this.offset, offset, result.bytes)\n                  // console.log(dT(), result)\n                  this.offset = offset + result.bytes\n                }\n              // console.log(dT(), 'override message', result)\n              },\n              mt_rpc_result: function (result, field) {\n                result.req_msg_id = this.fetchLong(field + '[req_msg_id]')\n\n                var sentMessage = self.sentMessages[result.req_msg_id]\n                var type = sentMessage && sentMessage.resultType || 'Object'\n\n                if (result.req_msg_id && !sentMessage) {\n                  // console.warn(dT(), 'Result for unknown message', result)\n                  return\n                }\n                result.result = this.fetchObject(type, field + '[result]')\n              // console.log(dT(), 'override rpc_result', sentMessage, type, result)\n              }\n            }\n          }\n          var deserializer = new TLDeserialization(buffer, deserializerOptions)\n          var response = deserializer.fetchObject('', 'INPUT')\n\n          return {\n            response: response,\n            messageID: messageID,\n            sessionID: sessionID,\n            seqNo: seqNo\n          }\n        })\n      })\n    }\n\n    MtpNetworker.prototype.applyServerSalt = function (newServerSalt) {\n      var serverSalt = longToBytes(newServerSalt)\n\n      var storeObj = {}\n      storeObj['dc' + this.dcID + '_server_salt'] = bytesToHex(serverSalt)\n      Storage.set(storeObj)\n\n      this.serverSalt = serverSalt\n      return true\n    }\n\n    MtpNetworker.prototype.sheduleRequest = function (delay) {\n      if (this.offline) {\n        this.checkConnection('forced shedule')\n      }\n      var nextReq = tsNow() + delay\n\n      if (delay && this.nextReq && this.nextReq <= nextReq) {\n        return false\n      }\n\n      // console.log(dT(), 'shedule req', delay)\n      // console.trace()\n\n      $timeout.cancel(this.nextReqPromise)\n      if (delay > 0) {\n        this.nextReqPromise = $timeout(this.performSheduledRequest.bind(this), delay || 0)\n      } else {\n        setZeroTimeout(this.performSheduledRequest.bind(this))\n      }\n\n      this.nextReq = nextReq\n    }\n\n    MtpNetworker.prototype.ackMessage = function (msgID) {\n      // console.log('ack message', msgID)\n      this.pendingAcks.push(msgID)\n      this.sheduleRequest(30000)\n    }\n\n    MtpNetworker.prototype.reqResendMessage = function (msgID) {\n      console.log(dT(), 'Req resend', msgID)\n      this.pendingResends.push(msgID)\n      this.sheduleRequest(100)\n    }\n\n    MtpNetworker.prototype.cleanupSent = function () {\n      var self = this\n      var notEmpty = false\n      // console.log('clean start', this.dcID/*, this.sentMessages*/)\n      angular.forEach(this.sentMessages, function (message, msgID) {\n        // console.log('clean iter', msgID, message)\n        if (message.notContentRelated && self.pendingMessages[msgID] === undefined) {\n          // console.log('clean notContentRelated', msgID)\n          delete self.sentMessages[msgID]\n        }\n        else if (message.container) {\n          for (var i = 0; i < message.inner.length; i++) {\n            if (self.sentMessages[message.inner[i]] !== undefined) {\n              // console.log('clean failed, found', msgID, message.inner[i], self.sentMessages[message.inner[i]].seq_no)\n              notEmpty = true\n              return\n            }\n          }\n          // console.log('clean container', msgID)\n          delete self.sentMessages[msgID]\n        } else {\n          notEmpty = true\n        }\n      })\n\n      return !notEmpty\n    }\n\n    MtpNetworker.prototype.processMessageAck = function (messageID) {\n      var sentMessage = this.sentMessages[messageID]\n      if (sentMessage && !sentMessage.acked) {\n        delete sentMessage.body\n        sentMessage.acked = true\n\n        return true\n      }\n\n      return false\n    }\n\n    MtpNetworker.prototype.processError = function (rawError) {\n      var matches = (rawError.error_message || '').match(/^([A-Z_0-9]+\\b)(: (.+))?/) || []\n      rawError.error_code = uintToInt(rawError.error_code)\n\n      return {\n        code: !rawError.error_code || rawError.error_code <= 0 ? 500 : rawError.error_code,\n        type: matches[1] || 'UNKNOWN',\n        description: matches[3] || ('CODE#' + rawError.error_code + ' ' + rawError.error_message),\n        originalError: rawError\n      }\n    }\n\n    MtpNetworker.prototype.processMessage = function (message, messageID, sessionID) {\n      // console.log('process message', message, messageID, sessionID)\n      switch (message._) {\n        case 'msg_container':\n          var len = message.messages.length\n          for (var i = 0; i < len; i++) {\n            this.processMessage(message.messages[i], messageID, sessionID)\n          }\n          break\n\n        case 'bad_server_salt':\n          console.log(dT(), 'Bad server salt', message)\n          var sentMessage = this.sentMessages[message.bad_msg_id]\n          if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\n            console.log(message.bad_msg_id, message.bad_msg_seqno)\n            throw new Error('Bad server salt for invalid message')\n          }\n\n          this.applyServerSalt(message.new_server_salt)\n          this.pushResend(message.bad_msg_id)\n          this.ackMessage(messageID)\n          break\n\n        case 'bad_msg_notification':\n          console.log(dT(), 'Bad msg notification', message)\n          var sentMessage = this.sentMessages[message.bad_msg_id]\n          if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\n            console.log(message.bad_msg_id, message.bad_msg_seqno)\n            throw new Error('Bad msg notification for invalid message')\n          }\n\n          if (message.error_code == 16 || message.error_code == 17) {\n            if (MtpTimeManager.applyServerTime(\n                bigStringInt(messageID).shiftRight(32).toString(10)\n              )) {\n              console.log(dT(), 'Update session')\n              this.updateSession()\n            }\n            var badMessage = this.updateSentMessage(message.bad_msg_id)\n            this.pushResend(badMessage.msg_id)\n            this.ackMessage(messageID)\n          }\n          break\n\n        case 'message':\n          this.serverMessages.push(message.msg_id)\n          this.processMessage(message.body, message.msg_id, sessionID)\n          break\n\n        case 'new_session_created':\n          this.ackMessage(messageID)\n\n          this.processMessageAck(message.first_msg_id)\n          this.applyServerSalt(message.server_salt)\n\n          var self = this\n          Storage.get('dc').then(function (baseDcID) {\n            if (baseDcID == self.dcID && !self.upload && updatesProcessor) {\n              updatesProcessor(message, true)\n            }\n          })\n          break\n\n        case 'msgs_ack':\n          for (var i = 0; i < message.msg_ids.length; i++) {\n            this.processMessageAck(message.msg_ids[i])\n          }\n          break\n\n        case 'msg_detailed_info':\n          if (!this.sentMessages[message.msg_id]) {\n            this.ackMessage(message.answer_msg_id)\n            break\n          }\n        case 'msg_new_detailed_info':\n          // this.ackMessage(message.answer_msg_id)\n          this.reqResendMessage(message.answer_msg_id)\n          break\n\n        case 'msgs_state_info':\n          this.ackMessage(message.answer_msg_id)\n          if (this.lastResendReq && this.lastResendReq.req_msg_id == message.req_msg_id && this.pendingResends.length) {\n            var i, badMsgID, pos\n            for (i = 0; i < this.lastResendReq.resend_msg_ids.length; i++) {\n              badMsgID = this.lastResendReq.resend_msg_ids[i]\n              pos = this.pendingResends.indexOf(badMsgID)\n              if (pos != -1) {\n                this.pendingResends.splice(pos, 1)\n              }\n            }\n          }\n          break\n\n        case 'rpc_result':\n          this.ackMessage(messageID)\n\n          var sentMessageID = message.req_msg_id\n          var sentMessage = this.sentMessages[sentMessageID]\n\n          this.processMessageAck(sentMessageID)\n          if (sentMessage) {\n            var deferred = sentMessage.deferred\n            if (message.result._ == 'rpc_error') {\n              var error = this.processError(message.result)\n              console.log(dT(), 'Rpc error', error)\n              if (deferred) {\n                deferred.reject(error)\n              }\n            } else {\n              if (deferred) {\n                if (Config.Modes.debug) {\n                  console.log(dT(), 'Rpc response', message.result)\n                } else {\n                  var dRes = message.result._\n                  if (!dRes) {\n                    if (message.result.length > 5) {\n                      dRes = '[..' + message.result.length + '..]'\n                    } else {\n                      dRes = message.result\n                    }\n                  }\n                  console.log(dT(), 'Rpc response', dRes)\n                }\n                sentMessage.deferred.resolve(message.result)\n              }\n              if (sentMessage.isAPI) {\n                this.connectionInited = true\n              }\n            }\n\n            delete this.sentMessages[sentMessageID]\n          }\n          break\n\n        default:\n          this.ackMessage(messageID)\n\n          // console.log('Update', message)\n          if (updatesProcessor) {\n            updatesProcessor(message, true)\n          }\n          break\n\n      }\n    }\n\n    function startAll () {\n      if (akStopped) {\n        akStopped = false\n        updatesProcessor({_: 'new_session_created'}, true)\n      }\n    }\n\n    function stopAll () {\n      akStopped = true\n    }\n\n    return {\n      getNetworker: function (dcID, authKey, serverSalt, options) {\n        return new MtpNetworker(dcID, authKey, serverSalt, options)\n      },\n      setUpdatesProcessor: function (callback) {\n        updatesProcessor = callback\n      },\n      stopAll: stopAll,\n      startAll: startAll\n    }\n  })\n"]}