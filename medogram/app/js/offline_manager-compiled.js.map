{"version":3,"sources":["offline_manager.js"],"names":[],"mappings":";;AAAA,CAAC,CAAC,SAAS,eAAT,GAA4B;AAC5B,SAAO,WAAP,GAAqB,UAAU,MAAV,EAAkB,QAAlB,EAA4B;AAC/C,QAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,eAAS,EAAC,SAAS,MAAV,EAAT;AACD;AACD,QAAI,SAAS,KAAb;AACA,QAAI;AACF,eAAS,QAAQ,OAAO,OAAf,CAAT;AACD,KAFD,CAEE,OAAO,CAAP,EAAU;AACV,eAAS,IAAT;AACD;AACD,eAAW,YAAY;AAAC,eAAS,MAAT;AAAiB,KAAzC,EAA2C,EAA3C;AACD,GAXD;;AAaA,MAAK,CAAC,UAAU,aAAX,IAA4B,CAAC,OAAO,gBAArC,IACF,OAAO,KAAP,CAAa,MADX,IAEF,CAAC,OAAO,gBAFV,EAE4B;AAC1B;AACD;;AAED,MAAI,WAAW,KAAf;AACA,WAAS,WAAT,GAAwB;AACtB,QAAI,CAAC,QAAL,EAAe;AACb,kBAAY,EAAC,MAAM,yBAAP,EAAkC,SAAS,qDAA3C,EAAZ,EAA+G,UAAU,MAAV,EAAkB;AAC/H,YAAI,MAAJ,EAAY;AACV,iBAAO,QAAP,CAAgB,MAAhB;AACD,SAFD,MAEO;AACL,qBAAW,IAAX;AACD;AACF,OAND;AAOD;AACF;;AAED,MAAI,UAAU,aAAd,EAA6B;AAC3B;AACA,cAAU,aAAV,CAAwB,QAAxB,CAAiC,mBAAjC,EAAsD,IAAtD,CAA2D,UAAU,YAAV,EAAwB;AACjF,cAAQ,GAAR,CAAY,2BAAZ;AACA,mBAAa,gBAAb,CAA8B,aAA9B,EAA6C,YAAY;AACvD,YAAI,mBAAmB,KAAK,UAA5B;;AAEA;AACA,yBAAiB,gBAAjB,CAAkC,aAAlC,EAAiD,YAAY;AAC3D,kBAAQ,iBAAiB,KAAzB;AACE,iBAAK,WAAL;AACE;AACA;AACA,kBAAI,UAAU,aAAV,CAAwB,UAA5B,EAAwC;AACtC;AACD;AACD;;AAEF,iBAAK,WAAL;AACE,sBAAQ,KAAR,CAAc,iDAAd;AACA;AAXJ;AAaD,SAdD;AAeD,OAnBD;AAoBD,KAtBD;AAuBD,GAzBD,MAyBO;AACL;AACA,QAAI,WAAW,OAAO,gBAAtB;AACA,QAAI,gBAAgB,KAApB;AACA,QAAI,iBAAiB,SAAjB,cAAiB,CAAU,KAAV,EAAiB;AACpC,mBAAa,aAAb;AACA,sBAAgB,WAAW,YAAY;AACrC,YAAI;AACF,mBAAS,MAAT;AACD,SAFD,CAEE,OAAO,EAAP,EAAW;AACX,kBAAQ,GAAR,CAAY,sBAAsB,EAAlC;AACD;AACF,OANe,EAMb,SAAS,MANI,CAAhB;AAOD,KATD;;AAWA,mBAAe,IAAf;AACA,WAAO,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C,eAAS,gBAAT,CAA0B,aAA1B,EAAyC,YAAY;AACnD,YAAI,SAAS,MAAT,IAAmB,SAAS,WAAhC,EAA6C;AAC3C;AACD;AACF,OAJD,EAIG,KAJH;AAKA,eAAS,gBAAT,CAA0B,UAA1B,EAAsC,YAAY;AAAC;AAAiB,OAApE,EAAsE,KAAtE;AACA,eAAS,gBAAT,CAA0B,OAA1B,EAAmC,YAAY;AAAC;AAAiB,OAAjE,EAAmE,KAAnE;AACD,KARD;AASD;AACF,CApFA","file":"offline_manager-compiled.js","sourcesContent":[";(function initAutoUpgrade () {\n  window.safeConfirm = function (params, callback) {\n    if (typeof params === 'string') {\n      params = {message: params}\n    }\n    var result = false\n    try {\n      result = confirm(params.message)\n    } catch (e) {\n      result = true\n    }\n    setTimeout(function () {callback(result)}, 10)\n  }\n\n  if ((!navigator.serviceWorker && !window.applicationCache) ||\n    Config.Modes.packed ||\n    !window.addEventListener) {\n    return\n  }\n\n  var declined = false\n  function updateFound () {\n    if (!declined) {\n      safeConfirm({type: 'WEBOGRAM_UPDATED_RELOAD', message: 'A new version of Webogram is downloaded. Launch it?'}, function (result) {\n        if (result) {\n          window.location.reload()\n        } else {\n          declined = true\n        }\n      })\n    }\n  }\n\n  if (navigator.serviceWorker) {\n    // If available, use a Service Worker to handle offlining.\n    navigator.serviceWorker.register('service_worker.js').then(function (registration) {\n      console.log('offline worker registered')\n      registration.addEventListener('updatefound', function () {\n        var installingWorker = this.installing\n\n        // Wait for the new service worker to be installed before prompting to update.\n        installingWorker.addEventListener('statechange', function () {\n          switch (installingWorker.state) {\n            case 'installed':\n              // Only show the prompt if there is currently a controller so it is not\n              // shown on first load.\n              if (navigator.serviceWorker.controller) {\n                updateFound()\n              }\n              break\n\n            case 'redundant':\n              console.error('The installing service worker became redundant.')\n              break\n          }\n        })\n      })\n    })\n  } else {\n    // Otherwise, use AppCache.\n    var appCache = window.applicationCache\n    var updateTimeout = false\n    var scheduleUpdate = function (delay) {\n      clearTimeout(updateTimeout)\n      updateTimeout = setTimeout(function () {\n        try {\n          appCache.update()\n        } catch (ex) {\n          console.log('appCache.update: ' + ex)\n        }\n      }, delay || 300000)\n    }\n\n    scheduleUpdate(3000)\n    window.addEventListener('load', function () {\n      appCache.addEventListener('updateready', function () {\n        if (appCache.status == appCache.UPDATEREADY) {\n          updateFound()\n        }\n      }, false)\n      appCache.addEventListener('noupdate', function () {scheduleUpdate()}, false)\n      appCache.addEventListener('error', function () {scheduleUpdate()}, false)\n    })\n  }\n})()\n"]}