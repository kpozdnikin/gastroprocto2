{"version":3,"sources":["vk-login.js"],"names":[],"mappings":"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","file":"vk-login-compiled.js","sourcesContent":["var express = require('express')\n    , passport = require('passport')\n    , util = require('util')\n    , VkStrategy = require('passport-vkontakte').Strategy;\n\nvar VK_APP_ID = '5759141';//process.env.VK_APP_ID;\nvar VK_APP_SECRET = 'kZIz8p62MfBIOUbhfCTd';//process.env.VK_APP_SECRET;\n\nif (!VK_APP_ID || !VK_APP_SECRET) {\n    throw new Error('Set VK_APP_ID and VK_APP_SECRET env vars to run the example');\n}\n\n\n// Passport session setup.\n//   To support persistent login sessions, Passport needs to be able to\n//   serialize users into and deserialize users out of the session.  Typically,\n//   this will be as simple as storing the user ID when serializing, and finding\n//   the user by ID when deserializing.  However, since this example does not\n//   have a database of user records, the complete VK profile is serialized\n//   and deserialized.\npassport.serializeUser(function(user, done) {\n    done(null, user);\n});\n\npassport.deserializeUser(function(obj, done) {\n    done(null, obj);\n});\n\n\n// Use the VkStrategy within Passport.\n//   Strategies in Passport require a `verify` function, which accept\n//   credentials (in this case, an accessToken, refreshToken, and VK\n//   profile), and invoke a callback with a user object.\npassport.use(new VkStrategy(\n    {\n        clientID: VK_APP_ID,\n        clientSecret: VK_APP_SECRET,\n        callbackURL: \"http://localhost:3000/auth/vk/callback\",\n        scope: ['email'],\n        profileFields: ['email'],\n    },\n    function verify(accessToken, refreshToken, params, profile, done) {\n\n        // asynchronous verification, for effect...\n        process.nextTick(function () {\n\n            // To keep the example simple, the user's VK profile is returned to\n            // represent the logged-in user.  In a typical application, you would want\n            // to associate the VK account with a user record in your database,\n            // and return that user instead.\n            return done(null, profile);\n        });\n    }\n));\n\n\n\nvar app = express();\n\n// configure Express\napp.set('views', __dirname + '/views');\napp.set('view engine', 'ejs');\napp.use(require('cookie-parser')());\napp.use(require('body-parser')());\napp.use(require('express-session')({ secret: 'keyboard cat' }));\n// Initialize Passport!  Also use passport.session() middleware, to support\n// persistent login sessions (recommended).\napp.use(passport.initialize());\napp.use(passport.session());\n\n\napp.get('/', function(req, res){\n    res.render('index', { user: req.user });\n});\n\napp.get('/account', ensureAuthenticated, function(req, res){\n    res.render('account', { user: req.user });\n});\n\napp.get('/login', function(req, res){\n    res.render('login', { user: req.user });\n});\n\n// GET /auth/vk\n//   Use passport.authenticate() as route middleware to authenticate the\n//   request.  The first step in VK authentication will involve\n//   redirecting the user to vk.com.  After authorization, VK will\n//   redirect the user back to this application at /auth/vk/callback\napp.get('/auth/vk',\n    passport.authenticate('vkontakte'),\n    function(req, res){\n        // The request will be redirected to VK for authentication, so this\n        // function will not be called.\n    });\n\n// GET /auth/vk/callback\n//   Use passport.authenticate() as route middleware to authenticate the\n//   request.  If authentication fails, the user will be redirected back to the\n//   login page.  Otherwise, the primary route function function will be called,\n//   which, in this example, will redirect the user to the home page.\napp.get('/auth/vk/callback',\n    passport.authenticate('vkontakte', { failureRedirect: '/login' }),\n    function(req, res) {\n        res.redirect('/');\n    });\n\napp.get('/logout', function(req, res){\n    req.logout();\n    res.redirect('/');\n});\n\napp.listen(3000);\n\n\n// Simple route middleware to ensure user is authenticated.\n//   Use this route middleware on any resource that needs to be protected.  If\n//   the request is authenticated (typically via a persistent login session),\n//   the request will proceed.  Otherwise, the user will be redirected to the\n//   login page.\nfunction ensureAuthenticated(req, res, next) {\n    if (req.isAuthenticated()) { return next(); }\n    res.redirect('/login')\n}"]}